<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zafkiel的博客小屋</title>
  
  
  <link href="https://www.zafkiel3.com/atom.xml" rel="self"/>
  
  <link href="https://www.zafkiel3.com/"/>
  <updated>2024-07-07T11:54:23.285Z</updated>
  <id>https://www.zafkiel3.com/</id>
  
  <author>
    <name>Zafkiel</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://www.zafkiel3.com/posts/0.html"/>
    <id>https://www.zafkiel3.com/posts/0.html</id>
    <published>2024-06-20T14:58:16.709Z</published>
    <updated>2024-07-07T11:54:23.285Z</updated>
    
    <content type="html"><![CDATA[<h1>学习记录：《安卓逆向这档事》十二</h1><h2 id="1-so加载流程">1.so加载流程</h2><p>作用：反调试、脱壳、注入等</p><p>流程图：<br><img src="https://pic.rmb.bdstatic.com/bjh/bb663034587188a1fa4ebf55789f66542707.png" alt="img"></p><p>函数的基本介绍：</p><table><thead><tr><th style="text-align:left">函数名</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>android_dlopen_ext()</code> 、<code>dlopen()</code>、<code>do_dlopen()</code></td><td style="text-align:left">这三个函数主要用于加载库文件。<code>android_dlopen_ext</code> 是系统的一个函数，用于在运行时动态加载共享库。与标准的 <code>dlopen()</code> 函数相比，<code>android_dlopen_ext</code> 提供了更多的参数选项和扩展功能，例如支持命名空间、符号版本等特性。</td></tr><tr><td style="text-align:left"><code>find_library()</code></td><td style="text-align:left"><code>find_library()</code> 函数用于查找库，基本的用途是给定一个库的名字，然后查找并返回这个库的路径。</td></tr><tr><td style="text-align:left"><code>call_constructors()</code></td><td style="text-align:left"><code>call_constructors()</code> 是用于调用动态加载库中的构造函数的函数。</td></tr><tr><td style="text-align:left"><code>init</code></td><td style="text-align:left">库的构造函数，用于初始化库中的静态变量或执行其他需要在库被加载时完成的任务。如果没有定义<code>init</code>函数，系统将不会执行任何动作。需要注意的是，<code>init</code>函数不应该有任何参数，并且也没有返回值。</td></tr><tr><td style="text-align:left"><code>init_array</code></td><td style="text-align:left"><code>init_array</code>是ELF（Executable and Linkable Format，可执行和可链接格式）二进制格式中的一个特殊段（section），这个段包含了一些函数的指针，这些函数将在<code>main()</code>函数执行前被调用，用于初始化静态局部变量和全局变量。</td></tr><tr><td style="text-align:left"><code>jni_onload</code></td><td style="text-align:left">这是Android JNI(Java Native Interface)中的一个函数。当一个native库被系统加载时，该函数会被自动调用。<code>JNI_OnLoad</code>可以做一些初始化工作，例如注册你的native方法或者初始化一些数据结构。如果你的native库没有定义这个函数，那么JNI会使用默认的行为。<code>JNI_OnLoad</code>的返回值应该是需要的JNI版本，一般返回<code>JNI_VERSION_1_6</code>。</td></tr></tbody></table><p>下断点时机：<br>应用级别的：java_com_XXX；<br>外壳级别的：JNI_Onload，.init，.init_array(反调试);<br>系统级别的：fopen，fget，dvmdexfileopen(脱壳)；</p><p>安卓在线源码查看<br><a href="http://aospxref.com/">AOSPXRef</a></p><h2 id="2-android-server的push">2.android server的push</h2><p>1.在IDA目录下的dbgsrv，选择跟手机架构一致的server<br>2.adb push as /data/local/tmp/<br>3.进入手机端命令：adb shell<br>4.切换获取手机的root权限：su<br>5.跳到对应路径：cd /data/local/tmp/<br>6.提权：chmod 777 as<br>7.XappDebug hook</p><p>注：一般真机用android_server64和android_server，模拟器用android_x64_server和android_x86_server，现在的真机一般都是64位的了，所以push一个android_server64够用了，最好将这个server改一个名，有些apk会检测有没有像android_server64这样的文件在运行，避免被检测，frida哪个也一样</p><h2 id="2-调试步骤">2.调试步骤</h2><p>分为两种模式，一种是以debug模式启动，第二种则以普通模式启动，二者的区别在于使用场景，有时候要动态调试的参数在app一启动的时候就产生了，时机较早，所以需要以debug模式去挂起app</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> 复制代码 隐藏代码解释adb shell am start -D -n <span class="keyword">com</span>.zj.wuaipojie/.ui.ChallengeEight （-D 则表示以debug模式启动app）</span><br><span class="line">adb forward tcp:<span class="number">23946</span> tcp:<span class="number">23946</span> (端口转发)(前一个tcp是表示本地计算机上的端口号，后一个表示 Android 设备上的端口号)</span><br><span class="line">adb forward tcp:<span class="number">8700</span> jdwp:PID (pid监听)</span><br><span class="line">jdb -connect <span class="keyword">com</span>.sun.jdi.SocketAttach:hostname=<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>,port=<span class="number">8700</span> (jdb挂起)</span><br></pre></td></tr></table></figure><p>PS：若不是以debug启动则不需要输入后两条命令<br>其他的步骤具体看视频</p><p>佚名大佬：[<a href="https://www.52pojie.cn/thread-1315444-1-7.html">超级详细]实战分析一个Crackme的过程</a></p><h3 id="3-常见寄存器知识">3.常见寄存器知识</h3><p>在进行动态调试，以下是一些常用的寄存器介绍：</p><table><thead><tr><th style="text-align:left">寄存器名称</th><th style="text-align:left">功能介绍</th></tr></thead><tbody><tr><td style="text-align:left"><code>R0-R12</code></td><td style="text-align:left">通用寄存器，用于存储临时数据。在函数调用时，<code>R0-R3</code>用于存储前四个参数，其余的参数通过堆栈传递。返回值也通过<code>R0</code>和<code>R1</code>传递。</td></tr><tr><td style="text-align:left"><code>R13 (SP)</code></td><td style="text-align:left">堆栈指针寄存器，指向当前堆栈的顶部。</td></tr><tr><td style="text-align:left"><code>R14 (LR)</code></td><td style="text-align:left">链接寄存器，存储子程序的返回地址。</td></tr><tr><td style="text-align:left"><code>R15 (PC)</code></td><td style="text-align:left">程序计数器，指向下一条要执行的指令。</td></tr><tr><td style="text-align:left"><code>CPSR</code></td><td style="text-align:left">当前程序状态寄存器，保存程序的状态信息，如算术运算的结果标志、中断禁止标志等。</td></tr><tr><td style="text-align:left"><code>FPSCR</code></td><td style="text-align:left">浮点状态和控制寄存器，如果你在调试的代码中涉及到浮点运算，那么这个寄存器会比较重要。</td></tr></tbody></table><h3 id="4-可能遇到的问题">4.可能遇到的问题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.<span class="string">&#x27;jdb&#x27;</span> 不是内部或外部命令，也不是可运行的程序或批处理文件。</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2.</span>java.io.IOException: handshake failed - connection prematurally closed</span><br><span class="line">        at com.sun.tools.jdi.SocketTransportService.handshake(SocketTransportService.java:<span class="number">136</span>)</span><br><span class="line">        at com.sun.tools.jdi.SocketTransportService.attach(SocketTransportService.java:<span class="number">232</span>)</span><br><span class="line">        at com.sun.tools.jdi.GenericAttachingConnector.attach(GenericAttachingConnector.java:<span class="number">116</span>)</span><br><span class="line">        at com.sun.tools.jdi.SocketAttachingConnector.attach(SocketAttachingConnector.java:<span class="number">90</span>)</span><br><span class="line">        at com.sun.tools.example.debug.tty.VMConnection.attachTarget(VMConnection.java:<span class="number">519</span>)</span><br><span class="line">        at com.sun.tools.example.debug.tty.VMConnection.open(VMConnection.java:<span class="number">328</span>)</span><br><span class="line">        at com.sun.tools.example.debug.tty.Env.init(Env.java:<span class="number">63</span>)</span><br><span class="line">        at com.sun.tools.example.debug.tty.TTY.main(TTY.java:<span class="number">1066</span>)</span><br><span class="line">致命错误:</span><br><span class="line">无法附加到目标 VM。</span><br><span class="line">解决方法：有可能是手机问题，建议低版本真机，不要用模拟器！切命令顺序不要乱！另外也有可能软件有反调试！</span><br></pre></td></tr></table></figure><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3.动态调试中找不到<span class="keyword">so</span>文件</span><br><span class="line">解决方法：可以尝试手动复制一份对应的<span class="keyword">so</span>文件放到data/<span class="keyword">app</span>/包名/lib目录下</span><br></pre></td></tr></table></figure><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span>.device <span class="params">offline</span></span><br><span class="line">解决方法：重新插拔usb，再不行就重启机子</span><br></pre></td></tr></table></figure><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">5.0.0.0.0:23946: bind: Address already <span class="keyword">in</span> <span class="keyword">use</span></span><br><span class="line">解决方案：</span><br><span class="line">adb <span class="keyword">shell</span> <span class="string">&quot;su -c &#x27;lsof | grep 23946&#x27;&quot;</span> <span class="comment">//获取pid</span></span><br><span class="line">adb <span class="keyword">shell</span> <span class="string">&quot;su -c &#x27;kill -9 PID&#x27;&quot;</span> <span class="comment">//这里的pid要根据上一步获取的填写</span></span><br></pre></td></tr></table></figure><h3 id="5-常见反调试">5.常见反调试</h3><p>1.调试端口检测<br>检测常见的23946端口，所以在运行时可以加 -p 指定一个另外的端口来过掉这个检测<br>2.调试进程名检测<br>固定的进程名 android_server gdb_server等等，所以要改个名字，例如as64<br>3.ptrace检测<br>每个进程同时刻只能被1个调试进程ptrace ，主动ptrace本进程可以使得其他调试器无法调试<br>实现代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">ptrace_protect</span>()<span class="comment">//ptrace附加自身线程 会导致此进程TracerPid 变为父进程的TracerPid 即zygote</span></span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> ptrace(PTRACE_TRACEME,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);;<span class="comment">//返回-1即为已经被调试</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-SO防护手段">3.SO防护手段</h2><p>常见防护手段:</p><table><thead><tr><th style="text-align:left">主要功能</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">SO加壳</td><td style="text-align:left">对C/C++源码编译出来的SO文件进行加壳，使SO文件无法正确反编译和反汇编。</td></tr><tr><td style="text-align:left">SO源码虚拟化保护</td><td style="text-align:left">将原始汇编指令翻译为自定义的虚拟机指令，跳转到自定义的虚拟机中执行，每次保护生成的虚拟机指令随机，且对虚拟机解释器再度混淆</td></tr><tr><td style="text-align:left">SO防调用</td><td style="text-align:left">对SO文件进行授权绑定，防止SO文件被非授权应用调用运行。</td></tr><tr><td style="text-align:left">SO Linker</td><td style="text-align:left">对整个SO文件进行加密压缩，包括代码段、符号表和字符串等，运行时再解密解压缩到内存，从而有效的防止SO数据的泄露。</td></tr><tr><td style="text-align:left">SO源码混淆</td><td style="text-align:left">常量字符串加密、分裂基本块、等价指令替换、虚假控制流、控制流平坦化。</td></tr><tr><td style="text-align:left">SO环境监测</td><td style="text-align:left">防frida\xposed\root、防动态调试、防模拟器、防多开等</td></tr></tbody></table><h3 id="1-ollvm简介">1.ollvm简介</h3><p>LLVM(Obfuscator-LLVM)是瑞士西北应用科技大学安全实验室于2010年6月份发起的一个项目,该项目旨在提供一套开源的针对LLVM的代码混淆工具,以增加对逆向工程的难度，只不过仅更新到llvm的4.0，2017年开始就没在更新。<br><a href="https://github.com/obfuscator-llvm/obfuscator">项目地址</a></p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">源代码（c/c++）经过clang--&gt; 中间代码<span class="function"><span class="params">(经过一系列的优化，优化用的是Pass)</span>--&gt;</span> 机器码</span><br></pre></td></tr></table></figure><h3 id="2-ollvm的分类">2.ollvm的分类</h3><table><thead><tr><th style="text-align:left">分类</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">指令替换（Instructions Substitution)(Sub)</td><td style="text-align:left">将一条运算指令替换为多条等价的运算指令，例如：y=x+1变为y=x+1+1-1</td></tr><tr><td style="text-align:left">虚假控制流（Bogus Control Flow)(bcf)</td><td style="text-align:left">通过加入包含不透明谓词的条件跳转和不可达的基本块，来干扰IDA的控制流分析和F5反汇编</td></tr><tr><td style="text-align:left">控制流平坦化(Control Flow Flattening)(Fla)</td><td style="text-align:left">主要通过一个主分发器来控制程序基本块的执行流程，将所有基本代码放到控制流最底部，然后删除原理基本块之间跳转关系，添加次分发器来控制分发逻辑，然后过新的复杂分发逻辑还原原来程序块之间的逻辑关系</td></tr><tr><td style="text-align:left">字符串加密</td><td style="text-align:left">编写一个pass将其中的字符串信息使用一些加密算法进行加密，然后特定的时间进行还原</td></tr></tbody></table><h4 id="1-2-1-指令替换（Sub）">1.2.1 指令替换（Sub）</h4><p>指令替换，将一条运算指令，替换为多条等价的运算指令。例如：<code>y=x+1</code>变为<code>y=x+1+1-1</code></p><p><img src="https://pic.rmb.bdstatic.com/bjh/5657f2b0cb88f9410b9ec005374483ee4165.png" alt="img"></p><h4 id="1-2-2-虚假控制流（bcf）">1.2.2 虚假控制流（bcf）</h4><p>虚假控制流混淆主要通过加入包含不透明谓词(相邻数字相乘恒为偶数)的条件跳转和不可达的基本块，来干扰IDA的控制流分析和F5反汇编<br>常见特征：不透明谓词–&gt;例如<code>y &gt; 10 || x * (x + 1) % 2 != 0</code></p><p><img src="https://pic.rmb.bdstatic.com/bjh/d69ff8297a12fd1c9fe7ff62fbe5efae4286.png" alt="|800"></p><h4 id="1-2-3-控制流平坦化（Fla）">1.2.3 控制流平坦化（Fla）</h4><p>控制流平坦化，主要通过一个主分发器来控制程序基本块的执行流程。该方法将所有基本代码放到控制流最底部，然后删除原理基本块之间跳转关系，添加次分发器来控制分发逻辑，然后过新的复杂分发逻辑还原原来程序块之间的逻辑关系。<br>常见的特征：一大堆分支函数</p><p><img src="https://pic.rmb.bdstatic.com/bjh/70e8ece9cfaf25fc157f469ee70bdc276221.png" alt="|800"></p><p><img src="https://pic.rmb.bdstatic.com/bjh/e966a143f2519a137216d5614e0e2ea36269.png" alt="|800"></p><h4 id="1-2-4-字符串加密">1.2.4 字符串加密</h4><p>字符串加密的原理很简单，编写一个pass将其中的字符串信息使用一些加密算法进行加密，然后特定的时间进行还原。一般含有字符串混淆、函数名混淆、不在init_array解密等<br>常见的特征：datadiv_decoded</p><p><img src="https://pic.rmb.bdstatic.com/bjh/3c7df87b5caf4fb8e8eb5a5e6770974c3143.png" alt="|800"></p><h3 id="3-ollvm对抗">3.ollvm对抗</h3><p>1.简单ollvm可以通过交叉引用分析<br>2.angr去除不透明谓词<br>3.Unicorn/Unidbg/AndroidNativeEmu模拟执行<br>4.IDA Trace<br>5.binary ninja<br>6.后端编译优化<br>7.frida辅助分析</p><h3 id="4-IDA-Trace-实战分析ollvm">4.IDA Trace 实战分析ollvm</h3><p>1.在要trace的函数前后下断，触发断点<br>2.配置trace的log输出路径，并选择trace模式</p><ul><li>Instruction tracing 调试器将为每条指令保存所有修改后的寄存器值。</li><li>Basic block tracing 调试器将保存到达临时基本块断点的所有地址。</li><li>Function tracing 调试器将保存发生函数调用或函数返回的所有地址。<br>3.run并触发trace</li></ul><h2 id="文章（IDA反调试）">文章（IDA反调试）</h2><p><a href="https://bbs.kanxue.com/thread-268155.htm">对安卓反调试和校验检测的一些实践与结论</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;学习记录：《安卓逆向这档事》十二&lt;/h1&gt;
&lt;h2 id=&quot;1-so加载流程&quot;&gt;1.so加载流程&lt;/h2&gt;
&lt;p&gt;作用：反调试、脱壳、注入等&lt;/p&gt;
&lt;p&gt;流程图：&lt;br&gt;
&lt;img src=&quot;https://pic.rmb.bdstatic.com/bjh/bb6630</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://www.zafkiel3.com/posts/0.html"/>
    <id>https://www.zafkiel3.com/posts/0.html</id>
    <published>2024-06-19T09:52:01.311Z</published>
    <updated>2024-07-07T11:54:23.284Z</updated>
    
    <content type="html"><![CDATA[<h1>学习记录：《安卓逆向这档事》十</h1><h2 id="1-ELF文件格式">1. ELF文件格式</h2><p>ELF（Executable and Linkable Format）是一种可执行和可链接的文件格式，是linux底下二进制文件，可以理解为windows下的<code>PE文件</code>，在Android中可以比作<code>SO</code>，方便函数的移植，在常用于保护Android软件，增加逆向难度。</p><p>ELF文件的主要组成部分包括：</p><ul><li>ELF Header：文件头，描述文件的基本信息</li><li>Program Header Table：程序头表，描述进程映像的布局</li><li>Section Header Table：节区头表，描述文件的各个节区</li></ul><table><thead><tr><th style="text-align:left">节区名</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">.text</td><td style="text-align:left">代码段，存放程序的指令</td></tr><tr><td style="text-align:left">.data</td><td style="text-align:left">数据段，存放已初始化的全局变量和静态变量</td></tr><tr><td style="text-align:left">.rodata</td><td style="text-align:left">只读数据段，存放只读数据</td></tr><tr><td style="text-align:left">.bss</td><td style="text-align:left">未初始化数据段，存放未初始化的全局变量和静态变量</td></tr><tr><td style="text-align:left">.symtab</td><td style="text-align:left">符号表，存放符号信息</td></tr><tr><td style="text-align:left">.strtab</td><td style="text-align:left">字符串表，存放字符串数据</td></tr><tr><td style="text-align:left">.dynsym</td><td style="text-align:left">动态符号表，存放动态链接需要的符号信息</td></tr><tr><td style="text-align:left">.dynamic</td><td style="text-align:left">动态链接信息，存放动态链接器需要的信息</td></tr></tbody></table><h2 id="2-NDK开发（Android-Studio中下载要科学上网）">2.NDK开发（Android Studio中下载要科学上网）</h2><p>NDK（Native Development Kit）是一套用于开发Android应用程序的工具集，它允许您在C/C++中编写性能关键的部分代码，并将这些代码与Java代码进行连接。</p><p>步骤：<br>1.下载NDK和CMake<br>2.新建一个项目,往下拉,找到&quot;c++&quot;这个选项（这个选项会在app/cpp/下多两个文件分别是：cmakelist.txt和native-lib.cpp）<br>3.查看CMakeLists.txt和编写native-lib.cpp<br>下面是cmakelist.txt和native-lib.cpp文件的作用以及简要说明：</p><table><thead><tr><th style="text-align:left">文件名</th><th style="text-align:left">作用</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">CMakeLists.txt</td><td style="text-align:left">构建配置文件</td><td style="text-align:left">CMakeLists.txt是用于配置NDK项目的构建系统的文件。它指定了构建所需的源文件、依赖项、编译选项等。在构建过程中，CMake会根据该文件的指示生成对应的构建脚本，用于编译本地代码并生成本地库。</td></tr><tr><td style="text-align:left">native-lib.cpp</td><td style="text-align:left">本地代码实现文件</td><td style="text-align:left">native-lib.cpp是包含本地代码实现的文件。它定义了通过Java和本地代码之间进行通信的本地方法。该文件中的函数实现将被编译为本地库，供Java代码调用。</td></tr></tbody></table><p>MainActivity.java中的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Used to load the &#x27;ndkdemo&#x27; library on application startup.</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">&quot;ndkdemo&quot;</span>); <span class="comment">// 加载名为&quot;ndkdemo&quot;的库</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ActivityMainBinding binding; <span class="comment">// 声明一个ActivityMainBinding变量</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">        binding = ActivityMainBinding.inflate(getLayoutInflater()); <span class="comment">// 使用ViewBinding将布局文件解析为一个ActivityMainBinding对象</span></span><br><span class="line">        setContentView(binding.getRoot()); <span class="comment">// 将Activity的布局设置为根布局</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Example of a call to a native method</span></span><br><span class="line">        <span class="type">TextView</span> <span class="variable">tv</span> <span class="operator">=</span> binding.sampleText; <span class="comment">// 获取布局文件中的TextView控件</span></span><br><span class="line">        tv.setText(stringFromJNI()); <span class="comment">// 调用本地方法stringFromJNI()并将其返回的字符串设置为TextView的文本内容</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A native method that is implemented by the &#x27;ndkdemo&#x27; native library,</span></span><br><span class="line"><span class="comment">     * which is packaged with this application.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">native</span> String <span class="title function_">stringFromJNI</span><span class="params">()</span>; <span class="comment">// 声明一个native方法stringFromJNI()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CMakeLists.txt中的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"># For more information about using CMake with Android Studio, read the</span><br><span class="line"># documentation: https:<span class="comment">//d.android.com/studio/projects/add-native-code.html</span></span><br><span class="line"></span><br><span class="line"># 设置构建本地库所需的CMake的最小版本要求</span><br><span class="line">cmake_minimum_required(VERSION <span class="number">3.22</span><span class="number">.1</span>)</span><br><span class="line"></span><br><span class="line"># 声明和命名项目</span><br><span class="line">project(<span class="string">&quot;ndkdemo&quot;</span>)</span><br><span class="line"></span><br><span class="line"># 创建并命名一个库，设置其类型为STATIC或SHARED，并指定源代码的相对路径</span><br><span class="line"># 可以定义多个库，CMake会为您构建它们</span><br><span class="line"># Gradle会自动将共享库打包到APK中</span><br><span class="line">add_library(</span><br><span class="line">        # 设置库的名称</span><br><span class="line">        ndkdemo</span><br><span class="line"></span><br><span class="line">        # 设置库类型为共享库</span><br><span class="line">        SHARED</span><br><span class="line"></span><br><span class="line">        # 提供源文件的相对路径</span><br><span class="line">        <span class="keyword">native</span>-lib.cpp)</span><br><span class="line"></span><br><span class="line"># 搜索指定的预构建库并将路径存储为变量。</span><br><span class="line"># 由于CMake默认在搜索路径中包含系统库，因此您只需指定要添加的公共NDK库的名称。</span><br><span class="line"># CMake会在完成构建之前验证该库是否存在。</span><br><span class="line">find_library(</span><br><span class="line">        # 设置路径变量的名称</span><br><span class="line">        log-lib</span><br><span class="line"></span><br><span class="line">        # 指定要让CMake定位的NDK库的名称</span><br><span class="line">        log)</span><br><span class="line"></span><br><span class="line"># 指定CMake应链接到目标库的库。</span><br><span class="line"># 您可以链接多个库，例如在此构建脚本中定义的库、预构建的第三方库或系统库。</span><br><span class="line">target_link_libraries(</span><br><span class="line">        # 指定目标库</span><br><span class="line">        ndkdemo</span><br><span class="line"></span><br><span class="line">        # 将目标库链接到NDK中包含的log库</span><br><span class="line">        $&#123;log-lib&#125;)</span><br></pre></td></tr></table></figure><p>native-lib.cpp中的代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;jni.h&gt; <span class="comment">// JNI头文件，提供了JNI函数和数据类型的定义</span></span><br><span class="line">#include &lt;string&gt; <span class="comment">// C++标准库的string类</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明一个jni函数，该函数将会被Java代码调用</span></span><br><span class="line"><span class="comment">// JNIEXPORT表示这个函数是可导出的，并且可以被其他代码使用</span></span><br><span class="line"><span class="comment">// jstring表示这个函数返回的是一个Java字符串对象</span></span><br><span class="line"><span class="comment">// JNICALL是JNI函数的调用约定</span></span><br><span class="line"><span class="comment">// Java_com_example_ndkdemo_MainActivity_stringFromJNI是JNI函数的命名规则，与Java中对应的方法名对应</span></span><br><span class="line"><span class="comment">// Java打头，1包名,2类名,3方法名字;&quot;_&quot;号隔开</span></span><br><span class="line">extern <span class="string">&quot;C&quot;</span> JNIEXPORT jstring JNICALL</span><br><span class="line"><span class="title function_">Java_com_example_ndkdemo_MainActivity_stringFromJNI</span><span class="params">(</span></span><br><span class="line"><span class="params">        JNIEnv* env, // JNIEnv是指向JNI环境的指针，可以用来访问JNI提供的功能</span></span><br><span class="line"><span class="params">        jobject <span class="comment">/* this */</span>)</span> &#123; <span class="comment">// jobject是指向Java对象的指针，在本例中并没有使用</span></span><br><span class="line"></span><br><span class="line">    std::<span class="type">string</span> <span class="variable">hello</span> <span class="operator">=</span> <span class="string">&quot;Hello from C++&quot;</span>; <span class="comment">// 创建一个C++字符串对象</span></span><br><span class="line">    <span class="keyword">return</span> env-&gt;NewStringUTF(hello.c_str()); <span class="comment">// 将C++字符串对象转换为Java字符串对象并返回</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-JNI的前世今生">1.JNI的前世今生</h3><p>NDK是开发套件，JNI才是调用的框架。所以与其说是NDK开发，不如说是JNI的开发。不过NDK是Android提供的开发套件。JNI可不是，JNI全称Java Native Interface,即Java本地接口，JNI是Java调用Native 语言的一种特性。通过JNI可以使得Java与C/C++机型交互。即可以在Java代码中调用C/C++等语言的代码或者在C/C++代码中调用Java代码。</p><h3 id="2-JNI的两种注册方式">2.JNI的两种注册方式</h3><h4 id="jni静态注册方式">jni静态注册方式</h4><ul><li><p>优点: 理解和使用方式简单, 属于傻瓜式操作, 使用相关工具按流程操作就行, 出错率低</p></li><li><p>缺点: 当需要更改类名,包名或者方法时, 需要按照之前方法重新生成头文件, 灵活性不高</p><h4 id="jni动态注册方式">jni动态注册方式</h4></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="function">JNIEXPORT jstring JNICALL <span class="title">Java_com_example_ndkdemo_MainActivity_nativeGetStringFromJNI</span><span class="params">(JNIEnv* env, jobject obj)</span> </span>&#123;</span><br><span class="line">    std::string hello = <span class="string">&quot;Hello wuaipojie&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> env-&gt;<span class="built_in">NewStringUTF</span>(hello.<span class="built_in">c_str</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义本地方法注册函数</span></span><br><span class="line"><span class="function">JNIEXPORT jint JNICALL <span class="title">JNI_OnLoad</span><span class="params">(JavaVM* vm, <span class="type">void</span>* reserved)</span> </span>&#123;</span><br><span class="line">    JNIEnv* env;</span><br><span class="line">    <span class="keyword">if</span> (vm-&gt;<span class="built_in">GetEnv</span>(<span class="built_in">reinterpret_cast</span>&lt;<span class="type">void</span>**&gt;(&amp;env), JNI_VERSION_1_6) != JNI_OK) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义要注册的本地方法</span></span><br><span class="line">    JNINativeMethod methods[] = &#123;</span><br><span class="line">        &#123;<span class="string">&quot;nativeGetStringFromJNI&quot;</span>, <span class="string">&quot;()Ljava/lang/String;&quot;</span>, <span class="built_in">reinterpret_cast</span>&lt;<span class="type">void</span>*&gt;(Java_com_example_ndkdemo_MainActivity_nativeGetStringFromJNI)&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取类引用</span></span><br><span class="line">    jclass clazz = env-&gt;<span class="built_in">FindClass</span>(<span class="string">&quot;com/example/ndkdemo/MainActivity&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (clazz == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册本地方法</span></span><br><span class="line">    <span class="keyword">if</span> (env-&gt;<span class="built_in">RegisterNatives</span>(clazz, methods, <span class="built_in">sizeof</span>(methods) / <span class="built_in">sizeof</span>(methods[<span class="number">0</span>])) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> JNI_VERSION_1_6;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="comment">// extern &quot;C&quot;</span></span><br></pre></td></tr></table></figure><h4 id="数据类型">数据类型</h4><p>下面是一些常见的C++数据类型和它们在Java中的对应关系，以及它们在JNI动态注册中的数据类型签名（signature）：</p><table><thead><tr><th style="text-align:left">C++ 数据类型</th><th style="text-align:left">Java 数据类型</th><th style="text-align:left">JNI 数据类型签名</th></tr></thead><tbody><tr><td style="text-align:left">jint</td><td style="text-align:left">int</td><td style="text-align:left">“I”</td></tr><tr><td style="text-align:left">jboolean</td><td style="text-align:left">boolean</td><td style="text-align:left">“Z”</td></tr><tr><td style="text-align:left">jbyte</td><td style="text-align:left">byte</td><td style="text-align:left">“B”</td></tr><tr><td style="text-align:left">jchar</td><td style="text-align:left">char</td><td style="text-align:left">“C”</td></tr><tr><td style="text-align:left">jshort</td><td style="text-align:left">short</td><td style="text-align:left">“S”</td></tr><tr><td style="text-align:left">jlong</td><td style="text-align:left">long</td><td style="text-align:left">“J”</td></tr><tr><td style="text-align:left">jfloat</td><td style="text-align:left">float</td><td style="text-align:left">“F”</td></tr><tr><td style="text-align:left">jdouble</td><td style="text-align:left">double</td><td style="text-align:left">“D”</td></tr><tr><td style="text-align:left">jobject</td><td style="text-align:left">Object</td><td style="text-align:left">“Ljava/lang/Object;”</td></tr><tr><td style="text-align:left">jstring</td><td style="text-align:left">String</td><td style="text-align:left">“Ljava/lang/String;”</td></tr><tr><td style="text-align:left">jarray</td><td style="text-align:left">Array</td><td style="text-align:left">“[elementType”</td></tr><tr><td style="text-align:left">jobjectArray</td><td style="text-align:left">Object[]</td><td style="text-align:left">“[Ljava/lang/Object;”</td></tr><tr><td style="text-align:left">jbooleanArray</td><td style="text-align:left">boolean[]</td><td style="text-align:left">“[Z”</td></tr><tr><td style="text-align:left">jbyteArray</td><td style="text-align:left">byte[]</td><td style="text-align:left">“[B”</td></tr><tr><td style="text-align:left">jcharArray</td><td style="text-align:left">char[]</td><td style="text-align:left">“[C”</td></tr><tr><td style="text-align:left">jshortArray</td><td style="text-align:left">short[]</td><td style="text-align:left">“[S”</td></tr><tr><td style="text-align:left">jintArray</td><td style="text-align:left">int[]</td><td style="text-align:left">“[I”</td></tr><tr><td style="text-align:left">jlongArray</td><td style="text-align:left">long[]</td><td style="text-align:left">“[J”</td></tr><tr><td style="text-align:left">jfloatArray</td><td style="text-align:left">float[]</td><td style="text-align:left">“[F”</td></tr><tr><td style="text-align:left">jdoubleArray</td><td style="text-align:left">double[]</td><td style="text-align:left">“[D”</td></tr></tbody></table><p>在JNI动态注册中，需要使用正确的数据类型签名来声明本地方法。例如，如果你要注册一个返回<code>int</code>类型的本地方法，其数据类型签名应为<code>I</code>。</p><h2 id="4-ARM基础知识">4.ARM基础知识</h2><h3 id="常见寻址方式">常见寻址方式</h3><table><thead><tr><th style="text-align:left">寻址方式</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">立即数寻址</td><td style="text-align:left">直接使用立即数值作为操作数，例如：<code>MOV R0, #5</code></td></tr><tr><td style="text-align:left">寄存器直接寻址</td><td style="text-align:left">使用寄存器中的值作为操作数，例如：<code>MOV R0, R1</code></td></tr><tr><td style="text-align:left">寄存器间接寻址</td><td style="text-align:left">使用寄存器中的值作为内存地址，访问该地址中的数据，例如：<code>LDR R0, [R1]</code></td></tr><tr><td style="text-align:left">寄存器相对寻址</td><td style="text-align:left">使用寄存器中的值加上一个立即偏移量作为内存地址，例如：<code>LDR R0, [R1, #4]</code></td></tr><tr><td style="text-align:left">寄存器变址寻址</td><td style="text-align:left">使用两个寄存器中的值相加作为内存地址，例如：<code>LDR R0, [R1, R2]</code></td></tr><tr><td style="text-align:left">带有变址寄存器的寄存器相对寻址</td><td style="text-align:left">使用寄存器中的值加上另一个寄存器的值乘以一个比例因子作为内存地址，例如：<code>LDR R0, [R1, R2, LSL #2]</code></td></tr><tr><td style="text-align:left">堆栈寻址</td><td style="text-align:left">使用堆栈指针寄存器（如SP）进行操作，例如：<code>PUSH &#123;R0, R1&#125;</code> 或 <code>POP &#123;R0, R1&#125;</code></td></tr></tbody></table><h3 id="压栈和出栈指令">压栈和出栈指令</h3><table><thead><tr><th style="text-align:left">指令类型</th><th style="text-align:left">指令示例</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">压栈</td><td style="text-align:left"><code>PUSH &#123;R0, R1&#125;</code></td><td style="text-align:left">将寄存器R0和R1的内容压入堆栈中</td></tr><tr><td style="text-align:left">压栈</td><td style="text-align:left"><code>PUSH &#123;R0-R5&#125;</code></td><td style="text-align:left">将寄存器R0到R5的内容压入堆栈中</td></tr><tr><td style="text-align:left">压栈</td><td style="text-align:left"><code>STMDB SP!, &#123;R0-R5&#125;</code></td><td style="text-align:left">将寄存器R0到R5的内容压入堆栈中（与PUSH等效）</td></tr><tr><td style="text-align:left">出栈</td><td style="text-align:left"><code>POP &#123;R0, R1&#125;</code></td><td style="text-align:left">从堆栈中弹出数据，恢复到寄存器R0和R1中</td></tr><tr><td style="text-align:left">出栈</td><td style="text-align:left"><code>POP &#123;R0-R5&#125;</code></td><td style="text-align:left">从堆栈中弹出数据，恢复到寄存器R0到R5中</td></tr></tbody></table><h3 id="跳转指令">跳转指令</h3><table><thead><tr><th style="text-align:left">指令类型</th><th style="text-align:left">指令示例</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">无条件跳转</td><td style="text-align:left"><code>B label</code></td><td style="text-align:left">无条件跳转到标签<code>label</code>指向的位置</td></tr><tr><td style="text-align:left">子程序调用</td><td style="text-align:left"><code>BL label</code></td><td style="text-align:left">调用子程序，将当前指令的下一条指令地址存入链接寄存器（LR），然后跳转到标签<code>label</code>指向的位置</td></tr><tr><td style="text-align:left">子程序返回</td><td style="text-align:left"><code>BX LR</code></td><td style="text-align:left">返回子程序调用前的位置，跳转到链接寄存器（LR）中存储的地址</td></tr><tr><td style="text-align:left">寄存器跳转</td><td style="text-align:left"><code>BX Rn</code></td><td style="text-align:left">跳转到寄存器Rn中存储的地址</td></tr></tbody></table><h3 id="算术运算指令">算术运算指令</h3><p>汇编中也可以进行算术运算， 比如加减乘除，常用的运算指令用法如表 所示：</p><table><thead><tr><th style="text-align:left">指令</th><th style="text-align:left">计算公式</th><th style="text-align:left">备注</th></tr></thead><tbody><tr><td style="text-align:left">ADD Rd, Rn, Rm</td><td style="text-align:left">Rd = Rn + Rm</td><td style="text-align:left">加法运算，指令为 ADD</td></tr><tr><td style="text-align:left">ADD Rd, Rn, #immed</td><td style="text-align:left">Rd = Rn + #immed</td><td style="text-align:left">加法运算，指令为 ADD</td></tr><tr><td style="text-align:left">ADC Rd, Rn, Rm</td><td style="text-align:left">Rd = Rn + Rm + 进位</td><td style="text-align:left">带进位的加法运算，指令为 ADC</td></tr><tr><td style="text-align:left">ADC Rd, Rn, #immed</td><td style="text-align:left">Rd = Rn + #immed + 进位</td><td style="text-align:left">带进位的加法运算，指令为 ADC</td></tr><tr><td style="text-align:left">SUB Rd, Rn, Rm</td><td style="text-align:left">Rd = Rn - Rm</td><td style="text-align:left">减法</td></tr><tr><td style="text-align:left">SUB Rd, #immed</td><td style="text-align:left">Rd = Rd - #immed</td><td style="text-align:left">减法</td></tr><tr><td style="text-align:left">SUB Rd, Rn, #immed</td><td style="text-align:left">Rd = Rn - #immed</td><td style="text-align:left">减法</td></tr><tr><td style="text-align:left">SBC Rd, Rn, #immed</td><td style="text-align:left">Rd = Rn - #immed - 借位</td><td style="text-align:left">带借位的减法</td></tr><tr><td style="text-align:left">SBC Rd, Rn ,Rm</td><td style="text-align:left">Rd = Rn - Rm - 借位</td><td style="text-align:left">带借位的减法</td></tr><tr><td style="text-align:left">MUL Rd, Rn, Rm</td><td style="text-align:left">Rd = Rn * Rm</td><td style="text-align:left">乘法 (32 位)</td></tr><tr><td style="text-align:left">UDIV Rd, Rn, Rm</td><td style="text-align:left">Rd = Rn / Rm</td><td style="text-align:left">无符号除法</td></tr><tr><td style="text-align:left">SDIV Rd, Rn, Rm</td><td style="text-align:left">Rd = Rn / Rm</td><td style="text-align:left">有符号除法</td></tr></tbody></table><h3 id="逻辑运算">逻辑运算</h3><p>汇编语言的时候也可以使用逻辑运算指令，常用的运算指令用法如表 所示：<br><img src="http://pic.rmb.bdstatic.com/bjh/35d0832fb2523805c2a2165ec5458caa.png" alt="img"></p><p>相关博客：</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;学习记录：《安卓逆向这档事》十&lt;/h1&gt;
&lt;h2 id=&quot;1-ELF文件格式&quot;&gt;1. ELF文件格式&lt;/h2&gt;
&lt;p&gt;ELF（Executable and Linkable Format）是一种可执行和可链接的文件格式，是linux底下二进制文件，可以理解为windows</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://www.zafkiel3.com/posts/0.html"/>
    <id>https://www.zafkiel3.com/posts/0.html</id>
    <published>2024-06-02T08:29:03.231Z</published>
    <updated>2024-06-02T14:48:36.147Z</updated>
    
    <content type="html"><![CDATA[<h1>unicorn模拟执行初探</h1><p>参考博客：</p><p>[[翻译]Unicorn引擎教程]: <a href="https://bbs.kanxue.com/thread-224330.htm#msg_header_h3_2">https://bbs.kanxue.com/thread-224330.htm#msg_header_h3_2</a><br>[unicorn模拟执行初探]: <a href="https://eps1l0h.github.io/2023/01/18/unicorn%E5%88%9D%E6%8E%A2/">https://eps1l0h.github.io/2023/01/18/unicorn初探/</a><br>[[Android 原创] 汇编与反汇编神器Unicorn]: <a href="https://www.52pojie.cn/thread-1026209-1-1.html">https://www.52pojie.cn/thread-1026209-1-1.html</a></p><h3 id="什么是unicorn？">什么是unicorn？</h3><p>Unicorn是一个轻量级，多平台，多架构的CPU模拟器框架，基于qemu开发，它可以代替CPU模拟代码的执行，就比如说我们需要调试某个程序，常见的调试器需要配置可执行文件需要的环境并且还需要考虑一些恶意代码导致的安全问题，但是通过unicorn我们就可以单纯的模拟代码的执行（甚至可以指定从某个地址开始执行）而不需要考虑这些问题。</p><p>Unicorn的优点（也是基于qemu而开发的）：</p><ul><li>支持多种架构: Arm, Arm64 (Armv8), M68K, Mips, Sparc, &amp; X86 (include X86_64).</li><li>Unicorn 为多种语言提供编程接口比如C/C++、Python、Java 等语言。Unicorn的DLL 可以被更多的语言调用，比如易语言、Delphi，前途无量。</li><li>对Windows和<em>nix系统(已确认包含Mac OSX, Linux,</em> BSD &amp; Solaris)的原生支持</li><li>具有平台独立且简洁易于使用的API</li><li>使用JIT编译技术, 性能表现优异</li></ul><h5 id="快速入门：">快速入门：</h5><h3 id="虚拟内存">虚拟内存</h3><p>Unicorn 采用虚拟内存机制，使得虚拟CPU的内存与真实CPU的内存隔离。Unicorn 使用如下API来操作内存:</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">uc<span class="emphasis">_mem_map</span></span><br><span class="line"><span class="emphasis">uc_mem_read</span></span><br><span class="line"><span class="emphasis">uc_mem_</span>write</span><br></pre></td></tr></table></figure><p>这三个 API 都与内存操作有关：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">uc_mem_map</span>：这个 API 用于映射内存。当你需要在 Unicorn 中模拟一个程序时，可以使用 uc_mem_map 将一块内存映射到指定的地址。注意，这里的地址和大小都需要与 <span class="number">0</span>x1000 对齐，也就是 <span class="number">0</span>x1000 的整数倍。如果不满足对齐要求，会报 UC_ERR_ARG 异常<span class="number">123</span>。</span><br><span class="line"><span class="attribute">uc_mem_read</span>：这个 API 用于从模拟器内存中读取数据。可以指定地址和大小，然后 Unicorn 将返回相应的内存内容。</span><br><span class="line"><span class="attribute">uc_mem_write</span>：这个 API 用于向模拟器内存中写入数据。同样需要指定地址、大小和要写入的值。</span><br></pre></td></tr></table></figure><h3 id="Hook-机制">Hook 机制</h3><p>Unicorn的Hook机制为编程控制虚拟CPU提供了便利。<br>Unicorn 支持多种不同类型的Hook。<br>大致可以分为(hook_add第一参数，Unicorn常量)：</p><h3 id="指令执行类">指令执行类</h3><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">UC<span class="emphasis">_HOOK_INTR</span></span><br><span class="line"><span class="emphasis">UC_HOOK_INSN</span></span><br><span class="line"><span class="emphasis">UC_HOOK_CODE</span></span><br><span class="line"><span class="emphasis">UC_HOOK_</span>BLOCK</span><br></pre></td></tr></table></figure><p>这几个 API 都与 Unicorn 模拟器中的钩子（hook）有关：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">UC_HOOK_INTR：这个 API 用于钩住特定的指令，但只支持非常少的指令。具体来说，它用于在模拟执行过程中拦截某个特定的指令。这个功能在调试和分析代码时非常有用。</span><br><span class="line">UC_HOOK_INSN：这个 API 用于钩住一段代码范围内的指令。可以指定一个代码块，然后 Unicorn 将在执行这段代码时触发钩子。这对于跟踪代码执行流程、分析控制流等非常有帮助。</span><br><span class="line">UC_HOOK_CODE：这个 API 用于钩住基本块（<span class="keyword">basic </span><span class="keyword">block）。基本块是一组连续的指令，通常是一个基本的控制流单元。当 </span>Unicorn 模拟执行到一个基本块时，可以使用这个钩子来执行自定义的操作。</span><br><span class="line">UC_HOOK_BLOCK：这个 API 用于在未映射内存上进行内存读取的钩子。当模拟执行到一个未映射的内存地址时，可以使用这个钩子来处理内存读取操作。</span><br></pre></td></tr></table></figure><h3 id="内存访问类">内存访问类</h3><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">UC<span class="emphasis">_HOOK_MEM_READ</span></span><br><span class="line"><span class="emphasis">UC_HOOK_MEM_WRITE</span></span><br><span class="line"><span class="emphasis">UC_HOOK_MEM_FETCH</span></span><br><span class="line"><span class="emphasis">UC_HOOK_MEM_READ_AFTER</span></span><br><span class="line"><span class="emphasis">UC_HOOK_MEM_PROT</span></span><br><span class="line"><span class="emphasis">UC_HOOK_MEM_FETCH_INVALID</span></span><br><span class="line"><span class="emphasis">UC_HOOK_MEM_INVALID</span></span><br><span class="line"><span class="emphasis">UC_HOOK_MEM_</span>VALID</span><br></pre></td></tr></table></figure><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">UC<span class="emphasis">_HOOK_MEM_READ：这个 API 用于在模拟器执行期间钩住内存读取操作。当模拟执行到读取内存的指令时，可以使用这个钩子来执行自定义的操作。这对于跟踪内存访问、分析代码执行流程等非常有帮助。</span></span><br><span class="line"><span class="emphasis">UC_HOOK_MEM_WRITE：这个 API 用于在模拟器执行期间钩住内存写入操作。类似于 UC_HOOK_MEM_READ，可以在写入内存时触发这个钩子，以执行自定义的操作。</span></span><br><span class="line"><span class="emphasis">UC_HOOK_MEM_FETCH：这个 API 用于在模拟器执行期间钩住内存取指令（fetch）。当模拟执行到取指令的操作时，可以使用这个钩子来处理。</span></span><br><span class="line"><span class="emphasis">UC_HOOK_MEM_READ_AFTER：这个 API 用于在成功读取内存后触发钩子。与 UC_HOOK_MEM_READ 不同，这个钩子只在成功读取内存后执行。</span></span><br><span class="line"><span class="emphasis">UC_HOOK_MEM_PROT：这个 API 用于在模拟器执行期间钩住内存保护（protection）操作。当内存保护状态发生变化时，可以使用这个钩子来处理。</span></span><br><span class="line"><span class="emphasis">UC_HOOK_MEM_FETCH_INVALID：这个 API 用于在模拟器执行期间钩住无效的内存取指令。当模拟执行到无效的内存地址时，可以使用这个钩子来处理。</span></span><br><span class="line"><span class="emphasis">UC_HOOK_MEM_INVALID：这个 API 用于在模拟器执行期间钩住无效的内存访问操作。类似于 UC_HOOK_MEM_FETCH_INVALID，可以在无效的内存访问时触发这个钩子。</span></span><br><span class="line"><span class="emphasis">UC_HOOK_MEM_</span>VALID：这个 API 用于在模拟器执行期间钩住有效的内存访问操作。当模拟执行到有效的内存地址时，可以使用这个钩子来处理。</span><br></pre></td></tr></table></figure><h3 id="异常处理类">异常处理类</h3><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UC<span class="emphasis">_HOOK_MEM_READ_UNMAPPED</span></span><br><span class="line"><span class="emphasis">UC_HOOK_MEM_WRITE_UNMAPPED</span></span><br><span class="line"><span class="emphasis">UC_HOOK_MEM_FETCH_</span>UNMAPPED</span><br></pre></td></tr></table></figure><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UC<span class="emphasis">_HOOK_MEM_READ_UNMAPPED：这个 API 用于在模拟器执行期间钩住对未映射内存的读取操作。当模拟执行到一个未映射的内存地址时，可以使用这个钩子来处理内存读取操作。例如，如果程序试图读取一个未映射的内存地址，可以在这里添加自定义的逻辑。</span></span><br><span class="line"><span class="emphasis">UC_HOOK_MEM_WRITE_UNMAPPED：类似于 UC_HOOK_MEM_READ_UNMAPPED，这个 API 用于在模拟器执行期间钩住对未映射内存的写入操作。当程序试图向未映射的内存地址写入数据时，可以使用这个钩子来执行自定义的操作。</span></span><br><span class="line"><span class="emphasis">UC_HOOK_MEM_FETCH_</span>UNMAPPED：这个 API 用于在模拟器执行期间钩住对未映射内存的取指令（fetch）。当模拟执行到一个未映射的内存地址时，可以使用这个钩子来处理取指令操作。</span><br></pre></td></tr></table></figure><p>注意：调用hook_add函数可添加一个Hook。Unicorn的Hook是链式的，而不是传统Hook的覆盖式，也就是说，可以同时添加多个同类型的Hook，Unicorn会依次调用每一个handler。hook callback 是有作用范围的（见hook_add begin参数）。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;unicorn模拟执行初探&lt;/h1&gt;
&lt;p&gt;参考博客：&lt;/p&gt;
&lt;p&gt;[[翻译]Unicorn引擎教程]: &lt;a href=&quot;https://bbs.kanxue.com/thread-224330.htm#msg_header_h3_2&quot;&gt;https://bbs.kan</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>羊城杯 Ez加密器</title>
    <link href="https://www.zafkiel3.com/posts/e4f75f16.html"/>
    <id>https://www.zafkiel3.com/posts/e4f75f16.html</id>
    <published>2024-05-31T09:41:09.616Z</published>
    <updated>2024-05-31T10:00:48.110Z</updated>
    
    <content type="html"><![CDATA[<h3 id="羊城杯-Ez加密器">羊城杯 Ez加密器</h3><h4 id="第一部分">第一部分</h4><p>通过查找字符串找到主函数：</p><p><img src="https://www.zafkielpic.cc/img/p29.png" alt=""></p><p>看到这里有四个函数，我们一一分析，第一个函数没有看出有什么的特别，我们看第二个：第二个信息量就很大了，首先可以看到两个提示输入，那么下面的两个应该是接受输入的的函数了。</p><p><img src="https://www.zafkielpic.cc/img/p30.png" alt=""></p><p>这里sub_140003A20这个函数看的不是很懂，先放一下，后面的sub_140003910这个函数和前面的sub_140003A20函数结构很像，我们动态调试一下这两个函数，动态调试时发现fun1（sub_140003A20）这个函数是验证我们的验证码是否正确，同时这里的fun1他限制了验证码是6位的数字，点进fun1里的a1可以发现：</p><p><img src="https://www.zafkielpic.cc/img/p31.png" alt=""></p><p>这里也可以看到这里的两个数据的长度分别是6和40，a000000存储着我们的验证码，那么上面就存储着我们的flag，调试看看：</p><p><img src="https://www.zafkielpic.cc/img/p36.png" alt=""></p><p>猜测正确。其实这里也可以把fun1的前半段代码复制下来爆破出验证码的长度，因为fun1中只有len（a1）为6时才能让v3</p><p>为1</p><p><img src="https://www.zafkielpic.cc/img/p32.png" alt=""></p><p>后半部分的代码时验证输入的是不是字符串，同样可以爆破，动态调试试，当然也可以GPT（大人，时代变了@w@）</p><h4 id="第二部分">第二部分</h4><p>分析完第二个函数，我们看看后面两个：第三个是base64变表加密，第四个是一个DES加密可以用IDA的Signsrch插件查出。</p><p>最后的比较部分如果我们直接看Str1：</p><p><img src="https://www.zafkielpic.cc/img/p33.png" alt=""></p><p>如果直接那这里的data去逆向，就会出错，这里的几个‘’&gt;‘和”?“字符串很可疑，所以我们在动态调试一下看看这里的data是不是被改变了：</p><p><img src="https://www.zafkielpic.cc/img/p34.png" alt=""></p><p>果然，是被更改了，这里我们可以查找这个字符串的引用找到加密的部分：</p><p><img src="https://www.zafkielpic.cc/img/p35.png" alt=""></p><p>其实这里就在DES加密的函数里面。</p><h4 id="第三部分">第三部分</h4><p>信息基本齐全了，EXP：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyDes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">data = <span class="string">&quot;0723105D5C12217DCDC3601F5ECB54DA9CCEC2279F1684A13A0D716D17217F4C9EA85FF1A42795731CA3C55D3A4D7BEA&quot;</span></span><br><span class="line"><span class="comment">#用于将一个十六进制表示的字符串转换为字节串</span></span><br><span class="line">encrypt_data = <span class="built_in">bytes</span>.fromhex(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_DES</span>(<span class="params">key , encrypt_data</span>):</span><br><span class="line">    cipher = DES.new(key,DES.MODE_ECB)</span><br><span class="line">    decrypt_data = cipher.decrypt(encrypt_data)</span><br><span class="line">    <span class="keyword">return</span> decrypt_data</span><br><span class="line"></span><br><span class="line">str1 = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ+/&quot;</span></span><br><span class="line">str2 = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#string = str.maketrans(str1,str2) </span></span><br><span class="line">string = <span class="built_in">str</span>.maketrans(str2,str1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000000</span>):</span><br><span class="line">    key = base64.b64encode(<span class="built_in">str</span>(i).rjust(<span class="number">6</span>,<span class="string">&quot;0&quot;</span>).encode()).decode().translate(string).encode()</span><br><span class="line">    decrypt_data =  decrypt_DES(key,encrypt_data)</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">b&#x27;DASCTF&#123;&#x27;</span> <span class="keyword">in</span> decrypt_data):</span><br><span class="line">        <span class="built_in">print</span>(decrypt_data)</span><br><span class="line">        exit()</span><br><span class="line">        </span><br><span class="line"><span class="comment">#DASCTF&#123;f771b96b71514bb6bc20f3275fa9404e&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">练一下题</summary>
    
    
    
    
    <category term="wp" scheme="https://www.zafkiel3.com/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>初步认识手脱upx壳</title>
    <link href="https://www.zafkiel3.com/posts/fddc0df9.html"/>
    <id>https://www.zafkiel3.com/posts/fddc0df9.html</id>
    <published>2024-05-31T09:41:09.614Z</published>
    <updated>2024-05-31T09:50:58.468Z</updated>
    
    <content type="html"><![CDATA[<h1>逆向学习笔记</h1><h2 id="手脱upx壳">手脱upx壳</h2><p>工具准备：xdbg32，ExeinfoPE</p><p>前言：因为我们在CTF中经常会遇见upx壳，在有些题中我们无法直接通过工具进行脱壳，这时我们就需要进行手脱upx壳来进行逆向分析了。</p><p>以BUUCTF中新年快乐.exe为例(本题可以直接upx -d进行脱壳)进行说明：</p><p>首先我们ExeinfoPE看一下exe的基本信息：</p><p><img src="https://www.zafkielpic.cc/img/p1.png" alt=""></p><p>发现是32位的upx壳，我们将它用xdbg32打开：</p><p><img src="https://www.zafkielpic.cc/img/p2.png" alt=""></p><p>F9运行到入口(可以设置入口断点方便一点:在xdbg上方”选项“中选择”选项“，里面就有入口断点的设置)：</p><p><img src="https://www.zafkielpic.cc/img/p3.png" alt=""></p><h4 id="第一步"><strong>第一步</strong></h4><p>首先要找到OEP去壳后的程序起点。这里常用的有三个方法：</p><p><strong>一：我们可以看有大跳转的地方：</strong></p><p><img src="https://www.zafkielpic.cc/img/p4.png" alt=""></p><p>我们直接看E9跳转的地址就是我们要找的OEP了，不过这个方式很多壳我们是没有办法找到的。</p><p><strong>二：根据ESP定律设置硬件断点</strong>(ESP定律：是计算机用语，意思是<strong>向堆栈中压入下一行程序的地址</strong>，其实就是会出现很多pushad)：</p><p>我们在这里设置一个断点，再F9运行就会程序断在恢复原状态的popad位置，之后我们运行过去，就可以找到OEP。</p><p><strong>三：通过内存断点找到OEP。</strong><br>内存断点是通过修改页的属性来将程序断下来。这种方法由于你修改了页的属性在壳运行的时候你会收到很多异常。需要通过调试越过这些异常最后到达OEP。</p><h4 id="第二步：dump数据"><strong>第二步：dump数据</strong></h4><p>原因：因为程序在计算机中运行时，在内存、CPU、I/O等设备上的数据都是动态的（或者说是易失的），也就是说数据使用完或者发生异常就会丢掉。如果我想得到某些时刻的数据（有可能是调试程序Bug或者收集某些信息），就要把他转储（dump）为静态（如文件）的形式。否则，这些数据你永远都拿不到。</p><p>我们可以利用xdbg自己的插件scylla来dump数据：</p><p><img src="https://www.zafkielpic.cc/img/p5.png" alt=""></p><p><img src="https://www.zafkielpic.cc/img/p6.png" alt=""></p><p>但是dump下来的程序我们是无法正常打开的，因为我们没有修改IAT表，IAT表类似linux中的PLT表。windows的PE加载器运用动态链接的方式，将dll中的API位置填补到正确位置。然后脱壳后的程序并不是正常打开，这就导致了IAT未被正确填补需要手动或者利用工具填补IAT表。</p><h4 id="第三步：用scylla将IAT表补完。"><strong>第三步：用scylla将IAT表补完。</strong></h4><p>我们依次点击 IAT Autosearch, Get Imports 找到并获取导入表 右下角 Dump -&gt; Fix Dump(注意最后Fix Dump要选中之前dump出的程序。)</p><p><img src="https://www.zafkielpic.cc/img/p7.png" alt=""></p><p><img src="https://www.zafkielpic.cc/img/p8.png" alt=""></p><p>此时便脱壳完成了，操作还是比较简单的，难点在于一些题中OEP藏的很深，还需要不断的练习才能更加准确，快速的找到OEP。</p>]]></content>
    
    
    <summary type="html">upx壳</summary>
    
    
    
    
    <category term="学习知识" scheme="https://www.zafkiel3.com/tags/%E5%AD%A6%E4%B9%A0%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>春秋杯2023冬 复现</title>
    <link href="https://www.zafkiel3.com/posts/4720f3f3.html"/>
    <id>https://www.zafkiel3.com/posts/4720f3f3.html</id>
    <published>2024-05-31T09:41:09.612Z</published>
    <updated>2024-05-31T10:00:12.850Z</updated>
    
    <content type="html"><![CDATA[<h1>春秋杯2023冬 复现</h1><h3 id="upx2023">upx2023</h3><p>首先发现无法直接upx -d的命令脱壳，再仔细看，发现是修改了upx的特征码，将UPX0等改为了upx0导致命令脱壳失败，所以我们首先要在010中将特征码修改回来(UPX的特征码是55 50 58），都修改后就可以直接upx -d脱壳了，然后我们拖进IDA分析:</p><p>发现是一个rand—seed的一个形式，还有一个change函数但是代码有点复杂，看不太懂，所以我们动态调试看一下，放一个测试字符串康康：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">flag</span>&#123;<span class="number">0123456789</span>ABCDEFGHIJKLMNOPQRSTUVWXYZ&#125;</span><br></pre></td></tr></table></figure><p>得到：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">f</span>&#123;<span class="number">37</span>BFJNRVZlg02468ACEGIKMOQSUWY&#125;a159DHLPTX</span><br></pre></td></tr></table></figure><p>发现change函数大概只是将flag的顺序换了一下，没有修改值，所以关键就来到如何找到seed，然后逆向异或出顺序换了的flag，所以我们直接爆破seed，来找到时间戳：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> seed, i, key, r;</span><br><span class="line"><span class="keyword">for</span>(seed = <span class="number">1672473600</span>;seed &lt; <span class="number">1704009600</span>; seed++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">srand</span>(seed);</span><br><span class="line">r = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; <span class="number">33</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">key = <span class="built_in">rand</span>() % <span class="number">255</span>;</span><br><span class="line"><span class="keyword">switch</span> (i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line"><span class="keyword">if</span> (key != (<span class="string">&#x27;f&#x27;</span> ^ <span class="number">0x09</span>))</span><br><span class="line">&#123;</span><br><span class="line">r = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line"><span class="keyword">if</span> (key != (<span class="string">&#x27;l&#x27;</span> ^ <span class="number">0xC6</span>))</span><br><span class="line">&#123;</span><br><span class="line">r = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">32</span>:</span><br><span class="line"><span class="keyword">if</span> (key != (<span class="string">&#x27;a&#x27;</span> ^ <span class="number">0xFA</span>))</span><br><span class="line">&#123;</span><br><span class="line">r = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line"><span class="keyword">if</span> (key != (<span class="string">&#x27;g&#x27;</span> ^ <span class="number">0x65</span>))</span><br><span class="line">&#123;</span><br><span class="line">r = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="keyword">if</span> (key != (<span class="string">&#x27;&#123;&#x27;</span> ^ <span class="number">0x63</span>))</span><br><span class="line">&#123;</span><br><span class="line">r = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (r == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (r == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%u\n&quot;</span>, seed); <span class="comment">// seed = 1682145110</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> data[] = &#123; <span class="number">0x09</span>, <span class="number">0x63</span>, <span class="number">0xD9</span>, <span class="number">0xF6</span>, <span class="number">0x58</span>, <span class="number">0xDD</span>, <span class="number">0x3F</span>, <span class="number">0x4C</span>, <span class="number">0x0F</span>, <span class="number">0x0B</span>, <span class="number">0x98</span>, <span class="number">0xC6</span>, <span class="number">0x65</span>, <span class="number">0x21</span>, <span class="number">0x41</span>, <span class="number">0xED</span>, <span class="number">0xC4</span>, <span class="number">0x0B</span>, <span class="number">0x3A</span>, <span class="number">0x7B</span>, <span class="number">0xE5</span>, <span class="number">0x75</span>, <span class="number">0x5D</span>, <span class="number">0xA9</span>, <span class="number">0x31</span>, <span class="number">0x41</span>, <span class="number">0xD7</span>, <span class="number">0x52</span>, <span class="number">0x6C</span>, <span class="number">0x0A</span>, <span class="number">0xFA</span>, <span class="number">0xFD</span>, <span class="number">0xFA</span>, <span class="number">0x84</span>, <span class="number">0xDB</span>, <span class="number">0x89</span>, <span class="number">0xCD</span>, <span class="number">0x7E</span>, <span class="number">0x27</span>, <span class="number">0x85</span>, <span class="number">0x13</span>, <span class="number">0x08</span> &#125;;</span><br><span class="line"><span class="built_in">srand</span>(seed);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">42</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, ((<span class="built_in">rand</span>() % <span class="number">255</span>) ^ data[i]) &amp; <span class="number">0xff</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>爆破出的结果：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">seed</span> = <span class="number">1682145110</span></span><br><span class="line"><span class="attribute">f</span>&#123;<span class="number">52</span>bgb-<span class="number">281</span>lg00ff-<span class="number">46</span>f7-ca009c8e&#125;a381-b7191</span><br></pre></td></tr></table></figure><p>那么我们找到了顺序调换后的flag，再在python中用字符串索引得到真正的flag：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">example1 = &#x27;flag&#123;<span class="number">0123456789</span>ABCDEFGHIJKLMNOPQRSTUVWXYZ&#125;&#x27;</span><br><span class="line">example2 = &#x27;f&#123;37BFJNRVZlg<span class="number">0246</span>8ACEGIKMOQSUWY&#125;a159DHLPTX&#x27;</span><br><span class="line">flag1 = &#x27;f&#123;52bgb-281lg00ff-46f7-ca009c8e&#125;a381-b<span class="number">7191</span>&#x27;</span><br><span class="line"></span><br><span class="line">for i in example1:</span><br><span class="line">    print(flag1[example2.index(i)],end = <span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p>flag：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;<span class="number">0305f8f2</span>-<span class="number">14b6</span>-fg7b-bc7a-<span class="number">010299c881e1</span>&#125;</span><br></pre></td></tr></table></figure><p>总结：这个题当时是因为没有注意到upx的特征码被修改，所以去手脱upx，dump数据后发现出错了，思路被打乱了没有解出来，不过这个题也告诉了我upx加密特征码修改这个知识点，最后的脚本部分还是比较清晰的。</p>]]></content>
    
    
    <summary type="html">wp</summary>
    
    
    
    
    <category term="wp" scheme="https://www.zafkiel3.com/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>SICTF r3 closeme</title>
    <link href="https://www.zafkiel3.com/posts/4eb7d7e.html"/>
    <id>https://www.zafkiel3.com/posts/4eb7d7e.html</id>
    <published>2024-05-31T09:41:09.610Z</published>
    <updated>2024-05-31T09:59:48.963Z</updated>
    
    <content type="html"><![CDATA[<h4 id="第一部分">第一部分</h4><p>打开题目，先找main函数，点进第一个函数中（此时只有几十行代码）发现有不少地方爆红（看网上一些大佬的wp没有讲到这一个，应该是简单没有提），在爆红的地方按TAB进入反汇编窗口，用d + c小连招解决爆红，然后发现代码有400行（QAQ），那只能慢慢分析了。</p><h4 id="第二部分">第二部分</h4><p>发现下面的代码，在大约360行附近的if ( v45 == “combase.dll” )语句处有一个突兀的异或，分析一下发现这是一个hint，解出来：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">data = [<span class="number">0x23</span>, <span class="number">0x11</span>, <span class="number">0x0D</span>, <span class="number">0x1B</span>, <span class="number">0x13</span>, <span class="number">0x4B</span>, <span class="number">0x18</span>, <span class="number">0x04</span>, <span class="number">0x03</span>, <span class="number">0x0A</span>, <span class="number">0x50</span>, <span class="number">0x08</span>, <span class="number">0x1D</span>, <span class="number">0x06</span>, <span class="number">0x54</span>, <span class="number">0x16</span>, <span class="number">0x1A</span>, <span class="number">0x18</span>, <span class="number">0x0B</span>, <span class="number">0x1C</span>, <span class="number">0x5A</span>, <span class="number">0x0F</span>, <span class="number">0x14</span>, <span class="number">0x18</span>, <span class="number">0x5E</span>, <span class="number">0x12</span>, <span class="number">0xE5</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0xE3</span>, <span class="number">0xE0</span>, <span class="number">0xE4</span>, <span class="number">0xE8</span>, <span class="number">0xF0</span>, <span class="number">0xA9</span>, <span class="number">0xE8</span>, <span class="number">0xF2</span>, <span class="number">0xAC</span>, <span class="number">0xEE</span>, <span class="number">0xE2</span>, <span class="number">0xE6</span>, <span class="number">0xF3</span>, <span class="number">0xFA</span>, <span class="number">0xB2</span>, <span class="number">0xF3</span>, <span class="number">0xCD</span>, <span class="number">0xF0</span>, <span class="number">0xE5</span>, <span class="number">0xF7</span>, <span class="number">0xB8</span>, <span class="number">0xF6</span>, <span class="number">0xE8</span>, <span class="number">0xBB</span>, <span class="number">0xFC</span>, <span class="number">0xD3</span>, <span class="number">0xF1</span>, <span class="number">0xFF</span>, <span class="number">0x8C</span>, <span class="number">0x81</span>, <span class="number">0xCB</span>, <span class="number">0xD7</span>, <span class="number">0x84</span>, <span class="number">0xD2</span>, <span class="number">0xCF</span>, <span class="number">0xCB</span>, <span class="number">0xC4</span>, <span class="number">0x89</span>, <span class="number">0xC8</span>, <span class="number">0xCE</span>, <span class="number">0x8C</span>, <span class="number">0xDE</span>, <span class="number">0xDA</span>, <span class="number">0xC0</span>, <span class="number">0xC2</span>, <span class="number">0xD4</span>, <span class="number">0xD6</span>, <span class="number">0x9D</span>, <span class="number">0x94</span>, <span class="number">0xFF</span>, <span class="number">0xC3</span>, <span class="number">0xC4</span>, <span class="number">0xCC</span>, <span class="number">0x99</span>, <span class="number">0xD9</span>, <span class="number">0xD3</span>, <span class="number">0xD3</span>, <span class="number">0xD2</span>, <span class="number">0xCD</span>, <span class="number">0xDA</span>, <span class="number">0xE0</span>, <span class="number">0x98</span>, <span class="number">0xA7</span>, <span class="number">0xB0</span>, <span class="number">0xEB</span>, <span class="number">0x8B</span>, <span class="number">0xA9</span>, <span class="number">0xEF</span>, <span class="number">0xF9</span>, <span class="number">0xE6</span>, <span class="number">0xFA</span>, <span class="number">0xE2</span>, <span class="number">0xEC</span>, <span class="number">0xA4</span>, <span class="number">0xA0</span>, <span class="number">0xEF</span>, <span class="number">0xB1</span>, <span class="number">0xF1</span>, <span class="number">0xB1</span>, <span class="number">0xB6</span>, <span class="number">0xA6</span>, <span class="number">0xA1</span>, <span class="number">0xB7</span>, <span class="number">0xBE</span>, <span class="number">0xB6</span>, <span class="number">0xF9</span>, <span class="number">0xB5</span>, <span class="number">0xA9</span>, <span class="number">0xB8</span>, <span class="number">0xB8</span>, <span class="number">0xAC</span>, <span class="number">0xFF</span>, <span class="number">0x97</span>, <span class="number">0x89</span>, <span class="number">0x8B</span>, <span class="number">0x80</span>, <span class="number">0x8C</span>, <span class="number">0xC5</span>, <span class="number">0x8F</span>, <span class="number">0x94</span>, <span class="number">0xC8</span>, <span class="number">0x9D</span>, <span class="number">0x82</span>, <span class="number">0x8E</span>, <span class="number">0xCC</span>, <span class="number">0x8B</span>, <span class="number">0x82</span>, <span class="number">0x8E</span>, <span class="number">0x97</span>, <span class="number">0xDD</span>, <span class="number">0xD2</span>, <span class="number">0x80</span>, <span class="number">0x81</span>, <span class="number">0x96</span>, <span class="number">0x9E</span>, <span class="number">0xD7</span>, <span class="number">0x99</span>, <span class="number">0x8A</span>, <span class="number">0xDA</span>, <span class="number">0xCB</span>, <span class="number">0xCD</span>, <span class="number">0xCD</span>, <span class="number">0xCE</span>, <span class="number">0xCE</span>, <span class="number">0x31</span>, <span class="number">0x31</span>, <span class="number">0x32</span>, <span class="number">0x2D</span>, <span class="number">0x24</span>, <span class="number">0x55</span>, <span class="number">0x6A</span>, <span class="number">0x62</span>, <span class="number">0x69</span>, <span class="number">0x7A</span>, <span class="number">0x6F</span>, <span class="number">0x2B</span>, <span class="number">0x7F</span>, <span class="number">0x78</span>, <span class="number">0x6C</span>, <span class="number">0x62</span>, <span class="number">0x79</span>, <span class="number">0x65</span>, <span class="number">0x32</span>, <span class="number">0x75</span>, <span class="number">0x78</span>, <span class="number">0x74</span>, <span class="number">0x71</span>, <span class="number">0x37</span>, <span class="number">0x6F</span>, <span class="number">0x71</span>, <span class="number">0x73</span>, <span class="number">0x78</span>, <span class="number">0x74</span>, <span class="number">0x3D</span>, <span class="number">0x6A</span>, <span class="number">0x77</span>, <span class="number">0x45</span>, <span class="number">0x01</span>, <span class="number">0x44</span>, <span class="number">0x4C</span>, <span class="number">0x56</span>, <span class="number">0x48</span>, <span class="number">0x47</span>, <span class="number">0x53</span>, <span class="number">0x08</span>, <span class="number">0x45</span>, <span class="number">0x43</span>, <span class="number">0x40</span>, <span class="number">0x49</span>, <span class="number">0x0D</span>, <span class="number">0x4E</span>, <span class="number">0x7C</span>, <span class="number">0x79</span>, <span class="number">0x72</span>, <span class="number">0x66</span>, <span class="number">0x75</span>, <span class="number">0x4F</span>, <span class="number">0x05</span>, <span class="number">0x07</span>, <span class="number">0x07</span>, <span class="number">0x08</span>, <span class="number">0x08</span>, <span class="number">0x0B</span>, <span class="number">0x0B</span>, <span class="number">0x0C</span>, <span class="number">0x40</span>, <span class="number">0x5E</span>]</span><br><span class="line">hint = <span class="string">&quot;&quot;</span></span><br><span class="line">for i <span class="keyword">in</span> range(len(data)):</span><br><span class="line">    hint += <span class="string">&quot;&quot;</span>.join(chr(data[i] ^ (i + <span class="number">102</span>) &amp; <span class="number">0xff</span>)) #注意<span class="number">0xff</span>防止溢出导致ascll码转化出奇奇怪怪的东西</span><br><span class="line">print(hint)</span><br><span class="line"></span><br><span class="line">#Every time you close the messagebox by click <span class="string">`Yes`</span> <span class="keyword">or</span> <span class="string">`No`</span>, it will be stored. Just choose Yes/No(<span class="number">1</span>/<span class="number">0</span>) <span class="keyword">in</span> a certain order which is the flag, such as <span class="number">01001100</span>. Please submit flag which the format like <span class="string">`SICTF&#123;01001100&#125;`</span></span><br></pre></td></tr></table></figure><p>根据提示我们发现，这是一个根据我们点击是或否来进行加密的，结合hint我们再分析一下代码，在180行代码附近有两个if的嵌套判断，查官网MessageBoxw函数的介绍，我们知道它的返回值6和7是点击是和点击否，所以我们可以判断出我们点击是时为1，点击否时为0，且我们需要点击16次是/否，大致如下。</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">v23 = MessageBoxW(0i64, p10, lpCaption[1], 4u);</span><br><span class="line">   <span class="built_in"> if </span>( lpCaption[0] )</span><br><span class="line">      sub_7FF66EE838E0(p11, 2 * (__int64)lpCaption[0], 2i64);</span><br><span class="line">   <span class="built_in"> if </span>( v73 )</span><br><span class="line">      sub_7FF66EE838E0((__int64)p10, 2 * v73, 2i64);</span><br><span class="line">    v24 = 1;</span><br><span class="line">   <span class="built_in"> if </span>( v23 != 6 )   / 点击否 </span><br><span class="line">    &#123;</span><br><span class="line">     <span class="built_in"> if </span>( v23 != 7 )  /点击是</span><br><span class="line">      &#123;</span><br><span class="line">        v66 = (const WCHAR *)&amp;off_7FF66EEA2B98;</span><br><span class="line">        v67 = 1i64;</span><br><span class="line">        Size = (size_t)&amp;off_7FF66EEA2888;</span><br><span class="line">        v69 = 0i64;</span><br><span class="line">        sub_7FF66EEA14A0((__int64)&amp;v66, (__int64)&amp;off_7FF66EEA2BA8);</span><br><span class="line">      &#125;</span><br><span class="line">      v24 = 0;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="第三部分">第三部分</h4><p>在根据题目给我们动态调试的提示，我们开始通过动态调试来找到更多的线索。在205处下断点，我们可以调试发现（要点击完16下是否），196行代码处v63存储着我们输入的1/0记录（注意要按几下d键修正地址偏移）</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">if ( v64 == v62 )</span><br><span class="line">        &#123;</span><br><span class="line">          sub_7FF72F013820(&amp;v62);</span><br><span class="line">          v25 = v64;</span><br><span class="line">        &#125;</span><br><span class="line">        *(_BYTE *)(v63 + v25) = v24;</span><br><span class="line">       <span class="built_in"> if </span>( ++v64 == 16 )</span><br><span class="line">          break;</span><br></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">debug050</span>:<span class="number">000002</span>EAF2CDD660 unk_2EAF2CDD660 db    <span class="number">1</span>                 ; DATA XREF: Stack[<span class="number">0000058</span>C]:<span class="number">000000</span>FED7FEF988↑o</span><br><span class="line"><span class="attribute">debug050</span>:<span class="number">000002</span>EAF2CDD661 db    <span class="number">1</span></span><br><span class="line"><span class="attribute">debug050</span>:<span class="number">000002</span>EAF2CDD662 db    <span class="number">0</span></span><br><span class="line"><span class="attribute">debug050</span>:<span class="number">000002</span>EAF2CDD663 db    <span class="number">1</span></span><br><span class="line"><span class="attribute">debug050</span>:<span class="number">000002</span>EAF2CDD664 db    <span class="number">0</span></span><br><span class="line"><span class="attribute">debug050</span>:<span class="number">000002</span>EAF2CDD665 db    <span class="number">1</span></span><br><span class="line"><span class="attribute">debug050</span>:<span class="number">000002</span>EAF2CDD666 db    <span class="number">0</span></span><br><span class="line"><span class="attribute">debug050</span>:<span class="number">000002</span>EAF2CDD667 db    <span class="number">1</span></span><br><span class="line"><span class="attribute">debug050</span>:<span class="number">000002</span>EAF2CDD668 db    <span class="number">0</span></span><br><span class="line"><span class="attribute">debug050</span>:<span class="number">000002</span>EAF2CDD669 db    <span class="number">1</span></span><br><span class="line"><span class="attribute">debug050</span>:<span class="number">000002</span>EAF2CDD66A db    <span class="number">0</span></span><br><span class="line"><span class="attribute">debug050</span>:<span class="number">000002</span>EAF2CDD66B db    <span class="number">1</span></span><br><span class="line"><span class="attribute">debug050</span>:<span class="number">000002</span>EAF2CDD66C db    <span class="number">0</span></span><br><span class="line"><span class="attribute">debug050</span>:<span class="number">000002</span>EAF2CDD66D db    <span class="number">1</span></span><br><span class="line"><span class="attribute">debug050</span>:<span class="number">000002</span>EAF2CDD66E db    <span class="number">0</span></span><br><span class="line"><span class="attribute">debug050</span>:<span class="number">000002</span>EAF2CDD66F db    <span class="number">1</span></span><br></pre></td></tr></table></figure><p>我们再在269行代码处下断点，可以明显发现LABEL_4下的十几行代码都是记录我们输入1/0的顺序，并将它们存放在p0~p15中，这里我们可以发现p0最先被输入却在个位，而p15最后被输入却在最高位，所以我们可以发现这里将我们的输入的1/0顺序给倒序了一下（重点）。</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">result</span> = <span class="built_in">p0</span></span><br><span class="line">         + <span class="number">10</span></span><br><span class="line">         * (<span class="built_in">p1</span></span><br><span class="line">          + <span class="number">10</span></span><br><span class="line">          * (<span class="built_in">p2</span></span><br><span class="line">           + <span class="number">10</span></span><br><span class="line">           * (<span class="built_in">p3</span></span><br><span class="line">            + <span class="number">10</span></span><br><span class="line">            * (<span class="built_in">p4</span></span><br><span class="line">             + <span class="number">10</span></span><br><span class="line">             * (<span class="built_in">p5</span></span><br><span class="line">              + <span class="number">10</span></span><br><span class="line">              * (<span class="built_in">p6</span></span><br><span class="line">               + <span class="number">10</span></span><br><span class="line">               * (<span class="built_in">p7</span></span><br><span class="line">                + <span class="number">10</span></span><br><span class="line">                * (<span class="built_in">p8</span> + <span class="number">10</span> * (<span class="built_in">p9</span> + <span class="number">10</span>i64 * (_QWORD)&amp;<span class="built_in">p10</span>[<span class="number">50000</span> * <span class="built_in">p15</span> + <span class="number">5000</span> * <span class="built_in">p14</span> + <span class="number">500</span> * <span class="built_in">p13</span> + <span class="number">50</span> * <span class="built_in">p12</span> + <span class="number">5</span> * <span class="built_in">p11</span>])))))))))<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>而且这里是在将我们输入的01转换成一个十进制的数。</p><h4 id="第四部分（个人能力问题，这部分猜的占比很大）">第四部分（个人能力问题，这部分猜的占比很大）</h4><p>在350行LABEL_3上面有一个if判断：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if ( (v44 &amp; 0xFFFF0000) != -1443823616 )</span><br><span class="line">  &#123;</span><br><span class="line">LABEL_3:</span><br><span class="line">    v64 = 0i64;</span><br><span class="line">   <span class="built_in"> goto </span><span class="class">LABEL_4;</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这里我们可以根据上面的p0~p15如果输入不正确就会跳转这里猜出这里应该是最终我们要比较的地方，</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">v44</span> = <span class="number">0</span>xA9F10000(-<span class="number">1443823616</span>)</span><br><span class="line"><span class="comment">#拿一下v44的值0xA9F1</span></span><br></pre></td></tr></table></figure><p>然后我们看一下v44的二进制形式</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">1010 </span><span class="number">1001</span> <span class="number">1111</span> <span class="number">0001</span></span><br></pre></td></tr></table></figure><p>然后我们就可以进行下一轮的调试（在上面哪个v44的if语句处下断点），输入：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">        <span class="string">输入</span>             <span class="string">v44</span>         <span class="string">二进制输出</span>   </span><br><span class="line"><span class="number">1111 </span><span class="number">1111 </span><span class="number">0000 </span><span class="number">0000</span> <span class="string">-&gt;</span> <span class="number">0xff00</span> <span class="string">-&gt;</span> <span class="number">0000 </span><span class="number">0000 </span><span class="number">1111 </span><span class="number">1111</span></span><br><span class="line"></span><br><span class="line"><span class="number">0000 </span><span class="number">0000 </span><span class="number">1111 </span><span class="number">1111</span> <span class="string">-&gt;</span> <span class="number">0x3FC0</span> <span class="string">-&gt;</span> <span class="number">0011 </span><span class="number">1111 </span><span class="number">1100 </span><span class="number">0000</span></span><br><span class="line"></span><br><span class="line"><span class="number">1010 </span><span class="number">1001 </span><span class="number">1111 </span><span class="number">0001</span> <span class="string">-&gt;</span> <span class="number">0x63E5</span> <span class="string">-&gt;</span> <span class="number">0110 </span><span class="number">0011 </span><span class="number">1110 </span><span class="number">0101</span></span><br><span class="line"></span><br><span class="line"><span class="number">1001 </span><span class="number">1001 </span><span class="number">1001 </span><span class="number">1001</span> <span class="string">-&gt;</span> <span class="number">0x6666</span> <span class="string">-&gt;</span> <span class="number">0110 </span><span class="number">0110 </span><span class="number">0110 </span><span class="number">0110</span></span><br><span class="line"></span><br><span class="line"><span class="number">1011 </span><span class="number">0011 </span><span class="number">1000 </span><span class="number">1010</span> <span class="string">-&gt;</span> <span class="number">0x3473</span> <span class="string">-&gt;</span> <span class="number">0011 </span><span class="number">0100 </span><span class="number">0111 </span><span class="number">0011</span></span><br></pre></td></tr></table></figure><p>然后我们开始找规律：看第一组数据，我们发现加密部分应该是有一个倒序（我们上面分析的哪个），看第二个像是倒序后将末尾两位移到最前面，即：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">        <span class="string">输入</span>                    <span class="string">倒序</span>                   <span class="string">移位</span></span><br><span class="line"><span class="number">0000 </span><span class="number">0000 </span><span class="number">1111 </span><span class="number">1111</span> <span class="string">-&gt;</span> <span class="number">1111 </span><span class="number">1111 </span><span class="number">0000 </span><span class="number">0000</span> <span class="string">-&gt;</span> <span class="number">0011 </span><span class="number">1111 </span><span class="number">1100 </span><span class="number">0000</span></span><br></pre></td></tr></table></figure><p>如果是这样那么我们第一个就不只是倒序应该是：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">1111</span> <span class="number">1111</span> <span class="number">0000</span> <span class="number">0000</span> -&gt;(<span class="number">0000</span> <span class="number">0000</span>) <span class="number">1111</span> <span class="number">1111</span> -&gt; (<span class="number">0000</span> <span class="number">0000</span>) <span class="number">1111</span> <span class="number">1111</span>(此时末尾的<span class="number">11</span>移到了最前面，但是先移位了，在补零)</span><br></pre></td></tr></table></figure><p>我们可以在输入几个验证一下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">        <span class="string">输入</span>                    <span class="string">倒序</span>                   <span class="string">移位</span>   </span><br><span class="line"><span class="number">1010 </span><span class="number">1001 </span><span class="number">1111 </span><span class="number">0001</span> <span class="string">-&gt;</span> <span class="number">1000 </span><span class="number">1111 </span><span class="number">1001 </span><span class="number">0101</span> <span class="string">-&gt;</span> <span class="number">0110 </span><span class="number">0011 </span><span class="number">1110 </span><span class="number">0101</span></span><br><span class="line"></span><br><span class="line"><span class="number">1001 </span><span class="number">1001 </span><span class="number">1001 </span><span class="number">1001</span> <span class="string">-&gt;</span> <span class="number">1001 </span><span class="number">1001 </span><span class="number">1001 </span><span class="number">1001</span> <span class="string">-&gt;</span> <span class="number">0110 </span><span class="number">0110 </span><span class="number">0110 </span><span class="number">0110</span></span><br><span class="line"></span><br><span class="line"><span class="number">1011 </span><span class="number">0011 </span><span class="number">1000 </span><span class="number">1010</span> <span class="string">-&gt;</span> <span class="string">(0)101</span> <span class="number">0001 </span><span class="number">1100 </span><span class="number">1101</span> <span class="string">-&gt;</span> <span class="number">0110 </span><span class="number">1000 </span><span class="number">1110 </span><span class="number">011</span><span class="string">(此时位数不足16位，左边补零)</span> <span class="string">-&gt;</span></span><br><span class="line"><span class="number">0011 </span><span class="number">0100 </span><span class="number">0111 </span><span class="number">0011</span></span><br></pre></td></tr></table></figure><p>完美匹配，所以我们找到了加密的方法，就可以对v44逆向找出flag了：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">v44</span> = <span class="number">0</span>xA9F1 (<span class="number">1010</span> <span class="number">1001</span> <span class="number">1111</span> <span class="number">0001</span>)</span><br><span class="line"></span><br><span class="line">        <span class="attribute">v44</span>                    移位                   倒序</span><br><span class="line"><span class="attribute">1010</span> <span class="number">1001</span> <span class="number">1111</span> <span class="number">0001</span> -&gt; <span class="number">1010</span> <span class="number">0111</span> <span class="number">1100</span> <span class="number">0110</span> -&gt; <span class="number">0110</span> <span class="number">0011</span> <span class="number">1110</span> <span class="number">0101</span></span><br></pre></td></tr></table></figure><p>所以flag就是：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">SICTF</span>&#123;<span class="number">0110001111100101</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="第五部分（大佬的做法）">第五部分（大佬的做法）</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">imlzh1‘Blog： https:<span class="regexp">//im</span>lzh1.github.io<span class="regexp">/posts/</span>SICTF-Round-<span class="number">3</span>-WriteUps_by_AhiSec/</span><br></pre></td></tr></table></figure><p>直接读代码，写脚本（膜拜一下QWQ）</p>]]></content>
    
    
    <summary type="html">SICTF wp</summary>
    
    
    
    
    <category term="wp" scheme="https://www.zafkiel3.com/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>re基础知识（复习）</title>
    <link href="https://www.zafkiel3.com/posts/e7b8b312.html"/>
    <id>https://www.zafkiel3.com/posts/e7b8b312.html</id>
    <published>2024-05-31T09:41:09.607Z</published>
    <updated>2024-05-31T09:59:05.390Z</updated>
    
    <content type="html"><![CDATA[<h1>re基础知识（复习）</h1><h3 id="一-动态调试"><em>一  动态调试</em></h3><h6 id="1-exe与elf的区别">1.exe与elf的区别</h6><p>可执行文件指的是可以由操作系统进行加载执行的文件</p><p>可执行文件的文件格式常见有：exe 和 dll（Windows 系列）、elf（Linux 系列）</p><p>EXE（Executable）是Windows操作系统中的可执行文件格式，它是一种二进制格式，包含了程序的机器代码和相关的资源。EXE文件可以直接在Windows上运行，它通常以.exe作为文件扩展名。EXE文件可以包含多个可执行程序和库文件，它们可以通过链接器和加载器来进行连接和加载。</p><p>ELF（Executable and Linkable Format）是一种通用的可执行文件格式，主要用于UNIX和类UNIX操作系统，如Linux。ELF文件也是一种二进制格式，包含了程序的机器代码、数据和相关的元数据。ELF文件可以通过链接器和加载器来进行连接和加载，它支持动态链接和共享库的使用。</p><p>总的来说，EXE和ELF是不同操作系统中的可执行文件格式，它们在文件结构和使用方式上有一些区别。</p><p>文件结构上的区别：</p><ol><li>EXE文件通常包含一个程序的完整可执行代码，以及相关的资源和数据。它可以有多个节（section）来存储不同类型的数据。</li><li>ELF文件也包含程序的可执行代码，但它使用节（section）和段（segment）的概念来组织数据。节用于存储不同类型的数据，而段用于定义内存映射的相关信息。</li></ol><p>使用方式上的区别：</p><ol><li>EXE文件主要用于Windows操作系统，可以直接在Windows上运行。它可以通过Windows的API和资源管理器来访问和执行。</li><li>ELF文件主要用于UNIX和类UNIX操作系统，如Linux。它可以通过命令行或者调用系统调用来执行。ELF文件还支持动态链接和共享库的使用，可以在运行时加载和链接所需的库。</li></ol><p>此外，EXE和ELF还有一些其他细微的差异，比如文件头部的结构和字段的定义，以及特定操作系统的特定功能和限制。</p><h6 id="2-IDA中F7和F8区别">2.IDA中F7和F8区别</h6><table><thead><tr><th>F8</th><th>Step Over 表示跳到下一步</th></tr></thead><tbody><tr><td>F7</td><td>Step Into 表示进入到代码</td></tr></tbody></table><p>一句话：1、想要点进方法里面就按F7<br>2、想要跳转到下一行就按F8</p><h6 id="3-调试sub-elf">3.调试sub.elf</h6><p>首先将IDA的linux_server64放在虚拟机中，再在虚拟机命令行里用管理员（sudo linux_server64）打开，再在命令行运行要调试的sub.elf，在回主机打开IDA，在debugger里找到Attach，再找到remote linux debugger，输入虚拟机的ip（用ifconfig -a命令查找），确认完毕后，即可对sub.elf进行调试（包括F2下断点，F7和F8的步入和步过）</p><p>注：如果要调试安卓的文件等，要先运行android_x64_server等文件（注意版本问题），其他步骤类似同上。</p><h3 id="二-位运算"><em>二. 位运算</em></h3><h5 id="1-位运算概述">1.位运算概述</h5><p>从现代计算机中所有的数据二进制的形式存储在设备中。即 0、1 两种状态，计算机对二进制数据进行的运算(+、-、*、/)都是叫位运算，即将符号位共同参与运算的运算。</p><h5 id="2-位运算概览：">2.位运算概览：</h5><table><thead><tr><th style="text-align:left">符号</th><th style="text-align:left">描述</th><th style="text-align:left">运算规则</th></tr></thead><tbody><tr><td style="text-align:left">&amp;</td><td style="text-align:left">与</td><td style="text-align:left">两个位都为1时，结果才为1</td></tr><tr><td style="text-align:left">|</td><td style="text-align:left">或</td><td style="text-align:left">两个位都为0时，结果才为0</td></tr><tr><td style="text-align:left">^</td><td style="text-align:left">异或</td><td style="text-align:left">两个位相同为0，相异为1</td></tr><tr><td style="text-align:left">~</td><td style="text-align:left">取反</td><td style="text-align:left">0变1，1变0</td></tr><tr><td style="text-align:left">&lt;&lt;</td><td style="text-align:left">左移</td><td style="text-align:left">各二进位全部左移若干位，高位丢弃，低位补0</td></tr><tr><td style="text-align:left">&gt;&gt;</td><td style="text-align:left">右移</td><td style="text-align:left">各二进位全部右移若干位，对无符号数，高位补0，有符号数，各编译器处理方法不一样，有的补符号位（算术右移），有的补0（逻辑右移）</td></tr></tbody></table><p>注意：</p><p>逻辑运算符：位与（&amp;），位或（|)，位异或（^），位非（~）。</p><p>移位运算符：左移（&lt;&lt;），右移（&gt;&gt;），无符号右移（&gt;&gt;&gt;）。</p><h5 id="3-按位与运算符（-）：">3.按位与运算符（&amp;）：</h5><p><strong>定义</strong>：参加运算的两个数据，按二进制位进行&quot;与&quot;运算。</p><p>运算规则：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">0</span>&amp;<span class="number">0</span>=<span class="number">0</span>  <span class="number">0</span>&amp;<span class="number">1</span>=<span class="number">0</span>  <span class="number">1</span>&amp;<span class="number">0</span>=<span class="number">0</span>  <span class="number">1</span>&amp;<span class="number">1</span>=<span class="number">1</span></span><br></pre></td></tr></table></figure><p>总结：两位同时为1，结果才为1，否则结果为0。</p><p>例如：3&amp;5 即 0000 0011&amp; 0000 0101 = 0000 0001，因此 3&amp;5 的值得1。</p><p>注意：负数按补码形式参加按位与运算。</p><h5 id="4-与运算的用途：">4.<strong>与运算的用途：</strong></h5><p>1）清零</p><p>如果想将一个单元清零，即使其全部二进制位为0，只要与一个各位都为零的数值相与，结果为零。</p><p>2）取一个数的指定位</p><p>比如取数 X=1010 1110 的低4位，只需要另找一个数Y，令Y的低4位为1，其余位为0，即Y=0000 1111，然后将X与Y进行按位与运算（X&amp;Y=0000 1110）即可得到X的指定位。</p><p>3）判断奇偶</p><p>只要根据最未位是0还是1来决定，为0就是偶数，为1就是奇数。因此可以用if ((a &amp; 1) == 0)代替if (a % 2 == 0)来判断a是不是偶数。</p><h5 id="5-按位或运算符（-）：">5.按位或运算符（|）：</h5><p>定义：参加运算的两个对象，按二进制位进行&quot;或&quot;运算。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">0</span>|<span class="number">0</span>=<span class="number">0</span>  <span class="number">0</span>|<span class="number">1</span>=<span class="number">1</span>  <span class="number">1</span>|<span class="number">0</span>=<span class="number">1</span>  <span class="number">1</span>|<span class="number">1</span>=<span class="number">1</span></span><br></pre></td></tr></table></figure><p>总结：参加运算的两个对象只要有一个为1，其值为1。</p><p>例如：3|5即 0000 0011| 0000 0101 = 0000 0111，因此，3|5的值得7。</p><p>注意：负数按补码形式参加按位或运算。</p><h5 id="6-或运算的用途：">6.或运算的用途：</h5><p>常用来对一个数据的某些位设置为1</p><p>比如将数 X=1010 1110 的低4位设置为1，只需要另找一个数Y，令Y的低4位为1，其余位为0，即Y=0000 1111，然后将X与Y进行按位或运算（X|Y=1010 1111）即可得到。</p><h5 id="7-异或运算符（-）：">7.异或运算符（^）：</h5><p>定义：参加运算的两个数据，按二进制位进行&quot;异或&quot;运算。</p><p>运算规则：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">0</span>^<span class="number">0</span>=<span class="number">0</span>  <span class="number">0</span>^<span class="number">1</span>=<span class="number">1</span>  <span class="number">1</span>^<span class="number">0</span>=<span class="number">1</span>  <span class="number">1</span>^<span class="number">1</span>=<span class="number">0</span></span><br></pre></td></tr></table></figure><p>总结：参加运算的两个对象，如果两个相应位相同为0，相异为1。</p><h5 id="8-异或运算的用途：">8.异或运算的用途：</h5><p>1）翻转指定位</p><p>比如将数 X=1010 1110 的低4位进行翻转，只需要另找一个数Y，令Y的低4位为1，其余位为0，即Y=0000 1111，然后将X与Y进行异或运算（X^Y=1010 0001）即可得到。</p><p>2）与0相异或值不变</p><p>例如：1010 1110 ^ 0000 0000 = 1010 1110</p><p>3）使一个数的最低位为零</p><p>使a的最低位为0，可以表示为：a &amp; ~1。~1的值为 1111 1111 1111 1110，再按&quot;与&quot;运算，最低位一定为0。因为&quot; ~&quot;运算符的优先级比算术运算符、关系运算符、逻辑运算符和其他运算符都高。</p><h5 id="9-异或的几条性质">9.异或的几条性质:</h5><ul><li>1、交换律</li><li>2、结合律 (a^b)^c == a^(b^c)</li><li>3、对于任何数x，都有 x^x=0，x^0=x</li><li>4、自反性: a^b^b=a^0=a;</li></ul><h5 id="10-取反运算符-：">10.取反运算符 (~)：</h5><p>定义：参加运算的一个数据，按二进制进行&quot;取反&quot;运算。</p><p>运算规则：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~<span class="attribute">1</span>=0</span><br><span class="line">~<span class="attribute">0</span>=1</span><br></pre></td></tr></table></figure><p>总结：对一个二进制数按位取反，即将0变1，1变0。</p><h5 id="11-左移运算符（-）：">11.左移运算符（&lt;&lt;）：</h5><p>定义：将一个运算对象的各二进制位全部左移若干位（左边的二进制位丢弃，右边补0）。</p><p>设 a=1010 1110，a = a&lt;&lt; 2 将a的二进制位左移2位、右补0，即得a=1011 1000。</p><p>若左移时舍弃的高位不包含1，则每左移一位，相当于该数乘以2。</p><h5 id="12-右移运算符（-）：">12.右移运算符（&gt;&gt;）：</h5><p>定义：将一个数的各二进制位全部右移若干位，正数左补0，负数左补1，右边丢弃。</p><p>例如：a=a&gt;&gt;2 将a的二进制位右移2位，在符号位左补0 或者 左补1得看被移数是正还是负。</p><p>操作数每右移一位，相当于该数除以2。</p><h3 id="三、寄存器，汇编">三、寄存器，汇编</h3><h6 id="一-通用寄存器"><em>一  通用寄存器</em></h6><p>通用寄存器是一种用于存储和操作数据的硬件组件【一个典型CPU一般由运算器，控制器，寄存器等器件组成】。它们是计算机体系结构中的一部分，用于临时存储和处理数据。通用寄存器通常具有固定的位数大小，在一台计算机中可能会有多个通用寄存器。（例如AX，BX，CX，DX四个寄存器通常存放一般性数据，因此被称为通用寄存器。）</p><p>通用寄存器的主要功能包括：</p><ol><li>存储数据：通用寄存器可以用来存储指令中的操作数、临时结果和其他需要在计算过程中保存的数据。</li><li>数据操作：通过通用寄存器，可以对存储在其中的数据执行各种数学和逻辑操作，如加法、减法、乘法、移位和逻辑运算等。</li><li>数据传输：通用寄存器可以用来传输数据，比如从内存中读取数据到寄存器，或将寄存器中的数据写回到内存中。</li></ol><p>通用寄存器在计算机体系结构中起着重要的作用，因为它们提供了一个快速访问和操作数据的方式。不同的体系结构可能会有不同数量和命名方式的通用寄存器。</p><h6 id="二-标志寄存器"><em>二  标志寄存器</em></h6><p>标志寄存器是计算机中的一种特殊寄存器，用于存储特定的标志位或状态信息。它通常用于记录程序运行过程中的条件和结果，以便进行条件分支、循环等控制操作。</p><p>常见的标志寄存器包括：</p><ol><li>零标志位（ZF）：用于表示运算结果是否为零。</li><li>进位标志位（CF）：用于表示无符号数运算过程中是否发生进位或借位。</li><li>溢出标志位（OF）：用于表示有符号数运算过程中是否发生溢出。</li><li>符号标志位（SF）：用于表示运算结果的符号。</li><li>奇偶标志位（PF）：用于表示运算结果中 1 的个数的奇偶性。</li></ol><h6 id="三-基础汇编指令"><em>三  基础汇编指令</em></h6><p>基础汇编指令是用于编写汇编语言程序的基本指令集。这些指令用于执行各种操作，例如数据传输、运算、控制流程等。下面是一些常见的基础汇编指令：</p><p>1.数据传送指令：</p><table><thead><tr><th>指令</th><th>名称</th><th>示例</th><th>备注</th></tr></thead><tbody><tr><td>MOV</td><td>传送指令</td><td>MOV dest, src</td><td>将数据从src移动到dest</td></tr><tr><td>PUSH</td><td>进栈指令</td><td>PUSH src</td><td>把源操作数src压入堆栈</td></tr><tr><td>POP</td><td>出栈指令</td><td>POP desc</td><td>从栈顶弹出字数据到dest</td></tr></tbody></table><p>相关补充：movb传送字节；movw传送字（2Byte）：movl传送双字；movq传送四字。</p><p>2.算术运算指令：</p><table><thead><tr><th>指令</th><th>名称</th><th>示例</th><th>备注</th></tr></thead><tbody><tr><td>ADD</td><td>加法指令</td><td>ADD dest, src</td><td>在dest基础上加src</td></tr><tr><td>SUB</td><td>减法指令</td><td>SUB dest, src</td><td>在dest基础上减src</td></tr></tbody></table><p>3.逻辑运算指令：</p><p>指令       名称              示例                          备注<br>NOT        取反运算指令NOT dest       把操作数dest按位取反<br>AND与运算指令    AND dest, src        把dest和src进行与运算之后送回dest<br>OR   或运算指令   OR dest, src   把dest和src进行或运算之后送回dest<br>XOR 异或运算       XOR dest, src把dest和src进行异或运算之后送回dest</p><p>4.转移指令：</p><p>指令         名称              示例                         备注<br>JMP无条件转移指令JMP lable   无条件地转移到标号为label的位置<br>CALL      过程调用指令    CALL labal 直接调用label<br>JE    条件转移指令    JE lable      zf =1 时跳转到标号为label的位置<br>JNE 条件转移指令    JNE lable   zf=0 时跳转到标号为label的位置</p><p>5.其他：</p><p>RET指令则是将栈顶的返回地址弹出到EIP，然后按照EIP此时指示的指令地址继续执行程序。</p><p>JZ跳转 ZF=1，运算结果为0 跳转</p><p>JNZ跳转 ZF≠1，运算结果不为0时 跳转</p><h6 id="四-栈"><em>四  栈</em></h6><p>百度百科解释：栈（stack）又名堆栈，它是一种运算受限的线性表。限定仅在表尾进行插入和删除操作的线性表。这一端被称为栈顶，相对地，把另一端称为栈底。向一个栈插入新元素又称作进栈、入栈或压栈，它是把新元素放到栈顶元素的上面，使之成为新的栈顶元素；从一个栈删除元素又称作出栈或退栈，它是把栈顶元素删除掉，使其相邻的元素成为新的栈顶元素。</p><p>栈是一种数据结构，它按照后进先出（LIFO）的原则存储和访问数据。这意味着最后进入栈的元素首先被访问和移除。栈有两个主要操作：推入（push）将元素放入栈的顶部，弹出（pop）将顶部元素移除。</p><h6 id="五-内存分区"><em>五  内存分区</em></h6><p>在没有运行程序前，也就是说程序没有加载到内存前，可执行程序内部已经分好3段信息，分别为代码区（text）、数据区（data） 和 未初始化数据区（bss） 3 个部分（有人直接把data和bss合起来叫做静态区或全局区）</p><p>代码区</p><p>存放 CPU 执行的机器指令。</p><p>通常代码区是可共享的（即另外的执行程序可以调用它），使其可共享的目的是对于频繁被执行的程序，只需要在内存中有一份代码即可。代码区通常是只读的，使其只读的原因是防止程序意外地修改了它的指t令。另外，代码区还规划了局部变量的相关信息。</p><p>全局初始化数据区/静态数据区（data段）</p><p>该区包含了在程序中明确被初始化的全局变量、已经初始化的静态变量（包括全局静态变量和t）和常量数据（如字符串常量）。</p><p>未初始化数据区（又叫 bss 区）</p><p>存入的是全局未初始化变量和未初始化静态变量。未初始化数据区的数据在程序开始执行之前被内核初始化为 0 或者空（NULL）。</p><p>总体来讲说，程序源代码被编译之后主要分成两种段：程序指令(代码区)和程序数据（数据区）。代码段属于程序指令，而数据域段和.bss段属于程序数据。</p>]]></content>
    
    
    <summary type="html">重温一下基础</summary>
    
    
    
    
    <category term="wp" scheme="https://www.zafkiel3.com/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>NSSCTF vm_wo</title>
    <link href="https://www.zafkiel3.com/posts/62b163a0.html"/>
    <id>https://www.zafkiel3.com/posts/62b163a0.html</id>
    <published>2024-05-31T09:41:09.604Z</published>
    <updated>2024-05-31T09:57:57.424Z</updated>
    
    <content type="html"><![CDATA[<h2 id="NSSCTF-vm-wo">NSSCTF vm_wo</h2><h3 id="第一部分">第一部分</h3><p>无壳，mac，拖进IDA看看，有一个明显的比较，直接拿到flag最后比较的data</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data = [<span class="number">0xDF</span>, <span class="number">0xD5</span>, <span class="number">0xF1</span>, <span class="number">0xD1</span>, <span class="number">0xFF</span>, <span class="number">0xDB</span>, <span class="number">0xA1</span>, <span class="number">0xA5</span>, <span class="number">0x89</span>, <span class="number">0xBD</span>, <span class="number">0xE9</span>, <span class="number">0x95</span>, <span class="number">0xB3</span>, <span class="number">0x9D</span>, <span class="number">0xE9</span>, <span class="number">0xB3</span>, <span class="number">0x85</span>, <span class="number">0x99</span>, <span class="number">0x87</span>, <span class="number">0xBF</span>, <span class="number">0xE9</span>, <span class="number">0xB1</span>, <span class="number">0x89</span>, <span class="number">0xE9</span>, <span class="number">0x91</span>, <span class="number">0x89</span>, <span class="number">0x89</span>, <span class="number">0x8F</span>, <span class="number">0xAD</span>]</span><br></pre></td></tr></table></figure><h3 id="第二部分">第二部分</h3><p>接着点击myoperate函数看看，读代码发现，这直接告诉我们opcode了，即每一个8字节的十六进制拼接，注意要去掉最后一个因为他只是（v8 + 7）</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># hex_string = <span class="string">&quot;020D01011903001A&quot;</span></span><br><span class="line"></span><br><span class="line"># # 将十六进制字符串转换为字节列表</span><br><span class="line"># byte_list = [int(hex_string[i:i+<span class="number">2</span>], <span class="number">16</span>) for i <span class="keyword">in</span> range(<span class="number">0</span>, len(hex_string), <span class="number">2</span>)]</span><br><span class="line"></span><br><span class="line"># # 将字节列表逆序</span><br><span class="line"># byte_list.reverse()</span><br><span class="line"></span><br><span class="line"># print(byte_list)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">opcode = [<span class="number">26</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">25</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">13</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">24</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>,</span><br><span class="line"></span><br><span class="line">          <span class="number">26</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">25</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">24</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>,</span><br><span class="line"></span><br><span class="line">          <span class="number">26</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">25</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">13</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">24</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">5</span>,</span><br><span class="line">          </span><br><span class="line">          <span class="number">26</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">25</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">13</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">24</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">6</span></span><br><span class="line">          </span><br><span class="line">          ,<span class="number">255</span>] #<span class="number">255</span>是自己加的，目的是打断while循环</span><br></pre></td></tr></table></figure><p>注意IDA小端序存储，所以要倒序一下再拼接。</p><h3 id="第三部分">第三部分</h3><p>点击interpretBytecode函数看看模拟器长什么样，发现有很多模拟指令，但是我们看我们的opcode只有这几个模拟的命令：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">13</span> <span class="number">24</span> <span class="number">25</span> <span class="number">26</span> </span><br></pre></td></tr></table></figure><p>所以我们只用复现这几个命令即可</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">opcode = [<span class="number">26</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">25</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">13</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">24</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>,</span><br><span class="line"></span><br><span class="line">          <span class="number">26</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">25</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">24</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>,</span><br><span class="line"></span><br><span class="line">          <span class="number">26</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">25</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">13</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">24</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">5</span>,</span><br><span class="line">          </span><br><span class="line">          <span class="number">26</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">25</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">13</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">24</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">6</span></span><br><span class="line">          </span><br><span class="line">          ,<span class="number">255</span>]</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">swap</span>():</span><br><span class="line">    <span class="keyword">global</span> i,opcode</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span> swap r[<span class="subst">&#123;opcode[i + <span class="number">1</span>]&#125;</span>] r[<span class="subst">&#123;opcode[i + <span class="number">2</span>]&#125;</span>]&quot;</span>)</span><br><span class="line">    i += <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xor</span>():</span><br><span class="line">    <span class="keyword">global</span> i,opcode</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span> xor r[<span class="subst">&#123;opcode[i + <span class="number">1</span>]&#125;</span>] r[<span class="subst">&#123;opcode[i + <span class="number">2</span>]&#125;</span>]&quot;</span>)</span><br><span class="line">    i += <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add1</span>():</span><br><span class="line">    <span class="keyword">global</span> i,opcode</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span> add r[<span class="subst">&#123;opcode[i + <span class="number">1</span>]&#125;</span>] <span class="subst">&#123;opcode[i + <span class="number">2</span>]&#125;</span>&quot;</span>)</span><br><span class="line">    i += <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add2</span>():</span><br><span class="line">    <span class="keyword">global</span> i,opcode</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span> add r[<span class="subst">&#123;opcode[i + <span class="number">1</span>]&#125;</span>] r[<span class="subst">&#123;opcode[i + <span class="number">2</span>]&#125;</span>]&quot;</span>)</span><br><span class="line">    i += <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sub1</span>():</span><br><span class="line">    <span class="keyword">global</span> i,opcode</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span> sub r[<span class="subst">&#123;opcode[i + <span class="number">1</span>]&#125;</span>] <span class="subst">&#123;opcode[i + <span class="number">2</span>]&#125;</span>&quot;</span>)</span><br><span class="line">    i += <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sub2</span>():</span><br><span class="line">    <span class="keyword">global</span> i,opcode</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span> sub r[<span class="subst">&#123;opcode[i + <span class="number">1</span>]&#125;</span>] r[<span class="subst">&#123;opcode[i + <span class="number">2</span>]&#125;</span>]&quot;</span>)</span><br><span class="line">    i += <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mul1</span>():</span><br><span class="line">    <span class="keyword">global</span> i,opcode</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span> mul r[<span class="subst">&#123;opcode[i + <span class="number">1</span>]&#125;</span>] <span class="subst">&#123;opcode[i + <span class="number">2</span>]&#125;</span>&quot;</span>)</span><br><span class="line">    i += <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mul2</span>():</span><br><span class="line">    <span class="keyword">global</span> i,opcode</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span> mul r[<span class="subst">&#123;opcode[i + <span class="number">1</span>]&#125;</span>] r[<span class="subst">&#123;opcode[i + <span class="number">2</span>]&#125;</span>]&quot;</span>)</span><br><span class="line">    i += <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shl</span>():</span><br><span class="line">    <span class="keyword">global</span> i,opcode</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span> r[<span class="subst">&#123;opcode[i + <span class="number">1</span>]&#125;</span>] = r[0] &lt;&lt; <span class="subst">&#123;opcode[i + <span class="number">2</span>]&#125;</span> &quot;</span>)</span><br><span class="line">    i += <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun24</span>():</span><br><span class="line">    <span class="keyword">global</span> i,opcode</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span> r[0] = r[2] | r[1] &quot;</span>)</span><br><span class="line">    i += <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shr</span>():</span><br><span class="line">    <span class="keyword">global</span> i,opcode</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span> r[<span class="subst">&#123;opcode[i + <span class="number">1</span>]&#125;</span>] = r[0] &gt;&gt; <span class="subst">&#123;opcode[i + <span class="number">2</span>]&#125;</span>&quot;</span>)</span><br><span class="line">    i += <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun26</span>():</span><br><span class="line">    <span class="keyword">global</span> i,opcode</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span> r[<span class="subst">&#123;opcode[i + <span class="number">1</span>]&#125;</span>] = <span class="subst">&#123;opcode[i + <span class="number">2</span>]&#125;</span>&quot;</span>)</span><br><span class="line">    i += <span class="number">3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(opcode[i] != <span class="number">255</span>):</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(opcode[i] == <span class="number">0</span>):</span><br><span class="line">            swap()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(opcode[i] == <span class="number">1</span>):</span><br><span class="line">            xor()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(opcode[i] == <span class="number">2</span>):</span><br><span class="line">            add1()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(opcode[i] == <span class="number">3</span>):</span><br><span class="line">            add2()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(opcode[i] == <span class="number">4</span>):</span><br><span class="line">            sub1()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(opcode[i] == <span class="number">5</span>):</span><br><span class="line">            sub2()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(opcode[i] == <span class="number">6</span>):</span><br><span class="line">            mul1()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(opcode[i] == <span class="number">7</span>):</span><br><span class="line">            mul2()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(opcode[i] == <span class="number">13</span>):</span><br><span class="line">            shl()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(opcode[i]== <span class="number">24</span>):</span><br><span class="line">            fun24()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(opcode[i] == <span class="number">25</span>):</span><br><span class="line">            shr()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(opcode[i] == <span class="number">26</span>):</span><br><span class="line">            fun26()</span><br></pre></td></tr></table></figure><p>得到的汇编指令：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">0 </span>r[<span class="number">0</span>] = <span class="number">3</span></span><br><span class="line"><span class="symbol">3 </span>r[<span class="number">1</span>] = r[<span class="number">0</span>] &gt;&gt; <span class="number">1</span></span><br><span class="line"><span class="symbol">6 </span>r[<span class="number">2</span>] = r[<span class="number">0</span>] &lt;&lt; <span class="number">7</span> </span><br><span class="line"><span class="symbol">9 </span>r[<span class="number">0</span>] = r[<span class="number">2</span>] | r[<span class="number">1</span>] </span><br><span class="line"><span class="symbol">12 </span><span class="keyword">xor</span> r[<span class="number">0</span>] r[<span class="number">3</span>]</span><br><span class="line"><span class="symbol">15 </span>r[<span class="number">0</span>] = <span class="number">3</span></span><br><span class="line"><span class="symbol">18 </span>r[<span class="number">1</span>] = r[<span class="number">0</span>] &gt;&gt; <span class="number">2</span></span><br><span class="line"><span class="symbol">21 </span>r[<span class="number">2</span>] = r[<span class="number">0</span>] &lt;&lt; <span class="number">6</span> </span><br><span class="line"><span class="symbol">24 </span>r[<span class="number">0</span>] = r[<span class="number">2</span>] | r[<span class="number">1</span>] </span><br><span class="line"><span class="symbol">27 </span><span class="keyword">xor</span> r[<span class="number">0</span>] r[<span class="number">4</span>]</span><br><span class="line"><span class="symbol">30 </span>r[<span class="number">0</span>] = <span class="number">3</span></span><br><span class="line"><span class="symbol">33 </span>r[<span class="number">1</span>] = r[<span class="number">0</span>] &gt;&gt; <span class="number">3</span></span><br><span class="line"><span class="symbol">36 </span>r[<span class="number">2</span>] = r[<span class="number">0</span>] &lt;&lt; <span class="number">5</span> </span><br><span class="line"><span class="symbol">39 </span>r[<span class="number">0</span>] = r[<span class="number">2</span>] | r[<span class="number">1</span>] </span><br><span class="line"><span class="symbol">42 </span><span class="keyword">xor</span> r[<span class="number">0</span>] r[<span class="number">5</span>]</span><br><span class="line"><span class="symbol">45 </span>r[<span class="number">0</span>] = <span class="number">3</span></span><br><span class="line"><span class="symbol">48 </span>r[<span class="number">1</span>] = r[<span class="number">0</span>] &gt;&gt; <span class="number">4</span></span><br><span class="line"><span class="symbol">51 </span>r[<span class="number">2</span>] = r[<span class="number">0</span>] &lt;&lt; <span class="number">4</span> </span><br><span class="line"><span class="symbol">54 </span>r[<span class="number">0</span>] = r[<span class="number">2</span>] | r[<span class="number">1</span>] </span><br><span class="line"><span class="symbol">57 </span><span class="keyword">xor</span> r[<span class="number">0</span>] r[<span class="number">6</span>]</span><br></pre></td></tr></table></figure><p>这里r[0] = 3分析后3应该是我们输入的flag，这里有个重点：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">24</span>:</span><br><span class="line">          vm_body[<span class="number">0</span>] = byte_100008002 | byte_100008001;</span><br><span class="line">          <span class="keyword">goto</span> LABEL_35;</span><br></pre></td></tr></table></figure><p>case24时有两个奇怪的东西，看他们的地址：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">__bss</span>:<span class="number">0000000100008001</span> byte_100008001  % <span class="number">1</span>                     </span><br><span class="line"><span class="attribute">__bss</span>:<span class="number">0000000100008002</span> byte_100008002  % <span class="number">1</span>                     </span><br><span class="line"><span class="attribute">__bss</span>:<span class="number">0000000100008003</span> deadbeef        % <span class="number">4</span>                     </span><br><span class="line"><span class="attribute">__bss</span>:<span class="number">0000000100008003</span>                                         </span><br><span class="line"><span class="attribute">__bss</span>:<span class="number">0000000100008007</span>                 % <span class="number">1</span></span><br><span class="line"><span class="attribute">__bss</span>:<span class="number">0000000100008007</span> ; __bss         ends</span><br></pre></td></tr></table></figure><p>这里可以看出他们应该是同一个数组，且byte_100008001表示r[1]，byte_100008002表示r[2]，deadbeef = 0xBEEDBEEF;这个东西应该表示r[3]到r[6],这样和汇编出的r[]数组便对上了</p><p>使用我们可以开始写脚本了，exp：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">data = [<span class="number">0xDF</span>, <span class="number">0xD5</span>, <span class="number">0xF1</span>, <span class="number">0xD1</span>, <span class="number">0xFF</span>, <span class="number">0xDB</span>, <span class="number">0xA1</span>, <span class="number">0xA5</span>, <span class="number">0x89</span>, <span class="number">0xBD</span>, <span class="number">0xE9</span>, <span class="number">0x95</span>, <span class="number">0xB3</span>, <span class="number">0x9D</span>, <span class="number">0xE9</span>, <span class="number">0xB3</span>, <span class="number">0x85</span>, <span class="number">0x99</span>, <span class="number">0x87</span>, <span class="number">0xBF</span>, <span class="number">0xE9</span>, <span class="number">0xB1</span>, <span class="number">0x89</span>, <span class="number">0xE9</span>, <span class="number">0x91</span>, <span class="number">0x89</span>, <span class="number">0x89</span>, <span class="number">0x8F</span>, <span class="number">0xAD</span>]</span><br><span class="line">deadbeef = [<span class="number">0xEF</span>, <span class="number">0xBE</span>, <span class="number">0xED</span> ,<span class="number">0xBE</span>] #注意小端序倒序</span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line">for i <span class="keyword">in</span> data:</span><br><span class="line">    i = (i &gt;&gt; <span class="number">3</span> | i &lt;&lt; <span class="number">5</span>) &amp;  <span class="number">0xff</span></span><br><span class="line"></span><br><span class="line">    i = i ^ deadbeef[<span class="number">3</span>]</span><br><span class="line">    i = (i &gt;&gt; <span class="number">4</span> | i &lt;&lt; <span class="number">4</span>) &amp; <span class="number">0xff</span></span><br><span class="line"></span><br><span class="line">    i = i ^ deadbeef[<span class="number">2</span>]</span><br><span class="line">    i = (i &gt;&gt; <span class="number">5</span> | i &lt;&lt; <span class="number">3</span>) &amp; <span class="number">0xff</span></span><br><span class="line"></span><br><span class="line">    i = i ^ deadbeef[<span class="number">1</span>]</span><br><span class="line">    i = (i &gt;&gt; <span class="number">6</span> | i &lt;&lt; <span class="number">2</span>) &amp; <span class="number">0xff</span></span><br><span class="line"></span><br><span class="line">    i = i ^ deadbeef[<span class="number">0</span>]</span><br><span class="line">    i = (i &gt;&gt; <span class="number">7</span> | i &lt;&lt; <span class="number">1</span>) &amp; <span class="number">0xff</span></span><br><span class="line"></span><br><span class="line">    flag += <span class="string">&quot;&quot;</span>.join(chr(i))</span><br><span class="line"></span><br><span class="line">print(flag)</span><br><span class="line">#DASCTF&#123;you_are_right_so_cool&#125;</span><br></pre></td></tr></table></figure><p>当然也可以用爆破直接跟他爆了，这里附上好兄弟的本题爆破解法链接</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="regexp">//</span>www.pri87.vip<span class="regexp">/posts/</span>b22e135.html</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">VM题QAQ</summary>
    
    
    
    
    <category term="wp" scheme="https://www.zafkiel3.com/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>NKCTF RE</title>
    <link href="https://www.zafkiel3.com/posts/536ff434.html"/>
    <id>https://www.zafkiel3.com/posts/536ff434.html</id>
    <published>2024-05-31T09:41:09.602Z</published>
    <updated>2024-05-31T09:57:30.609Z</updated>
    
    <content type="html"><![CDATA[<h2 id="NKCTF-RE">NKCTF RE</h2><h3 id="Login-System">Login System</h3><h4 id="第一部分">第一部分</h4><p>先运行运行发现要先过一下username才能输入pass，ida看一下，可以发现是一个z3：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">from</span> z3 import *</span><br><span class="line"></span><br><span class="line"><span class="attribute">def</span> solve_sub_1229():</span><br><span class="line">    <span class="attribute">a1</span> =<span class="meta"> [Int(f&#x27;a1_&#123;i&#125;&#x27;) for i in range(16)]</span></span><br><span class="line">    <span class="attribute">s</span> = Solver()</span><br><span class="line"></span><br><span class="line">    <span class="attribute">s</span>.add(a1[<span class="number">2</span>] + a1[<span class="number">1</span>] + a1[<span class="number">0</span>] + a1[<span class="number">3</span>] == <span class="number">447</span>)</span><br><span class="line">    <span class="attribute">s</span>.add(<span class="number">101</span> * a1[<span class="number">2</span>] + a1[<span class="number">0</span>] + <span class="number">9</span> * a1[<span class="number">1</span>] + <span class="number">8</span> * a1[<span class="number">3</span>] == <span class="number">12265</span>)</span><br><span class="line">    <span class="attribute">s</span>.add(<span class="number">5</span> * a1[<span class="number">2</span>] + <span class="number">3</span> * a1[<span class="number">0</span>] + <span class="number">4</span> * a1[<span class="number">1</span>] + <span class="number">6</span> * a1[<span class="number">3</span>] == <span class="number">2000</span>)</span><br><span class="line">    <span class="attribute">s</span>.add(<span class="number">88</span> * a1[<span class="number">2</span>] + <span class="number">12</span> * a1[<span class="number">0</span>] + <span class="number">11</span> * a1[<span class="number">1</span>] + <span class="number">87</span> * a1[<span class="number">3</span>] == <span class="number">21475</span>)</span><br><span class="line">    <span class="attribute">s</span>.add(a1[<span class="number">6</span>] + <span class="number">59</span> * a1[<span class="number">5</span>] + <span class="number">100</span> * a1[<span class="number">4</span>] + a1[<span class="number">7</span>] == <span class="number">7896</span>)</span><br><span class="line">    <span class="attribute">s</span>.add(<span class="number">443</span> * a1[<span class="number">4</span>] + <span class="number">200</span> * a1[<span class="number">5</span>] + <span class="number">10</span> * a1[<span class="number">6</span>] + <span class="number">16</span> * a1[<span class="number">7</span>] == <span class="number">33774</span>)</span><br><span class="line">    <span class="attribute">s</span>.add(<span class="number">556</span> * a1[<span class="number">5</span>] + <span class="number">333</span> * a1[<span class="number">4</span>] + <span class="number">8</span> * a1[<span class="number">6</span>] + <span class="number">7</span> * a1[<span class="number">7</span>] == <span class="number">44758</span>)</span><br><span class="line">    <span class="attribute">s</span>.add(a1[<span class="number">6</span>] + a1[<span class="number">5</span>] + <span class="number">202</span> * a1[<span class="number">4</span>] + a1[<span class="number">7</span>] == <span class="number">9950</span>)</span><br><span class="line">    <span class="attribute">s</span>.add(<span class="number">78</span> * a1[<span class="number">10</span>] + <span class="number">35</span> * a1[<span class="number">9</span>] + <span class="number">23</span> * a1[<span class="number">8</span>] + <span class="number">89</span> * a1[<span class="number">11</span>] == <span class="number">24052</span>)</span><br><span class="line">    <span class="attribute">s</span>.add(<span class="number">78</span> * a1[<span class="number">8</span>] + <span class="number">59</span> * a1[<span class="number">9</span>] + <span class="number">15</span> * a1[<span class="number">10</span>] + <span class="number">91</span> * a1[<span class="number">11</span>] == <span class="number">25209</span>)</span><br><span class="line">    <span class="attribute">s</span>.add(<span class="number">111</span> * a1[<span class="number">10</span>] + <span class="number">654</span> * a1[<span class="number">9</span>] + <span class="number">123</span> * a1[<span class="number">8</span>] + <span class="number">222</span> * a1[<span class="number">11</span>] == <span class="number">113427</span>)</span><br><span class="line">    <span class="attribute">s</span>.add(<span class="number">6</span> * a1[<span class="number">9</span>] + <span class="number">72</span> * a1[<span class="number">8</span>] + <span class="number">5</span> * a1[<span class="number">10</span>] + <span class="number">444</span> * a1[<span class="number">11</span>] == <span class="number">54166</span>)</span><br><span class="line">    <span class="attribute">s</span>.add(<span class="number">56</span> * a1[<span class="number">14</span>] + <span class="number">35</span> * a1[<span class="number">12</span>] + <span class="number">6</span> * a1[<span class="number">13</span>] + <span class="number">121</span> * a1[<span class="number">15</span>] == <span class="number">11130</span>)</span><br><span class="line">    <span class="attribute">s</span>.add(<span class="number">169</span> * a1[<span class="number">14</span>] + <span class="number">158</span> * a1[<span class="number">13</span>] + <span class="number">98</span> * a1[<span class="number">12</span>] + <span class="number">124</span> * a1[<span class="number">15</span>] == <span class="number">27382</span>)</span><br><span class="line">    <span class="attribute">s</span>.add(<span class="number">147</span> * a1[<span class="number">13</span>] + <span class="number">65</span> * a1[<span class="number">12</span>] + <span class="number">131</span> * a1[<span class="number">14</span>] + <span class="number">129</span> * a1[<span class="number">15</span>] == <span class="number">23564</span>)</span><br><span class="line">    <span class="attribute">s</span>.add(<span class="number">137</span> * a1[<span class="number">14</span>] + <span class="number">132</span> * a1[<span class="number">13</span>] + <span class="number">620</span> * a1[<span class="number">12</span>] + <span class="number">135</span> * a1[<span class="number">15</span>] == <span class="number">51206</span>)</span><br><span class="line"></span><br><span class="line">    <span class="attribute">if</span> s.check() == sat:</span><br><span class="line">        <span class="attribute">m</span> = s.model()</span><br><span class="line">        <span class="attribute">return</span><span class="meta"> [m[a1[i]].as_long() for i in range(16)]</span></span><br><span class="line">    <span class="attribute">else</span>:</span><br><span class="line">        <span class="attribute">return</span> None</span><br><span class="line"></span><br><span class="line"><span class="attribute">data</span> = solve_sub_1229()</span><br><span class="line"><span class="attribute">print</span>(data) #[<span class="number">117</span>, <span class="number">115</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">48</span>, <span class="number">49</span>, <span class="number">95</span>, <span class="number">110</span>, <span class="number">107</span>, <span class="number">99</span>, <span class="number">116</span>, <span class="number">102</span>, <span class="number">50</span>, <span class="number">48</span>, <span class="number">50</span>, <span class="number">52</span>]</span><br><span class="line"></span><br><span class="line"><span class="attribute">data</span> =<span class="meta"> [117, 115, 101, 114, 48, 49, 95, 110, 107, 99, 116, 102, 50, 48, 50, 52]</span></span><br><span class="line"><span class="attribute">name</span> = &#x27;&#x27;</span><br><span class="line"><span class="attribute">for</span> i in range(len(data)):</span><br><span class="line">    <span class="attribute">name</span> += &#x27;&#x27;.join(chr(data[i]))</span><br><span class="line"><span class="attribute">print</span>(name) #user01_nkctf2024</span><br></pre></td></tr></table></figure><h4 id="第二部分">第二部分</h4><p>然后接着看一下代码，发现pass被分成两部分第一部分是0~8位，第二部分是10~25，第九位是&quot;_&quot;用来分开这两个部分</p><p>前面9位是一个简单的异或：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">key1 = [<span class="number">0x7E</span>, <span class="number">0x5A</span>, <span class="number">0x6E</span>, <span class="number">0x77</span>, <span class="number">0x3A</span>, <span class="number">0x79</span>, <span class="number">0x35</span>, <span class="number">0x76</span>, <span class="number">0x7C</span>]</span><br><span class="line">dest = [<span class="number">0</span>] * <span class="number">9</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">    dest[i] = (key1[i] - <span class="number">9</span> + i) ^ i</span><br><span class="line"><span class="built_in">print</span>(dest) <span class="comment">#[117, 83, 101, 114, 49, 112, 52, 115, 115]</span></span><br><span class="line"></span><br><span class="line">name = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(dest)):</span><br><span class="line">    name += <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(dest[i]))</span><br><span class="line"><span class="built_in">print</span>(name) <span class="comment">#uSer1p4ss</span></span><br></pre></td></tr></table></figure><p>后面的部分是一个AES加密不过是逆了S盒的，网上找一个大佬写的AES标准解密代码把逆S盒替换即可：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="type">uint32_t</span> eK[<span class="number">44</span>], dK[<span class="number">44</span>];    <span class="comment">// encKey, decKey</span></span><br><span class="line"><span class="type">int</span> Nr; <span class="comment">// 10 rounds</span></span><br><span class="line">&#125;AesKey;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BLOCKSIZE 16  <span class="comment">//AES-128分组长度为16字节</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// uint8_t y[4] -&gt; uint32_t x</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOAD32H(x, y) \</span></span><br><span class="line"><span class="meta">  do &#123; (x) = ((uint32_t)((y)[0] &amp; 0xff)&lt;&lt;24) | ((uint32_t)((y)[1] &amp; 0xff)&lt;&lt;16) | \</span></span><br><span class="line"><span class="meta">             ((uint32_t)((y)[2] &amp; 0xff)&lt;&lt;8)  | ((uint32_t)((y)[3] &amp; 0xff));&#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// uint32_t x -&gt; uint8_t y[4]</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STORE32H(x, y) \</span></span><br><span class="line"><span class="meta">  do &#123; (y)[0] = (uint8_t)(((x)&gt;&gt;24) &amp; 0xff); (y)[1] = (uint8_t)(((x)&gt;&gt;16) &amp; 0xff);   \</span></span><br><span class="line"><span class="meta">       (y)[2] = (uint8_t)(((x)&gt;&gt;8) &amp; 0xff); (y)[3] = (uint8_t)((x) &amp; 0xff); &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从uint32_t x中提取从低位开始的第n个字节</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BYTE(x, n) (((x) &gt;&gt; (8 * (n))) &amp; 0xff)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* used for keyExpansion */</span></span><br><span class="line"><span class="comment">// 字节替换然后循环左移1位</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MIX(x) (((S[BYTE(x, 2)] &lt;&lt; 24) &amp; 0xff000000) ^ ((S[BYTE(x, 1)] &lt;&lt; 16) &amp; 0xff0000) ^ \</span></span><br><span class="line"><span class="meta">                ((S[BYTE(x, 0)] &lt;&lt; 8) &amp; 0xff00) ^ (S[BYTE(x, 3)] &amp; 0xff))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// uint32_t x循环左移n位</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ROF32(x, n)  (((x) <span class="string">&lt;&lt; (n)) | ((x) &gt;</span>&gt; (32-(n))))</span></span><br><span class="line"><span class="comment">// uint32_t x循环右移n位</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ROR32(x, n)  (((x) &gt;&gt; (n)) | ((x) &lt;&lt; (32-(n))))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* for 128-bit blocks, Rijndael never uses more than 10 rcon values */</span></span><br><span class="line"><span class="comment">// AES-128轮常量</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">uint32_t</span> rcon[<span class="number">10</span>] = &#123;</span><br><span class="line"><span class="number">0x01000000</span>UL, <span class="number">0x02000000</span>UL, <span class="number">0x04000000</span>UL, <span class="number">0x08000000</span>UL, <span class="number">0x10000000</span>UL,</span><br><span class="line"><span class="number">0x20000000</span>UL, <span class="number">0x40000000</span>UL, <span class="number">0x80000000</span>UL, <span class="number">0x1B000000</span>UL, <span class="number">0x36000000</span>UL</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// S盒</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> S[<span class="number">256</span>] = &#123;</span><br><span class="line"><span class="number">0x31</span>, <span class="number">0x52</span>, <span class="number">0x5A</span>, <span class="number">0xC8</span>, <span class="number">0x0B</span>, <span class="number">0xAC</span>, <span class="number">0xF3</span>, <span class="number">0x3A</span>, <span class="number">0x8B</span>, <span class="number">0x54</span>, <span class="number">0x27</span>, <span class="number">0x9B</span>, <span class="number">0xAB</span>, <span class="number">0x95</span>, <span class="number">0xDE</span>, <span class="number">0x83</span>, <span class="number">0x60</span>, <span class="number">0xCB</span>, <span class="number">0x53</span>, <span class="number">0x7F</span>, <span class="number">0xC4</span>, <span class="number">0xE3</span>, <span class="number">0x0A</span>, <span class="number">0x97</span>, <span class="number">0xE0</span>, <span class="number">0x29</span>, <span class="number">0xD5</span>, <span class="number">0x68</span>, <span class="number">0xC5</span>, <span class="number">0xDF</span>, <span class="number">0xF4</span>, <span class="number">0x7B</span>, <span class="number">0xAA</span>, <span class="number">0xD6</span>, <span class="number">0x42</span>, <span class="number">0x78</span>, <span class="number">0x6C</span>, <span class="number">0xE9</span>, <span class="number">0x70</span>, <span class="number">0x17</span>, <span class="number">0xD7</span>, <span class="number">0x37</span>, <span class="number">0x24</span>, <span class="number">0x49</span>, <span class="number">0x75</span>, <span class="number">0xA9</span>, <span class="number">0x89</span>, <span class="number">0x67</span>, <span class="number">0x03</span>, <span class="number">0xFA</span>, <span class="number">0xD9</span>, <span class="number">0x91</span>, <span class="number">0xB4</span>, <span class="number">0x5B</span>, <span class="number">0xC2</span>, <span class="number">0x4E</span>, <span class="number">0x92</span>, <span class="number">0xFC</span>, <span class="number">0x46</span>, <span class="number">0xB1</span>, <span class="number">0x73</span>, <span class="number">0x08</span>, <span class="number">0xC7</span>, <span class="number">0x74</span>, <span class="number">0x09</span>, <span class="number">0xAF</span>, <span class="number">0xEC</span>, <span class="number">0xF5</span>, <span class="number">0x4D</span>, <span class="number">0x2D</span>, <span class="number">0xEA</span>, <span class="number">0xA5</span>, <span class="number">0xDA</span>, <span class="number">0xEF</span>, <span class="number">0xA6</span>, <span class="number">0x2B</span>, <span class="number">0x7E</span>, <span class="number">0x0C</span>, <span class="number">0x8F</span>, <span class="number">0xB0</span>, <span class="number">0x04</span>, <span class="number">0x06</span>, <span class="number">0x62</span>, <span class="number">0x84</span>, <span class="number">0x15</span>, <span class="number">0x8E</span>, <span class="number">0x12</span>, <span class="number">0x1D</span>, <span class="number">0x44</span>, <span class="number">0xC0</span>, <span class="number">0xE2</span>, <span class="number">0x38</span>, <span class="number">0xD4</span>, <span class="number">0x47</span>, <span class="number">0x28</span>, <span class="number">0x45</span>, <span class="number">0x6E</span>, <span class="number">0x9D</span>, <span class="number">0x63</span>, <span class="number">0xCF</span>, <span class="number">0xE6</span>, <span class="number">0x8C</span>, <span class="number">0x18</span>, <span class="number">0x82</span>, <span class="number">0x1B</span>, <span class="number">0x2C</span>, <span class="number">0xEE</span>, <span class="number">0x87</span>, <span class="number">0x94</span>, <span class="number">0x10</span>, <span class="number">0xC1</span>, <span class="number">0x20</span>, <span class="number">0x07</span>, <span class="number">0x4A</span>, <span class="number">0xA4</span>, <span class="number">0xEB</span>, <span class="number">0x77</span>, <span class="number">0xBC</span>, <span class="number">0xD3</span>, <span class="number">0xE1</span>, <span class="number">0x66</span>, <span class="number">0x2A</span>, <span class="number">0x6B</span>, <span class="number">0xE7</span>, <span class="number">0x79</span>, <span class="number">0xCC</span>, <span class="number">0x86</span>, <span class="number">0x16</span>, <span class="number">0xD0</span>, <span class="number">0xD1</span>, <span class="number">0x19</span>, <span class="number">0x55</span>, <span class="number">0x3C</span>, <span class="number">0x9F</span>, <span class="number">0xFB</span>, <span class="number">0x30</span>, <span class="number">0x98</span>, <span class="number">0xBD</span>, <span class="number">0xB8</span>, <span class="number">0xF1</span>, <span class="number">0x9E</span>, <span class="number">0x61</span>, <span class="number">0xCD</span>, <span class="number">0x90</span>, <span class="number">0xCE</span>, <span class="number">0x7C</span>, <span class="number">0x8D</span>, <span class="number">0x57</span>, <span class="number">0xAE</span>, <span class="number">0x6A</span>, <span class="number">0xB3</span>, <span class="number">0x3D</span>, <span class="number">0x76</span>, <span class="number">0xA7</span>, <span class="number">0x71</span>, <span class="number">0x88</span>, <span class="number">0xA2</span>, <span class="number">0xBA</span>, <span class="number">0x4F</span>, <span class="number">0x3E</span>, <span class="number">0x40</span>, <span class="number">0x64</span>, <span class="number">0x0F</span>, <span class="number">0x48</span>, <span class="number">0x21</span>, <span class="number">0x35</span>, <span class="number">0x36</span>, <span class="number">0x2F</span>, <span class="number">0xE8</span>, <span class="number">0x14</span>, <span class="number">0x5D</span>, <span class="number">0x51</span>, <span class="number">0xD8</span>, <span class="number">0xB5</span>, <span class="number">0xFE</span>, <span class="number">0xD2</span>, <span class="number">0x96</span>, <span class="number">0x93</span>, <span class="number">0xA1</span>, <span class="number">0xB6</span>, <span class="number">0x43</span>, <span class="number">0x0D</span>, <span class="number">0x4C</span>, <span class="number">0x80</span>, <span class="number">0xC9</span>, <span class="number">0xFF</span>, <span class="number">0xA3</span>, <span class="number">0xDD</span>, <span class="number">0x72</span>, <span class="number">0x05</span>, <span class="number">0x59</span>, <span class="number">0xBF</span>, <span class="number">0x0E</span>, <span class="number">0x26</span>, <span class="number">0x34</span>, <span class="number">0x1F</span>, <span class="number">0x13</span>, <span class="number">0xE5</span>, <span class="number">0xDC</span>, <span class="number">0xF2</span>, <span class="number">0xC6</span>, <span class="number">0x50</span>, <span class="number">0x1E</span>, <span class="number">0xE4</span>, <span class="number">0x85</span>, <span class="number">0xB7</span>, <span class="number">0x39</span>, <span class="number">0x8A</span>, <span class="number">0xCA</span>, <span class="number">0xED</span>, <span class="number">0x9C</span>, <span class="number">0xBB</span>, <span class="number">0x56</span>, <span class="number">0x23</span>, <span class="number">0x1A</span>, <span class="number">0xF0</span>, <span class="number">0x32</span>, <span class="number">0x58</span>, <span class="number">0xB2</span>, <span class="number">0x65</span>, <span class="number">0x33</span>, <span class="number">0x6F</span>, <span class="number">0x41</span>, <span class="number">0xBE</span>, <span class="number">0x3F</span>, <span class="number">0x6D</span>, <span class="number">0x11</span>, <span class="number">0x00</span>, <span class="number">0xAD</span>, <span class="number">0x5F</span>, <span class="number">0xC3</span>, <span class="number">0x81</span>, <span class="number">0x25</span>, <span class="number">0xA8</span>, <span class="number">0xA0</span>, <span class="number">0x9A</span>, <span class="number">0xF6</span>, <span class="number">0xF7</span>, <span class="number">0x5E</span>, <span class="number">0x99</span>, <span class="number">0x22</span>, <span class="number">0x2E</span>, <span class="number">0x4B</span>, <span class="number">0xF9</span>, <span class="number">0x3B</span>, <span class="number">0x02</span>, <span class="number">0x7A</span>, <span class="number">0xB9</span>, <span class="number">0x5C</span>, <span class="number">0x69</span>, <span class="number">0xF8</span>, <span class="number">0x1C</span>, <span class="number">0xDB</span>, <span class="number">0x01</span>, <span class="number">0x7D</span>, <span class="number">0xFD</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//逆S盒</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> inv_S[<span class="number">256</span>] = &#123;</span><br><span class="line"><span class="number">227</span>, <span class="number">253</span>, <span class="number">245</span>, <span class="number">48</span>, <span class="number">80</span>, <span class="number">189</span>, <span class="number">81</span>, <span class="number">112</span>, <span class="number">61</span>, <span class="number">64</span>, <span class="number">22</span>, <span class="number">4</span>, <span class="number">77</span>, <span class="number">181</span>, <span class="number">192</span>, <span class="number">162</span>, <span class="number">109</span>, <span class="number">226</span>, <span class="number">86</span>, <span class="number">196</span>, <span class="number">169</span>, <span class="number">84</span>, <span class="number">127</span>, <span class="number">39</span>, <span class="number">102</span>, <span class="number">130</span>, <span class="number">214</span>, <span class="number">104</span>, <span class="number">251</span>, <span class="number">87</span>, <span class="number">202</span>, <span class="number">195</span>, <span class="number">111</span>, <span class="number">164</span>, <span class="number">240</span>, <span class="number">213</span>, <span class="number">42</span>, <span class="number">232</span>, <span class="number">193</span>, <span class="number">10</span>, <span class="number">94</span>, <span class="number">25</span>, <span class="number">121</span>, <span class="number">75</span>, <span class="number">105</span>, <span class="number">69</span>, <span class="number">241</span>, <span class="number">167</span>, <span class="number">135</span>, <span class="number">0</span>, <span class="number">216</span>, <span class="number">220</span>, <span class="number">194</span>, <span class="number">165</span>, <span class="number">166</span>, <span class="number">41</span>, <span class="number">91</span>, <span class="number">206</span>, <span class="number">7</span>, <span class="number">244</span>, <span class="number">132</span>, <span class="number">151</span>, <span class="number">159</span>, <span class="number">224</span>, <span class="number">160</span>, <span class="number">222</span>, <span class="number">34</span>, <span class="number">180</span>, <span class="number">88</span>, <span class="number">95</span>, <span class="number">58</span>, <span class="number">93</span>, <span class="number">163</span>, <span class="number">43</span>, <span class="number">113</span>, <span class="number">242</span>, <span class="number">182</span>, <span class="number">68</span>, <span class="number">55</span>, <span class="number">158</span>, <span class="number">201</span>, <span class="number">171</span>, <span class="number">1</span>, <span class="number">18</span>, <span class="number">9</span>, <span class="number">131</span>, <span class="number">212</span>, <span class="number">147</span>, <span class="number">217</span>, <span class="number">190</span>, <span class="number">2</span>, <span class="number">53</span>, <span class="number">248</span>, <span class="number">170</span>, <span class="number">238</span>, <span class="number">229</span>, <span class="number">16</span>, <span class="number">141</span>, <span class="number">82</span>, <span class="number">98</span>, <span class="number">161</span>, <span class="number">219</span>, <span class="number">120</span>, <span class="number">47</span>, <span class="number">27</span>, <span class="number">249</span>, <span class="number">149</span>, <span class="number">122</span>, <span class="number">36</span>, <span class="number">225</span>, <span class="number">96</span>, <span class="number">221</span>, <span class="number">38</span>, <span class="number">154</span>, <span class="number">188</span>, <span class="number">60</span>, <span class="number">63</span>, <span class="number">44</span>, <span class="number">152</span>, <span class="number">116</span>, <span class="number">35</span>, <span class="number">124</span>, <span class="number">246</span>, <span class="number">31</span>, <span class="number">145</span>, <span class="number">254</span>, <span class="number">76</span>, <span class="number">19</span>, <span class="number">183</span>, <span class="number">231</span>, <span class="number">103</span>, <span class="number">15</span>, <span class="number">83</span>, <span class="number">204</span>, <span class="number">126</span>, <span class="number">107</span>, <span class="number">155</span>, <span class="number">46</span>, <span class="number">207</span>, <span class="number">8</span>, <span class="number">101</span>, <span class="number">146</span>, <span class="number">85</span>, <span class="number">78</span>, <span class="number">143</span>, <span class="number">51</span>, <span class="number">56</span>, <span class="number">177</span>, <span class="number">108</span>, <span class="number">13</span>, <span class="number">176</span>, <span class="number">23</span>, <span class="number">136</span>, <span class="number">239</span>, <span class="number">235</span>, <span class="number">11</span>, <span class="number">210</span>, <span class="number">97</span>, <span class="number">140</span>, <span class="number">133</span>, <span class="number">234</span>, <span class="number">178</span>, <span class="number">156</span>, <span class="number">186</span>, <span class="number">114</span>, <span class="number">71</span>, <span class="number">74</span>, <span class="number">153</span>, <span class="number">233</span>, <span class="number">45</span>, <span class="number">32</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">228</span>, <span class="number">148</span>, <span class="number">65</span>, <span class="number">79</span>, <span class="number">59</span>, <span class="number">218</span>, <span class="number">150</span>, <span class="number">52</span>, <span class="number">173</span>, <span class="number">179</span>, <span class="number">205</span>, <span class="number">138</span>, <span class="number">247</span>, <span class="number">157</span>, <span class="number">211</span>, <span class="number">117</span>, <span class="number">137</span>, <span class="number">223</span>, <span class="number">191</span>, <span class="number">89</span>, <span class="number">110</span>, <span class="number">54</span>, <span class="number">230</span>, <span class="number">20</span>, <span class="number">28</span>, <span class="number">200</span>, <span class="number">62</span>, <span class="number">3</span>, <span class="number">184</span>, <span class="number">208</span>, <span class="number">17</span>, <span class="number">125</span>, <span class="number">142</span>, <span class="number">144</span>, <span class="number">99</span>, <span class="number">128</span>, <span class="number">129</span>, <span class="number">175</span>, <span class="number">118</span>, <span class="number">92</span>, <span class="number">26</span>, <span class="number">33</span>, <span class="number">40</span>, <span class="number">172</span>, <span class="number">50</span>, <span class="number">72</span>, <span class="number">252</span>, <span class="number">198</span>, <span class="number">187</span>, <span class="number">14</span>, <span class="number">29</span>, <span class="number">24</span>, <span class="number">119</span>, <span class="number">90</span>, <span class="number">21</span>, <span class="number">203</span>, <span class="number">197</span>, <span class="number">100</span>, <span class="number">123</span>, <span class="number">168</span>, <span class="number">37</span>, <span class="number">70</span>, <span class="number">115</span>, <span class="number">66</span>, <span class="number">209</span>, <span class="number">106</span>, <span class="number">73</span>, <span class="number">215</span>, <span class="number">139</span>, <span class="number">199</span>, <span class="number">6</span>, <span class="number">30</span>, <span class="number">67</span>, <span class="number">236</span>, <span class="number">237</span>, <span class="number">250</span>, <span class="number">243</span>, <span class="number">49</span>, <span class="number">134</span>, <span class="number">57</span>, <span class="number">255</span>, <span class="number">174</span>, <span class="number">185</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* copy in[16] to state[4][4] */</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">loadStateArray</span><span class="params">(<span class="type">uint8_t</span>(*state)[<span class="number">4</span>], <span class="type">const</span> <span class="type">uint8_t</span>* in)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">state[j][i] = *in++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* copy state[4][4] to out[16] */</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">storeStateArray</span><span class="params">(<span class="type">uint8_t</span>(*state)[<span class="number">4</span>], <span class="type">uint8_t</span>* out)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">*out++ = state[j][i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//秘钥扩展</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">keyExpansion</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span>* key, <span class="type">uint32_t</span> keyLen, AesKey* aesKey)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == key || <span class="literal">NULL</span> == aesKey) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;keyExpansion param is NULL\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (keyLen != <span class="number">16</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;keyExpansion keyLen = %d, Not support.\n&quot;</span>, keyLen);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span>* w = aesKey-&gt;eK;  <span class="comment">//加密秘钥</span></span><br><span class="line"><span class="type">uint32_t</span>* v = aesKey-&gt;dK;  <span class="comment">//解密秘钥</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* keyLen is 16 Bytes, generate uint32_t W[44]. */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* W[0-3] */</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line"><span class="built_in">LOAD32H</span>(w[i], key + <span class="number">4</span> * i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* W[4-43] */</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">w[<span class="number">4</span>] = w[<span class="number">0</span>] ^ <span class="built_in">MIX</span>(w[<span class="number">3</span>]) ^ rcon[i];</span><br><span class="line">w[<span class="number">5</span>] = w[<span class="number">1</span>] ^ w[<span class="number">4</span>];</span><br><span class="line">w[<span class="number">6</span>] = w[<span class="number">2</span>] ^ w[<span class="number">5</span>];</span><br><span class="line">w[<span class="number">7</span>] = w[<span class="number">3</span>] ^ w[<span class="number">6</span>];</span><br><span class="line">w += <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">w = aesKey-&gt;eK + <span class="number">44</span> - <span class="number">4</span>;</span><br><span class="line"><span class="comment">//解密秘钥矩阵为加密秘钥矩阵的倒序，方便使用，把ek的11个矩阵倒序排列分配给dk作为解密秘钥</span></span><br><span class="line"><span class="comment">//即dk[0-3]=ek[41-44], dk[4-7]=ek[37-40]... dk[41-44]=ek[0-3]</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">11</span>; ++j) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">v[i] = w[i];</span><br><span class="line">&#125;</span><br><span class="line">w -= <span class="number">4</span>;</span><br><span class="line">v += <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 轮秘钥加</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">addRoundKey</span><span class="params">(<span class="type">uint8_t</span>(*state)[<span class="number">4</span>], <span class="type">const</span> <span class="type">uint32_t</span>* key)</span> </span>&#123;</span><br><span class="line"><span class="type">uint8_t</span> k[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/* i: row, j: col */</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">k[i][j] = (<span class="type">uint8_t</span>)<span class="built_in">BYTE</span>(key[j], <span class="number">3</span> - i);  <span class="comment">/* 把 uint32 key[4] 先转换为矩阵 uint8 k[4][4] */</span></span><br><span class="line">state[i][j] ^= k[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//字节替换</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">subBytes</span><span class="params">(<span class="type">uint8_t</span>(*state)[<span class="number">4</span>])</span> </span>&#123;</span><br><span class="line"><span class="comment">/* i: row, j: col */</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">state[i][j] = S[state[i][j]]; <span class="comment">//直接使用原始字节作为S盒数据下标</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//逆字节替换</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">invSubBytes</span><span class="params">(<span class="type">uint8_t</span>(*state)[<span class="number">4</span>])</span> </span>&#123;</span><br><span class="line"><span class="comment">/* i: row, j: col */</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">state[i][j] = inv_S[state[i][j]];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//行移位</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">shiftRows</span><span class="params">(<span class="type">uint8_t</span>(*state)[<span class="number">4</span>])</span> </span>&#123;</span><br><span class="line"><span class="type">uint32_t</span> block[<span class="number">4</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* i: row */</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line"><span class="comment">//便于行循环移位，先把一行4字节拼成uint_32结构，移位后再转成独立的4个字节uint8_t</span></span><br><span class="line"><span class="built_in">LOAD32H</span>(block[i], state[i]);</span><br><span class="line">block[i] = <span class="built_in">ROF32</span>(block[i], <span class="number">8</span> * i);</span><br><span class="line"><span class="built_in">STORE32H</span>(block[i], state[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//逆行移位</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">invShiftRows</span><span class="params">(<span class="type">uint8_t</span>(*state)[<span class="number">4</span>])</span> </span>&#123;</span><br><span class="line"><span class="type">uint32_t</span> block[<span class="number">4</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* i: row */</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line"><span class="built_in">LOAD32H</span>(block[i], state[i]);</span><br><span class="line">block[i] = <span class="built_in">ROR32</span>(block[i], <span class="number">8</span> * i);</span><br><span class="line"><span class="built_in">STORE32H</span>(block[i], state[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Galois Field (256) Multiplication of two Bytes */</span></span><br><span class="line"><span class="comment">// 两字节的伽罗华域乘法运算</span></span><br><span class="line"><span class="function"><span class="type">uint8_t</span> <span class="title">GMul</span><span class="params">(<span class="type">uint8_t</span> u, <span class="type">uint8_t</span> v)</span> </span>&#123;</span><br><span class="line"><span class="type">uint8_t</span> p = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (u &amp; <span class="number">0x01</span>) &#123;    <span class="comment">//</span></span><br><span class="line">p ^= v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> flag = (v &amp; <span class="number">0x80</span>);</span><br><span class="line">v &lt;&lt;= <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (flag) &#123;</span><br><span class="line">v ^= <span class="number">0x1B</span>; <span class="comment">/* x^8 + x^4 + x^3 + x + 1 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">u &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 列混合</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">mixColumns</span><span class="params">(<span class="type">uint8_t</span>(*state)[<span class="number">4</span>])</span> </span>&#123;</span><br><span class="line"><span class="type">uint8_t</span> tmp[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line"><span class="type">uint8_t</span> M[<span class="number">4</span>][<span class="number">4</span>] = &#123; &#123;<span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x01</span>, <span class="number">0x01</span>&#125;,</span><br><span class="line">   &#123;<span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x01</span>&#125;,</span><br><span class="line">   &#123;<span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x03</span>&#125;,</span><br><span class="line">   &#123;<span class="number">0x03</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x02</span>&#125; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* copy state[4][4] to tmp[4][4] */</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">tmp[i][j] = state[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;  <span class="comment">//伽罗华域加法和乘法</span></span><br><span class="line">state[i][j] = <span class="built_in">GMul</span>(M[i][<span class="number">0</span>], tmp[<span class="number">0</span>][j]) ^ <span class="built_in">GMul</span>(M[i][<span class="number">1</span>], tmp[<span class="number">1</span>][j])</span><br><span class="line">^ <span class="built_in">GMul</span>(M[i][<span class="number">2</span>], tmp[<span class="number">2</span>][j]) ^ <span class="built_in">GMul</span>(M[i][<span class="number">3</span>], tmp[<span class="number">3</span>][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 逆列混合</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">invMixColumns</span><span class="params">(<span class="type">uint8_t</span>(*state)[<span class="number">4</span>])</span> </span>&#123;</span><br><span class="line"><span class="type">uint8_t</span> tmp[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line"><span class="type">uint8_t</span> M[<span class="number">4</span>][<span class="number">4</span>] = &#123; &#123;<span class="number">0x0E</span>, <span class="number">0x0B</span>, <span class="number">0x0D</span>, <span class="number">0x09</span>&#125;,</span><br><span class="line">   &#123;<span class="number">0x09</span>, <span class="number">0x0E</span>, <span class="number">0x0B</span>, <span class="number">0x0D</span>&#125;,</span><br><span class="line">   &#123;<span class="number">0x0D</span>, <span class="number">0x09</span>, <span class="number">0x0E</span>, <span class="number">0x0B</span>&#125;,</span><br><span class="line">   &#123;<span class="number">0x0B</span>, <span class="number">0x0D</span>, <span class="number">0x09</span>, <span class="number">0x0E</span>&#125; &#125;;  <span class="comment">//使用列混合矩阵的逆矩阵</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* copy state[4][4] to tmp[4][4] */</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">tmp[i][j] = state[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">state[i][j] = <span class="built_in">GMul</span>(M[i][<span class="number">0</span>], tmp[<span class="number">0</span>][j]) ^ <span class="built_in">GMul</span>(M[i][<span class="number">1</span>], tmp[<span class="number">1</span>][j])</span><br><span class="line">^ <span class="built_in">GMul</span>(M[i][<span class="number">2</span>], tmp[<span class="number">2</span>][j]) ^ <span class="built_in">GMul</span>(M[i][<span class="number">3</span>], tmp[<span class="number">3</span>][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AES-128加密接口，输入key应为16字节长度，输入长度应该是16字节整倍数，</span></span><br><span class="line"><span class="comment">// 这样输出长度与输入长度相同，函数调用外部为输出数据分配内存</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">aesEncrypt</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span>* key, <span class="type">uint32_t</span> keyLen, <span class="type">const</span> <span class="type">uint8_t</span>* pt, <span class="type">uint8_t</span>* ct, <span class="type">uint32_t</span> len)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">AesKey aesKey;</span><br><span class="line"><span class="type">uint8_t</span>* pos = ct;</span><br><span class="line"><span class="type">const</span> <span class="type">uint32_t</span>* rk = aesKey.eK;  <span class="comment">//解密秘钥指针</span></span><br><span class="line"><span class="type">uint8_t</span> out[BLOCKSIZE] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">uint8_t</span> actualKey[<span class="number">16</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">uint8_t</span> state[<span class="number">4</span>][<span class="number">4</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == key || <span class="literal">NULL</span> == pt || <span class="literal">NULL</span> == ct) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;param err.\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (keyLen &gt; <span class="number">16</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;keyLen must be 16.\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (len % BLOCKSIZE) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;inLen is invalid.\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memcpy</span>(actualKey, key, keyLen);</span><br><span class="line"><span class="built_in">keyExpansion</span>(actualKey, <span class="number">16</span>, &amp;aesKey);  <span class="comment">// 秘钥扩展</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用ECB模式循环加密多个分组长度的数据</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i += BLOCKSIZE) &#123;</span><br><span class="line"><span class="comment">// 把16字节的明文转换为4x4状态矩阵来进行处理</span></span><br><span class="line"><span class="built_in">loadStateArray</span>(state, pt);</span><br><span class="line"><span class="comment">// 轮秘钥加</span></span><br><span class="line"><span class="built_in">addRoundKey</span>(state, rk);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; <span class="number">10</span>; ++j) &#123;</span><br><span class="line">rk += <span class="number">4</span>;</span><br><span class="line"><span class="built_in">subBytes</span>(state);   <span class="comment">// 字节替换</span></span><br><span class="line"><span class="built_in">shiftRows</span>(state);  <span class="comment">// 行移位</span></span><br><span class="line"><span class="built_in">mixColumns</span>(state); <span class="comment">// 列混合</span></span><br><span class="line"><span class="built_in">addRoundKey</span>(state, rk); <span class="comment">// 轮秘钥加</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">subBytes</span>(state);    <span class="comment">// 字节替换</span></span><br><span class="line"><span class="built_in">shiftRows</span>(state);  <span class="comment">// 行移位</span></span><br><span class="line"><span class="comment">// 此处不进行列混合</span></span><br><span class="line"><span class="built_in">addRoundKey</span>(state, rk + <span class="number">4</span>); <span class="comment">// 轮秘钥加</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 把4x4状态矩阵转换为uint8_t一维数组输出保存</span></span><br><span class="line"><span class="built_in">storeStateArray</span>(state, pos);</span><br><span class="line"></span><br><span class="line">pos += BLOCKSIZE;  <span class="comment">// 加密数据内存指针移动到下一个分组</span></span><br><span class="line">pt += BLOCKSIZE;   <span class="comment">// 明文数据指针移动到下一个分组</span></span><br><span class="line">rk = aesKey.eK;    <span class="comment">// 恢复rk指针到秘钥初始位置</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AES128解密， 参数要求同加密</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">aesDecrypt</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span>* key, <span class="type">uint32_t</span> keyLen, <span class="type">const</span> <span class="type">uint8_t</span>* ct, <span class="type">uint8_t</span>* pt, <span class="type">uint32_t</span> len)</span> </span>&#123;</span><br><span class="line">AesKey aesKey;</span><br><span class="line"><span class="type">uint8_t</span>* pos = pt;</span><br><span class="line"><span class="type">const</span> <span class="type">uint32_t</span>* rk = aesKey.dK;  <span class="comment">//解密秘钥指针</span></span><br><span class="line"><span class="type">uint8_t</span> out[BLOCKSIZE] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">uint8_t</span> actualKey[<span class="number">16</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">uint8_t</span> state[<span class="number">4</span>][<span class="number">4</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == key || <span class="literal">NULL</span> == ct || <span class="literal">NULL</span> == pt) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;param err.\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (keyLen &gt; <span class="number">16</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;keyLen must be 16.\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (len % BLOCKSIZE) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;inLen is invalid.\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memcpy</span>(actualKey, key, keyLen);</span><br><span class="line"><span class="built_in">keyExpansion</span>(actualKey, <span class="number">16</span>, &amp;aesKey);  <span class="comment">//秘钥扩展，同加密</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i += BLOCKSIZE) &#123;</span><br><span class="line"><span class="comment">// 把16字节的密文转换为4x4状态矩阵来进行处理</span></span><br><span class="line"><span class="built_in">loadStateArray</span>(state, ct);</span><br><span class="line"><span class="comment">// 轮秘钥加，同加密</span></span><br><span class="line"><span class="built_in">addRoundKey</span>(state, rk);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; <span class="number">10</span>; ++j) &#123;</span><br><span class="line">rk += <span class="number">4</span>;</span><br><span class="line"><span class="built_in">invShiftRows</span>(state);    <span class="comment">// 逆行移位</span></span><br><span class="line"><span class="built_in">invSubBytes</span>(state);     <span class="comment">// 逆字节替换，这两步顺序可以颠倒</span></span><br><span class="line"><span class="built_in">addRoundKey</span>(state, rk); <span class="comment">// 轮秘钥加，同加密</span></span><br><span class="line"><span class="built_in">invMixColumns</span>(state);   <span class="comment">// 逆列混合</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">invSubBytes</span>(state);   <span class="comment">// 逆字节替换</span></span><br><span class="line"><span class="built_in">invShiftRows</span>(state);  <span class="comment">// 逆行移位</span></span><br><span class="line"><span class="comment">// 此处没有逆列混合</span></span><br><span class="line"><span class="built_in">addRoundKey</span>(state, rk + <span class="number">4</span>);  <span class="comment">// 轮秘钥加，同加密</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">storeStateArray</span>(state, pos);  <span class="comment">// 保存明文数据</span></span><br><span class="line">pos += BLOCKSIZE;  <span class="comment">// 输出数据内存指针移位分组长度</span></span><br><span class="line">ct += BLOCKSIZE;   <span class="comment">// 输入数据内存指针移位分组长度</span></span><br><span class="line">rk = aesKey.dK;    <span class="comment">// 恢复rk指针到秘钥初始位置</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">// 方便输出16进制数据</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printHex</span><span class="params">(<span class="type">uint8_t</span>* ptr, <span class="type">int</span> len, <span class="type">char</span>* tag)</span> </span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\ndata[%d]: &quot;</span>, tag, len);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.2X &quot;</span>, *ptr++);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// case 1</span></span><br><span class="line"><span class="type">const</span> <span class="type">uint8_t</span> key[<span class="number">16</span>] = &#123; <span class="number">0x2b</span>, <span class="number">0x7e</span>, <span class="number">0x15</span>, <span class="number">0x16</span>, <span class="number">0x28</span>, <span class="number">0xae</span>, <span class="number">0xd2</span>, <span class="number">0xa6</span>, <span class="number">0xab</span>, <span class="number">0xf7</span>, <span class="number">0x15</span>, <span class="number">0x88</span>, <span class="number">0x09</span>, <span class="number">0xcf</span>, <span class="number">0x4f</span>, <span class="number">0x3c</span> &#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">uint8_t</span> pt[<span class="number">16</span>] = &#123; <span class="number">0x32</span>, <span class="number">0x43</span>, <span class="number">0xf6</span>, <span class="number">0xa8</span>, <span class="number">0x88</span>, <span class="number">0x5a</span>, <span class="number">0x30</span>, <span class="number">0x8d</span>, <span class="number">0x31</span>, <span class="number">0x31</span>, <span class="number">0x98</span>, <span class="number">0xa2</span>, <span class="number">0xe0</span>, <span class="number">0x37</span>, <span class="number">0x07</span>, <span class="number">0x34</span> &#125;;</span><br><span class="line"><span class="type">uint8_t</span> ct[<span class="number">16</span>] = &#123; <span class="number">0</span> &#125;;     <span class="comment">// 外部申请输出数据内存，用于加密后的数据</span></span><br><span class="line"><span class="type">uint8_t</span> plain[<span class="number">16</span>] = &#123; <span class="number">0</span> &#125;;  <span class="comment">// 外部申请输出数据内存，用于解密后的数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//aesEncrypt(key, 16, pt, ct, 16); // 加密</span></span><br><span class="line"><span class="comment">//printHex(pt, 16, &quot;plain data:&quot;); // 打印初始明文数据</span></span><br><span class="line"><span class="comment">//printf(&quot;expect cipher:\n39 25 84 1D 02 DC 09 FB DC 11 85 97 19 6A 0B 32\n&quot;);  // 正常解密后的数据内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//printHex(ct, 16, &quot;after encryption:&quot;);  // 打印加密后的密文</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//aesDecrypt(key, 16, ct, plain, 16);       // 解密</span></span><br><span class="line"><span class="comment">//printHex(plain, 16, &quot;after decryption:&quot;); // 打印解密后的明文数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// case 2</span></span><br><span class="line"><span class="comment">// 16字节字符串形式秘钥</span></span><br><span class="line"><span class="type">const</span> <span class="type">uint8_t</span> key2[] = <span class="string">&quot;user01_nkctf2024&quot;</span>;</span><br><span class="line"><span class="comment">// 32字节长度字符串明文</span></span><br><span class="line"><span class="type">const</span> <span class="type">uint8_t</span>* data = (<span class="type">uint8_t</span>*)<span class="string">&quot;abcdefghijklmnopqrstuvwxyz123456&quot;</span>;</span><br><span class="line"><span class="type">uint8_t</span> last[<span class="number">16</span>] = &#123; <span class="number">0xB0</span>, <span class="number">0xCC</span>, <span class="number">0x93</span>, <span class="number">0xEA</span>, <span class="number">0xE9</span>, <span class="number">0x2F</span>, <span class="number">0xEF</span>, <span class="number">0x56</span>, <span class="number">0x99</span>, <span class="number">0x39</span>, <span class="number">0x6E</span>, <span class="number">0x02</span>, <span class="number">0x3B</span>, <span class="number">0x4F</span>, <span class="number">0x9E</span>, <span class="number">0x42</span> &#125;;</span><br><span class="line"><span class="type">uint8_t</span> ct2[<span class="number">32</span>] = &#123; <span class="number">0</span> &#125;;    <span class="comment">//外部申请输出数据内存，用于存放加密后数据</span></span><br><span class="line"><span class="type">uint8_t</span> plain2[<span class="number">32</span>] = &#123; <span class="number">0</span> &#125;; <span class="comment">//外部申请输出数据内存，用于存放解密后数据</span></span><br><span class="line"><span class="comment">//加密32字节明文</span></span><br><span class="line"><span class="built_in">aesEncrypt</span>(key2, <span class="number">16</span>, data, ct2, <span class="number">32</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\nplain text:\n%s\n&quot;</span>, data);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;expect ciphertext:\nfcad715bd73b5cb0488f840f3bad7889\n&quot;</span>);</span><br><span class="line"><span class="built_in">printHex</span>(ct2, <span class="number">32</span>, <span class="string">&quot;after encryption:&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解密32字节密文</span></span><br><span class="line"><span class="built_in">aesDecrypt</span>(key2, <span class="number">16</span>, last, plain2, <span class="number">16</span>);</span><br><span class="line"><span class="comment">// 打印16进制形式的解密后的明文</span></span><br><span class="line"><span class="built_in">printHex</span>(plain2, <span class="number">32</span>, <span class="string">&quot;after decryption:&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为加密前的数据为可见字符的字符串，打印解密后的明文字符，与加密前明文进行对比</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;output plain text\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; ++i) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, plain2[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>input:</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">9ee779<span class="keyword">cd</span>2abcde48</span><br></pre></td></tr></table></figure><p>所以最后的pass：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uSer1p4ss_9ee779<span class="keyword">cd</span>2abcde48</span><br></pre></td></tr></table></figure><p>flag：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">NKCTF</span>&#123;<span class="number">2961</span>bba0add6265ba83bc6198e0ec758&#125;</span><br></pre></td></tr></table></figure><h3 id="REEZ">REEZ</h3><h4 id="第一部分-2">第一部分</h4><p>拖进IDA看，发现是创建了应该文件，对文件进行了一些操作，我们直接下断点，dump下来，然后我们就得到了一个新的文件。</p><h4 id="第二部分-2">第二部分</h4><p>把dump下来的文件（output.bin）拖进IDA，发现可以z3直接解，不过要先去控制流平坦化的混淆，直接D810去混淆，然后写z3：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">from</span> z3 import *</span><br><span class="line"><span class="attribute">flag</span> =<span class="meta"> [BitVec(&#x27;flag[%d]&#x27; % i, 8) for i in range(25)]</span></span><br><span class="line"><span class="attribute">out</span> =<span class="meta"> [0] * 200</span></span><br><span class="line"><span class="meta">byte_2010 = [0x00000000, 0xFFFFFFFE, 0xFFFFFFFF, 0x00000004, 0x00000001, 0xFFFFFFFF, 0x00000001, 0x00000000, 0x00000000, 0xFFFFFFFF, 0xFFFFFFFD, 0xFFFFFFFE, 0x00000000, 0xFFFFFFF6, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFE, 0x00000001, 0xFFFFFFF3, 0xFFFFFFFF, 0xFFFFFFFA, 0xFFFFFFFF, 0xFFFFFFFE, 0x00000001, 0xFFFFFFFE, 0x00000000, 0x00000000, 0x00000000]</span></span><br><span class="line"><span class="attribute">byte_2080</span> =<span class="meta"> [0x32, 0x44, 0xAA, 0x56, 0x63, 0x3D, 0x2B, 0x09, 0xCD, 0x34, 0x99, 0x3C, 0x56, 0xB8, 0x99, 0xDE, 0x26, 0x1F, 0x7E, 0x0B, 0x42, 0xC2, 0x1B, 0xEB, 0xF5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]</span></span><br><span class="line"><span class="attribute">byte_20A0</span> =[<span class="number">0</span>x44, <span class="number">0</span>x30, <span class="number">0</span>x5F, <span class="number">0</span>x79, <span class="number">0</span>x30, <span class="number">0</span>x75, <span class="number">0</span>x5F, <span class="number">0</span>x4C, <span class="number">0</span>x69, <span class="number">0</span>x6B, <span class="number">0</span>x65, <span class="number">0</span>x5F, <span class="number">0</span>x57, <span class="number">0</span>x68, <span class="number">0</span>x61, <span class="number">0</span>x74, <span class="number">0</span>x5F, <span class="number">0</span>x59, <span class="number">0</span>x6F, <span class="number">0</span>x75, <span class="number">0</span>x5F, <span class="number">0</span>x53, <span class="number">0</span>x65, <span class="number">0</span>x65, <span class="number">0</span>x3F]</span><br><span class="line"><span class="attribute">for</span> i in range(len(flag)):</span><br><span class="line">  <span class="attribute">out</span>[i] = flag[<span class="number">24</span> - i]</span><br><span class="line"><span class="attribute">s</span> = Solver()</span><br><span class="line"><span class="attribute">out</span>[<span class="number">24</span>] = -<span class="number">105</span> * (<span class="number">39</span> * (out[<span class="number">24</span>] + -<span class="number">105</span> * (<span class="number">39</span> * (out[<span class="number">13</span>] + -<span class="number">105</span> * (<span class="number">39</span> * (out[<span class="number">14</span>] + <span class="number">3</span>) + <span class="number">23</span>) + <span class="number">111</span>) + <span class="number">23</span>) + <span class="number">111</span>) + <span class="number">23</span>)+ <span class="number">111</span></span><br><span class="line"><span class="attribute">out</span>[<span class="number">23</span>] = -<span class="number">105</span> * (<span class="number">39</span> * ((out[<span class="number">11</span>] ^ out[<span class="number">10</span>]) + out[<span class="number">23</span>]) + <span class="number">23</span>) + <span class="number">111</span></span><br><span class="line"><span class="attribute">out</span>[<span class="number">22</span>] = -<span class="number">105</span> * (<span class="number">39</span> * (out[<span class="number">22</span>] + -<span class="number">105</span> * (<span class="number">39</span> * (out[<span class="number">10</span>] + out[<span class="number">9</span>]) + <span class="number">23</span>) + <span class="number">111</span>) + <span class="number">23</span>) + <span class="number">111</span></span><br><span class="line"><span class="attribute">out</span>[<span class="number">21</span>] = -<span class="number">105</span> * (<span class="number">39</span> * ((out[<span class="number">7</span>] ^ <span class="number">0</span>x17) + out[<span class="number">21</span>]) + <span class="number">23</span>) + <span class="number">111</span></span><br><span class="line"><span class="attribute">out</span>[<span class="number">20</span>] = -<span class="number">105</span> * (<span class="number">39</span> * (out[<span class="number">20</span>] + -<span class="number">105</span> * (<span class="number">39</span> * (out[<span class="number">4</span>] + -<span class="number">105</span> * (<span class="number">39</span> * (out[<span class="number">15</span>] - <span class="number">5</span>) + <span class="number">23</span>) + <span class="number">111</span>) + <span class="number">23</span>) + <span class="number">111</span>) + <span class="number">23</span>)+ <span class="number">111</span></span><br><span class="line"><span class="attribute">out</span>[<span class="number">19</span>] = -<span class="number">105</span> * (<span class="number">39</span> * (out[<span class="number">19</span>] + out[<span class="number">3</span>] - out[<span class="number">1</span>]) + <span class="number">23</span>) + <span class="number">111</span></span><br><span class="line"><span class="attribute">out</span>[<span class="number">18</span>] = -<span class="number">105</span> * (<span class="number">39</span> * (out[<span class="number">18</span>] + -<span class="number">105</span> * (<span class="number">39</span> * (out[<span class="number">16</span>] + out[<span class="number">17</span>]) + <span class="number">23</span>) + <span class="number">111</span>) + <span class="number">23</span>) + <span class="number">111</span></span><br><span class="line"><span class="attribute">out</span>[<span class="number">17</span>] = -<span class="number">105</span> * (<span class="number">39</span> * (out[<span class="number">17</span>] + -<span class="number">105</span> * (<span class="number">39</span> * (out[<span class="number">1</span>] - out[<span class="number">4</span>] + <span class="number">17</span>) + <span class="number">23</span>) + <span class="number">111</span>) + <span class="number">23</span>) + <span class="number">111</span></span><br><span class="line"><span class="attribute">out</span>[<span class="number">16</span>] = -<span class="number">105</span> * (<span class="number">39</span> * (out[<span class="number">16</span>] + (out[<span class="number">5</span>] ^ (-<span class="number">105</span> * (<span class="number">39</span> * (out[<span class="number">6</span>] + <span class="number">1</span>) + <span class="number">23</span>) + <span class="number">111</span>))) + <span class="number">23</span>) + <span class="number">111</span></span><br><span class="line"><span class="attribute">out</span>[<span class="number">15</span>] = -<span class="number">105</span> * (<span class="number">39</span> * (out[<span class="number">7</span>] + out[<span class="number">15</span>]) + <span class="number">23</span>) + <span class="number">111</span> - out[<span class="number">8</span>]</span><br><span class="line"><span class="attribute">out</span>[<span class="number">14</span>] = -<span class="number">105</span> * (<span class="number">39</span> * (out[<span class="number">14</span>] + -<span class="number">105</span> * (<span class="number">39</span> * (out[<span class="number">10</span>] + out[<span class="number">9</span>]) + <span class="number">23</span>) + <span class="number">111</span>) + <span class="number">23</span>) + <span class="number">111</span></span><br><span class="line"><span class="attribute">out</span>[<span class="number">13</span>] = -<span class="number">105</span> * (<span class="number">39</span> * (out[<span class="number">12</span>] + -<span class="number">105</span> * (<span class="number">39</span> * (out[<span class="number">11</span>] + -<span class="number">105</span> * (<span class="number">39</span> * (out[<span class="number">13</span>] - <span class="number">7</span>) + <span class="number">23</span>) + <span class="number">111</span>) + <span class="number">23</span>) + <span class="number">111</span>) + <span class="number">23</span>)+ <span class="number">111</span></span><br><span class="line"><span class="attribute">out</span>[<span class="number">12</span>] = -<span class="number">105</span> * (<span class="number">39</span> * (out[<span class="number">12</span>] + out[<span class="number">13</span>]) + <span class="number">23</span>) + <span class="number">111</span></span><br><span class="line"><span class="attribute">out</span>[<span class="number">11</span>] = -<span class="number">105</span> * (<span class="number">39</span> * (out[<span class="number">11</span>] + (out[<span class="number">17</span>] ^ out[<span class="number">16</span>])) + <span class="number">23</span>) + <span class="number">111</span></span><br><span class="line"><span class="attribute">out</span>[<span class="number">10</span>] = -<span class="number">105</span> * (<span class="number">39</span> * (out[<span class="number">19</span>] + -<span class="number">105</span> * (<span class="number">39</span> * (out[<span class="number">20</span>] + -<span class="number">105</span> * (<span class="number">39</span> * (out[<span class="number">10</span>] + <span class="number">12</span>) + <span class="number">23</span>) + <span class="number">111</span>) + <span class="number">23</span>) + <span class="number">111</span>) + <span class="number">23</span>)+ <span class="number">111</span></span><br><span class="line"><span class="attribute">out</span>[<span class="number">9</span>] = -<span class="number">105</span> * (<span class="number">39</span> * (out[<span class="number">21</span>] + -<span class="number">105</span> * (<span class="number">39</span> * (out[<span class="number">9</span>] + <span class="number">8</span>) + <span class="number">23</span>) + <span class="number">111</span>) + <span class="number">23</span>) + <span class="number">111</span></span><br><span class="line"><span class="attribute">out</span>[<span class="number">8</span>] = -<span class="number">105</span> * (<span class="number">39</span> * ((out[<span class="number">22</span>] ^ <span class="number">0</span>x4D) + out[<span class="number">8</span>]) + <span class="number">23</span>) + <span class="number">111</span></span><br><span class="line"><span class="attribute">out</span>[<span class="number">7</span>] = -<span class="number">105</span> * (<span class="number">39</span> * (out[<span class="number">7</span>] + -<span class="number">105</span> * (<span class="number">39</span> * (<span class="number">2</span> * (out[<span class="number">23</span>] &amp; <span class="number">0</span>xF9 ^ <span class="number">0</span>x11) + (out[<span class="number">23</span>] ^ <span class="number">0</span>xEE)) + <span class="number">23</span>) + <span class="number">111</span>) + <span class="number">23</span>) + <span class="number">111</span></span><br><span class="line"><span class="attribute">out</span>[<span class="number">6</span>] = -<span class="number">105</span> * (<span class="number">39</span> * ((out[<span class="number">7</span>] ^ out[<span class="number">9</span>]) + out[<span class="number">6</span>]) + <span class="number">23</span>) + <span class="number">111</span></span><br><span class="line"><span class="attribute">out</span>[<span class="number">5</span>] = -<span class="number">105</span> * (<span class="number">39</span> * (out[<span class="number">12</span>] + -<span class="number">105</span> * (<span class="number">39</span> * (out[<span class="number">10</span>] + out[<span class="number">5</span>]) + <span class="number">23</span>) + <span class="number">111</span>) + <span class="number">23</span>) + <span class="number">111</span></span><br><span class="line"><span class="attribute">out</span>[<span class="number">4</span>] = -<span class="number">105</span> * (<span class="number">39</span> * (out[<span class="number">4</span>] + out[<span class="number">13</span>]) + <span class="number">23</span>) + <span class="number">111</span></span><br><span class="line"><span class="attribute">out</span>[<span class="number">3</span>] = -<span class="number">105</span> * (<span class="number">39</span> * (out[<span class="number">16</span>] + -<span class="number">105</span> * (<span class="number">39</span> * (out[<span class="number">3</span>] + out[<span class="number">18</span>]) + <span class="number">23</span>) + <span class="number">111</span>) + <span class="number">23</span>) + <span class="number">111</span></span><br><span class="line"><span class="attribute">out</span>[<span class="number">2</span>] = -<span class="number">105</span> * (<span class="number">39</span> * (out[<span class="number">19</span>] + out[<span class="number">2</span>]) + <span class="number">23</span>) + <span class="number">111</span></span><br><span class="line"><span class="attribute">out</span>[<span class="number">1</span>] = -<span class="number">105</span> * (<span class="number">39</span> * ((out[<span class="number">24</span>] ^ out[<span class="number">22</span>]) + out[<span class="number">1</span>]) + <span class="number">23</span>) + <span class="number">111</span></span><br><span class="line"><span class="attribute">out</span>[<span class="number">0</span>] = -<span class="number">105</span> * (<span class="number">39</span> * (out[<span class="number">0</span>] + -<span class="number">105</span> * (<span class="number">39</span> * (out[<span class="number">23</span>] + <span class="number">24</span>) + <span class="number">23</span>) + <span class="number">111</span>) + <span class="number">23</span>) + <span class="number">111</span></span><br><span class="line"><span class="attribute">for</span> j in range(<span class="number">25</span>):</span><br><span class="line">    <span class="attribute">out</span>[j + <span class="number">25</span>] = out[<span class="number">24</span> - j]</span><br><span class="line"><span class="attribute">v16</span> = <span class="number">0</span></span><br><span class="line"><span class="attribute">for</span> v14 in range(<span class="number">5</span>):</span><br><span class="line">    <span class="attribute">for</span> v16 in range(<span class="number">5</span>):</span><br><span class="line">        <span class="attribute">v12</span> = <span class="number">0</span></span><br><span class="line">        <span class="attribute">for</span> v11 in range(<span class="number">5</span>):</span><br><span class="line">            <span class="attribute">v8</span> = -<span class="number">105</span> * (<span class="number">39</span> * (v12 + byte_2010[<span class="number">5</span> * v14 + v11] * out[<span class="number">5</span> * v11 + <span class="number">25</span> + v16]) + <span class="number">23</span>) + <span class="number">111</span></span><br><span class="line">            <span class="attribute">v12</span> = v8</span><br><span class="line">        <span class="attribute">out</span>[<span class="number">5</span> * v14 + <span class="number">57</span> + v16] = v8</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"><span class="attribute">for</span> i in range(<span class="number">25</span>):</span><br><span class="line">    <span class="attribute">s</span>.add(out[i + <span class="number">57</span>] == byte_2080[i] ^ byte_20A0[i])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attribute">for</span> i in range(len(flag)):</span><br><span class="line">    <span class="attribute">s</span>.add(And(flag[i]&gt;<span class="number">31</span>,flag[i]&lt;<span class="number">127</span>))</span><br><span class="line"></span><br><span class="line"><span class="attribute">print</span>(s.check())</span><br><span class="line"><span class="attribute">while</span>(s.check()==sat):</span><br><span class="line">    <span class="attribute">condition</span> =<span class="meta"> []</span></span><br><span class="line">    <span class="attribute">m</span> = s.model()</span><br><span class="line">    <span class="attribute">p</span>=<span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attribute">for</span> i in range(len(flag)):</span><br><span class="line">        <span class="attribute">p</span>+=chr(int(<span class="string">&quot;%s&quot;</span> % (m[flag[i]])))</span><br><span class="line">        <span class="attribute">condition</span>.append(flag[i]!=int(<span class="string">&quot;%s&quot;</span> % (m[flag[i]])))</span><br><span class="line">    <span class="attribute">print</span>(p)</span><br><span class="line">    <span class="attribute">s</span>.add(Or(condition))</span><br><span class="line"><span class="comment">#NKCTF&#123;THut_1Ss_s@_eAsyhh&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">NKCTF RE</summary>
    
    
    
    
    <category term="wp" scheme="https://www.zafkiel3.com/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>HgameCTF again！</title>
    <link href="https://www.zafkiel3.com/posts/55a2c6d1.html"/>
    <id>https://www.zafkiel3.com/posts/55a2c6d1.html</id>
    <published>2024-05-31T09:41:09.600Z</published>
    <updated>2024-05-31T09:56:19.853Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一，HgameCTF-again！">一，HgameCTF again！</h3><h4 id="第一部分">第一部分</h4><p>打开压缩包，发现是两个文件：bin1.exe和bin2.pyc，将两个拖进IDA没有发现什么有用的东西，突然注意到bin1的图标是pyinstxtractor的图标，所以猜测这是应该pyc经过pyinstxtractor打包得到的exe，所以解包一下，解包出bin1.pyc拖进010看有一个hint：</p><p><img src="https://www.zafkielpic.cc/img/p10.png" alt=""></p><p>他说可以MD5这个文件，用这个文件去解bin2，但是我太菜了，不知道怎么使用这个提示。</p><h4 id="第二部分">第二部分</h4><p>在010看bin2.pyc发现在文件的最后有大量的重复数据</p><p><img src="https://www.zafkielpic.cc/img/p11.png" alt=""></p><p>于是我猜测这里是对整个文件进行了异或，而以异或的数据就是重复数据：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">a405b5d321e446459d8f9169d027bd92</span></span><br><span class="line"><span class="comment">#因为一个数异或上0都是本身，而PE文件最后应该是有大量的0填充</span></span><br></pre></td></tr></table></figure><p>所以我们写一个脚本试试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">XOR_bin2</span>(<span class="params">input_file,key,output_file</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(input_file,<span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> fin:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(output_file,<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> fout:</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                chunk = fin.read(<span class="number">32</span>)</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">len</span>(chunk) == <span class="number">0</span>):</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                data = <span class="built_in">bytearray</span>(<span class="built_in">len</span>(chunk))</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(chunk)):</span><br><span class="line">                    data[i] = chunk[i] ^ <span class="built_in">ord</span>(key[i % <span class="built_in">len</span>(key)])</span><br><span class="line">                fout.write(data)</span><br><span class="line">key = <span class="string">&quot;a405b5d321e446459d8f9169d027bd92&quot;</span></span><br><span class="line">XOR_bin2(<span class="string">&#x27;bin2.pyc&#x27;</span>,key,<span class="string">&#x27;output.bin&#x27;</span>)</span><br></pre></td></tr></table></figure><p>拿到output.bin文件，010看一下，是WinPE，文件后缀改成exe试一下，发现有提示输入flag，猜测大成功！</p><h4 id="第三部分">第三部分</h4><p>将output.exe拖进IDA分析：</p><p><img src="https://www.zafkielpic.cc/img/p12.png" alt=""></p><p>分析代码，就是一个tea加密的变种（sub_1400010E0）:</p><p><img src="https://www.zafkielpic.cc/img/p13.png" alt=""></p><p>有点难看，所以我们修饰一下这个代码 (注意这加密函数是没有返回值的，所以可以在IDA中进入这个加密函数，对函数的头右键有一个Remove Return value移除返回值，这样可以让函数更加清晰)；</p><p><img src="https://www.zafkielpic.cc/img/p14.png" alt=""></p><p>key和flag的加密后的数据非常明显</p><p>然后我们就可以写脚本了：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;string.h&gt;</span></span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    unsigned int <span class="built_in">s7</span><span class="comment">; // er10</span></span><br><span class="line">    unsigned int <span class="built_in">s6</span><span class="comment">; // er13</span></span><br><span class="line">    unsigned int delta<span class="comment">; // edi</span></span><br><span class="line">    unsigned int <span class="built_in">s5</span><span class="comment">; // er12</span></span><br><span class="line">    unsigned int <span class="built_in">s4</span><span class="comment">; // er15</span></span><br><span class="line">    unsigned int <span class="built_in">s3</span><span class="comment">; // er14</span></span><br><span class="line">    unsigned int <span class="built_in">s2</span><span class="comment">; // ebp</span></span><br><span class="line">    unsigned int <span class="built_in">s1</span><span class="comment">; // esi</span></span><br><span class="line">    unsigned int <span class="built_in">s0</span><span class="comment">; // er11</span></span><br><span class="line">    unsigned int v13<span class="comment">; // ebx</span></span><br><span class="line">    unsigned int key[<span class="number">4</span>] = &#123; <span class="number">0x1234</span>, <span class="number">0x2341</span>, <span class="number">0x3412</span>, <span class="number">0x4123</span> &#125;;</span><br><span class="line">    unsigned int flag[<span class="number">8</span>] = &#123; <span class="number">0x506FB5C3</span>, <span class="number">0xB9358F45</span>, <span class="number">0xC91AE8C7</span>, <span class="number">0x3820E280</span>, <span class="number">0xD13ABA83</span>, <span class="number">0x975CF554</span>, <span class="number">0x4352036B</span>, <span class="number">0x1CD20447</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">s7</span> = flag[<span class="number">7</span>];</span><br><span class="line">    <span class="built_in">s6</span> = flag[<span class="number">6</span>];</span><br><span class="line">    delta = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">s5</span> = flag[<span class="number">5</span>];</span><br><span class="line">    <span class="built_in">s4</span> = flag[<span class="number">4</span>];</span><br><span class="line">    <span class="built_in">s3</span> = flag[<span class="number">3</span>];</span><br><span class="line">    <span class="built_in">s2</span> = flag[<span class="number">2</span>];</span><br><span class="line">    <span class="built_in">s1</span> = flag[<span class="number">1</span>];</span><br><span class="line">    <span class="built_in">s0</span> = flag[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    for (int i = <span class="number">0</span><span class="comment">; i &lt; 12; i++)</span></span><br><span class="line">    &#123;</span><br><span class="line">        delta += <span class="number">0x7937B99E</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for (int i = <span class="number">0</span><span class="comment">; i &lt; 12; i++)</span></span><br><span class="line">    &#123;</span><br><span class="line">        v13 = key[((delta &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>)];</span><br><span class="line">        <span class="built_in">s7</span> -= ((<span class="built_in">s6</span> ^ key[((delta &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span> ^ <span class="number">3</span>i64)]) + (delta ^ <span class="built_in">s0</span>)) ^ (((<span class="number">16</span> * <span class="built_in">s6</span>) ^ ((unsigned int)<span class="built_in">s0</span> &gt;&gt; <span class="number">3</span>)) + ((<span class="built_in">s6</span> &gt;&gt; <span class="number">5</span>) ^ (<span class="number">4</span> * <span class="built_in">s0</span>)));</span><br><span class="line">        <span class="built_in">s6</span> -= ((<span class="built_in">s5</span> ^ key[((delta &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span> ^ <span class="number">2</span>i64)]) + (delta ^ <span class="built_in">s7</span>)) ^ (((<span class="number">16</span> * <span class="built_in">s5</span>) ^ (<span class="built_in">s7</span> &gt;&gt; <span class="number">3</span>)) + ((<span class="built_in">s5</span> &gt;&gt; <span class="number">5</span>) ^ (<span class="number">4</span> * <span class="built_in">s7</span>)));</span><br><span class="line">        <span class="built_in">s5</span> -= ((delta ^ <span class="built_in">s6</span>) + (<span class="built_in">s4</span> ^ key[((delta &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span> ^ <span class="number">1</span>i64)])) ^ (((<span class="number">16</span> * <span class="built_in">s4</span>) ^ (<span class="built_in">s6</span> &gt;&gt; <span class="number">3</span>)) + ((<span class="built_in">s4</span> &gt;&gt; <span class="number">5</span>) ^ (<span class="number">4</span> * <span class="built_in">s6</span>)));</span><br><span class="line">        <span class="built_in">s4</span> -= ((delta ^ <span class="built_in">s5</span>) + (<span class="built_in">s3</span> ^ v13)) ^ (((<span class="number">16</span> * <span class="built_in">s3</span>) ^ (<span class="built_in">s5</span> &gt;&gt; <span class="number">3</span>)) + ((<span class="built_in">s3</span> &gt;&gt; <span class="number">5</span>) ^ (<span class="number">4</span> * <span class="built_in">s5</span>)));</span><br><span class="line">        <span class="built_in">s3</span> -= ((delta ^ <span class="built_in">s4</span>) + (<span class="built_in">s2</span> ^ key[((delta &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span> ^ <span class="number">3</span>i64)])) ^ (((<span class="number">16</span> * <span class="built_in">s2</span>) ^ (<span class="built_in">s4</span> &gt;&gt; <span class="number">3</span>)) + ((<span class="built_in">s2</span> &gt;&gt; <span class="number">5</span>) ^ (<span class="number">4</span> * <span class="built_in">s4</span>)));</span><br><span class="line">        <span class="built_in">s2</span> -= ((delta ^ <span class="built_in">s3</span>) + (<span class="built_in">s1</span> ^ key[((delta &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span> ^ <span class="number">2</span>i64)])) ^ (((<span class="number">16</span> * <span class="built_in">s1</span>) ^ (<span class="built_in">s3</span> &gt;&gt; <span class="number">3</span>)) + ((<span class="built_in">s1</span> &gt;&gt; <span class="number">5</span>) ^ (<span class="number">4</span> * <span class="built_in">s3</span>)));</span><br><span class="line">        <span class="built_in">s1</span> -= ((delta ^ <span class="built_in">s2</span>) + (<span class="built_in">s0</span> ^ key[((delta &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span> ^ <span class="number">1</span>i64)])) ^ (((<span class="number">16</span> * <span class="built_in">s0</span>) ^ (<span class="built_in">s2</span> &gt;&gt; <span class="number">3</span>)) + (((unsigned int)<span class="built_in">s0</span> &gt;&gt; <span class="number">5</span>) ^ (<span class="number">4</span> * <span class="built_in">s2</span>)));</span><br><span class="line">        <span class="built_in">s0</span> -= (((delta ^ <span class="built_in">s1</span>) + (<span class="built_in">s7</span> ^ v13)) ^ (((<span class="number">16</span> * <span class="built_in">s7</span>) ^ (<span class="built_in">s1</span> &gt;&gt; <span class="number">3</span>)) + ((<span class="built_in">s7</span> &gt;&gt; <span class="number">5</span>) ^ (<span class="number">4</span> * <span class="built_in">s1</span>))));</span><br><span class="line">        delta -= <span class="number">0x7937B99E</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    flag[<span class="number">7</span>] = <span class="built_in">s7</span>;</span><br><span class="line">    flag[<span class="number">1</span>] = <span class="built_in">s1</span>;</span><br><span class="line">    flag[<span class="number">2</span>] = <span class="built_in">s2</span>;</span><br><span class="line">    flag[<span class="number">3</span>] = <span class="built_in">s3</span>;</span><br><span class="line">    flag[<span class="number">4</span>] = <span class="built_in">s4</span>;</span><br><span class="line">    flag[<span class="number">5</span>] = <span class="built_in">s5</span>;</span><br><span class="line">    flag[<span class="number">6</span>] = <span class="built_in">s6</span>;</span><br><span class="line">    flag[<span class="number">0</span>] = <span class="built_in">s0</span>;</span><br><span class="line"></span><br><span class="line">    for (int i = <span class="number">0</span><span class="comment">; i &lt; 8; i++)</span></span><br><span class="line">    &#123;</span><br><span class="line">        printf(<span class="string">&quot;\n0x%x &quot;</span>, flag[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    char flag1[] = &#123; <span class="number">0x68</span>, <span class="number">0x67</span>, <span class="number">0x61</span>, <span class="number">0x6d</span>, <span class="number">0x65</span>, <span class="number">0x7b</span>, <span class="number">0x62</span>, <span class="number">0x74</span>, <span class="number">0x65</span>, <span class="number">0x61</span>, <span class="number">0x5f</span>, <span class="number">0x69</span>, <span class="number">0x73</span>, <span class="number">0x5f</span>, <span class="number">0x61</span>, <span class="number">0x5f</span>, <span class="number">0x68</span>, <span class="number">0x61</span>, <span class="number">0x72</span>, <span class="number">0x64</span>, <span class="number">0x5f</span>, <span class="number">0x65</span>, <span class="number">0x6e</span>, <span class="number">0x63</span>, <span class="number">0x72</span>, <span class="number">0x79</span>, <span class="number">0x70</span>, <span class="number">0x74</span>, <span class="number">0x69</span>, <span class="number">0x6f</span>, <span class="number">0x6e</span>, <span class="number">0x7d</span>, <span class="string">&#x27;\0&#x27;</span> &#125;;</span><br><span class="line">    printf(<span class="string">&quot;\n%s&quot;</span>, flag1);</span><br><span class="line">return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>x<span class="number">6d616768</span></span><br><span class="line"><span class="number">0x74627b65</span></span><br><span class="line"><span class="number">0</span>x<span class="number">695f6165</span></span><br><span class="line"><span class="number">0</span>x<span class="number">5f615f73</span></span><br><span class="line"><span class="number">0x64726168</span></span><br><span class="line"><span class="number">0</span>x636e655f</span><br><span class="line"><span class="number">0x74707972</span></span><br><span class="line"><span class="number">0</span>x<span class="number">7d6e6f69</span></span><br><span class="line">hgame&#123;btea_is_a_hard_encryption&#125;</span><br></pre></td></tr></table></figure><h3 id="二，HgameCTF-change">二，HgameCTF change</h3><h4 id="第一部分-2">第一部分</h4><p>直接拖进IDA分析</p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __cdecl main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+20h] [rbp-B8h]</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [rsp+24h] [rbp-B4h]</span></span><br><span class="line">  __int64 v6; <span class="comment">// [rsp+38h] [rbp-A0h]</span></span><br><span class="line">  <span class="keyword">char</span> v7[<span class="number">32</span>]; <span class="comment">// [rsp+40h] [rbp-98h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v8[<span class="number">32</span>]; <span class="comment">// [rsp+60h] [rbp-78h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v9[<span class="number">32</span>]; <span class="comment">// [rsp+80h] [rbp-58h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v10[<span class="number">32</span>]; <span class="comment">// [rsp+A0h] [rbp-38h] BYREF</span></span><br><span class="line"></span><br><span class="line">  sub_1400021E0(v10, <span class="string">&quot;am2qasl&quot;</span>, envp);</span><br><span class="line">  v6 = std::shared_ptr&lt;__ExceptionPtr&gt;::operator=(v7, v10);</span><br><span class="line">  sub_140002280(v9, v6);</span><br><span class="line">  sub_140001410(std::cout, <span class="string">&quot;plz input your flag:&quot;</span>);</span><br><span class="line">  sub_1400010F0(std::cin, &amp;unk_140008128);</span><br><span class="line">  sub_1400029A0(v9, v8, &amp;unk_140008128);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">24</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v5 = byte_140008000[i];</span><br><span class="line">    <span class="keyword">if</span> ( v5 != *(<span class="keyword">char</span> *)sub_140002960(v8, i) )</span><br><span class="line">    &#123;</span><br><span class="line">      sub_140001410(std::cout, <span class="string">&quot;sry,try again...&quot;</span>);</span><br><span class="line">      sub_140002710(v8);</span><br><span class="line">      sub_140002780(v9);</span><br><span class="line">      sub_140002710(v10);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  sub_140001410(std::cout, <span class="string">&quot;Congratulations!&quot;</span>);</span><br><span class="line">  sub_140002710(v8);</span><br><span class="line">  sub_140002780(v9);</span><br><span class="line">  sub_140002710(v10);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接发现加密函数sub_1400029A0</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">sub_1400029A0</span><span class="params">(__int64 a1, __int64 a2, __int64 a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">char</span> *v3; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">char</span> *v4; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+20h] [rbp-58h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v7; <span class="comment">// [rsp+28h] [rbp-50h]</span></span><br><span class="line">  <span class="type">char</span> v8; <span class="comment">// [rsp+2Ch] [rbp-4Ch]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v9; <span class="comment">// [rsp+30h] [rbp-48h]</span></span><br><span class="line">  <span class="type">char</span> v10; <span class="comment">// [rsp+34h] [rbp-44h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v11; <span class="comment">// [rsp+48h] [rbp-30h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v12; <span class="comment">// [rsp+58h] [rbp-20h]</span></span><br><span class="line"></span><br><span class="line">  std::shared_ptr&lt;__ExceptionPtr&gt;::<span class="keyword">operator</span>=(a2, a3);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; (<span class="type">unsigned</span> __int64)<span class="built_in">unknown_libname_18</span>(a2); ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( i % <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">sub_140002D20</span>(sub_140003670);</span><br><span class="line">      v12 = <span class="built_in">unknown_libname_18</span>(a1);</span><br><span class="line">      v9 = *(<span class="type">char</span> *)<span class="built_in">sub_140002960</span>(a1, i % v12);</span><br><span class="line">      v4 = (<span class="type">char</span> *)<span class="built_in">sub_140002960</span>(a2, i);</span><br><span class="line">      v10 = <span class="built_in">sub_140002D00</span>((<span class="type">unsigned</span> <span class="type">int</span>)*v4, v9);</span><br><span class="line">      *(_BYTE *)<span class="built_in">sub_140002960</span>(a2, i) = v10;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">sub_140002D20</span>(sub_140003650);</span><br><span class="line">      v11 = <span class="built_in">unknown_libname_18</span>(a1);</span><br><span class="line">      v7 = *(<span class="type">char</span> *)<span class="built_in">sub_140002960</span>(a1, i % v11);</span><br><span class="line">      v3 = (<span class="type">char</span> *)<span class="built_in">sub_140002960</span>(a2, i);</span><br><span class="line">      v8 = <span class="built_in">sub_140002D00</span>((<span class="type">unsigned</span> <span class="type">int</span>)*v3, v7);</span><br><span class="line">      *(_BYTE *)<span class="built_in">sub_140002960</span>(a2, i) = v8;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>逻辑很清晰，奇数异或，偶数异或完加10，脚本：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">data = [<span class="number">0x13</span>, <span class="number">0x0A</span>, <span class="number">0x5D</span>, <span class="number">0x1C</span>, <span class="number">0x0E</span>, <span class="number">0x08</span>, <span class="number">0x23</span>, <span class="number">0x06</span>, <span class="number">0x0B</span>, <span class="number">0x4B</span>, <span class="number">0x38</span>, <span class="number">0x22</span>, <span class="number">0x0D</span>, <span class="number">0x1C</span>, <span class="number">0x48</span>, <span class="number">0x0C</span>, <span class="number">0x66</span>, <span class="number">0x15</span>, <span class="number">0x48</span>, <span class="number">0x1B</span>, <span class="number">0x0D</span>, <span class="number">0x0E</span>, <span class="number">0x10</span>, <span class="number">0x4F</span>]</span><br><span class="line">a1 = [<span class="number">97</span>, <span class="number">109</span>, <span class="number">50</span>, <span class="number">113</span>, <span class="number">97</span>, <span class="number">115</span>, <span class="number">108</span>]  # am2qasl</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="string">for i in range(0,24):</span></span><br><span class="line"><span class="string">    for x in range(0,255):</span></span><br><span class="line"><span class="string">        if(i % 2 == 1):</span></span><br><span class="line"><span class="string">            if(x ^ a1[i % 7] == data[i]):</span></span><br><span class="line"><span class="string">                flag += chr(x)</span></span><br><span class="line"><span class="string">        if(i % 2 == 0):</span></span><br><span class="line"><span class="string">            if((x ^ a1[i % 7]) + 10 == data[i]):</span></span><br><span class="line"><span class="string">                flag += chr(x)</span></span><br><span class="line"><span class="string">print(flag)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># hgame&#123;ugly_Cpp_and_hook&#125;</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><h3 id="三，HgameCTF-crakme2">三，HgameCTF crakme2</h3><h4 id="第一部分-3">第一部分</h4><p>拖进IDA分析我们发现主函数直接爆红：</p><p><img src="https://www.zafkielpic.cc/img/p15.png" alt=""></p><p>另一个函数点进去是一个base64的变表加密，解出来是一个fake flag（hgame{th1s_i5_fake_fl4g}）所以我们直接看汇编这么个事：</p><p><img src="https://www.zafkielpic.cc/img/p16.png" alt=""></p><p>好家伙，那么大一个VirtualProtect（可以看官方文档或者网上直接搜），直接给地址加密了</p><p>看了一下汇编代码，发现它就是将地址给异或所以我们写一个IDC脚本还原它（点击左上角的File，找到Script command在里面写代码，注意将Script command左下角切换成python）：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">start = <span class="number">0x14000105C</span></span><br><span class="line"><span class="keyword">loop</span> = <span class="number">0x246a</span></span><br><span class="line">j = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="keyword">start</span>,<span class="keyword">start</span> + <span class="keyword">loop</span>):</span><br><span class="line">    patch_byte(i,get_wide_byte(i) ^ get_wide_byte(<span class="number">0x140006000</span> + j) )</span><br><span class="line">    j += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>然后跳转到0x14000105C处u+c+p修正函数；</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br></pre></td><td class="code"><pre><span class="line">_BOOL8 __fastcall sub_14000105C(unsigned __int8 *a1)</span><br><span class="line">&#123;</span><br><span class="line"> <span class="built_in"> int </span>v1; // er11</span><br><span class="line"> <span class="built_in"> int </span>v2; // ebx</span><br><span class="line"> <span class="built_in"> int </span>v3; // er15</span><br><span class="line"> <span class="built_in"> int </span>v4; // er9</span><br><span class="line"> <span class="built_in"> int </span>v5; // edi</span><br><span class="line"> <span class="built_in"> int </span>v6; // er10</span><br><span class="line"> <span class="built_in"> int </span>v7; // ebp</span><br><span class="line"> <span class="built_in"> int </span>v8; // esi</span><br><span class="line"> <span class="built_in"> int </span>v9; // er14</span><br><span class="line"> <span class="built_in"> int </span>v10; // er12</span><br><span class="line"> <span class="built_in"> int </span>v11; // er13</span><br><span class="line"> <span class="built_in"> int </span>v12; // ecx</span><br><span class="line"> <span class="built_in"> int </span>v13; // er8</span><br><span class="line"> <span class="built_in"> int </span>v15; // [rsp+0h] [rbp-118h]</span><br><span class="line"> <span class="built_in"> int </span>v16; // [rsp+4h] [rbp-114h]</span><br><span class="line"> <span class="built_in"> int </span>v17; // [rsp+8h] [rbp-110h]</span><br><span class="line"> <span class="built_in"> int </span>v18; // [rsp+Ch] [rbp-10Ch]</span><br><span class="line"> <span class="built_in"> int </span>v19; // [rsp+10h] [rbp-108h]</span><br><span class="line"> <span class="built_in"> int </span>v20; // [rsp+14h] [rbp-104h]</span><br><span class="line"> <span class="built_in"> int </span>v21; // [rsp+18h] [rbp-100h]</span><br><span class="line"> <span class="built_in"> int </span>v22; // [rsp+1Ch] [rbp-FCh]</span><br><span class="line"> <span class="built_in"> int </span>v23; // [rsp+20h] [rbp-F8h]</span><br><span class="line"> <span class="built_in"> int </span>v24; // [rsp+24h] [rbp-F4h]</span><br><span class="line"> <span class="built_in"> int </span>v25; // [rsp+28h] [rbp-F0h]</span><br><span class="line"> <span class="built_in"> int </span>v26; // [rsp+2Ch] [rbp-ECh]</span><br><span class="line"> <span class="built_in"> int </span>v27; // [rsp+30h] [rbp-E8h]</span><br><span class="line"> <span class="built_in"> int </span>v28; // [rsp+34h] [rbp-E4h]</span><br><span class="line"> <span class="built_in"> int </span>v29; // [rsp+38h] [rbp-E0h]</span><br><span class="line"> <span class="built_in"> int </span>v30; // [rsp+3Ch] [rbp-DCh]</span><br><span class="line"> <span class="built_in"> int </span>v31; // [rsp+40h] [rbp-D8h]</span><br><span class="line"> <span class="built_in"> int </span>v32; // [rsp+48h] [rbp-D0h]</span><br><span class="line"> <span class="built_in"> int </span>v33; // [rsp+4Ch] [rbp-CCh]</span><br><span class="line"> <span class="built_in"> int </span>v34; // [rsp+50h] [rbp-C8h]</span><br><span class="line"> <span class="built_in"> int </span>v35; // [rsp+54h] [rbp-C4h]</span><br><span class="line"> <span class="built_in"> int </span>v36; // [rsp+78h] [rbp-A0h]</span><br><span class="line"> <span class="built_in"> int </span>v37; // [rsp+90h] [rbp-88h]</span><br><span class="line"> <span class="built_in"> int </span>v38; // [rsp+9Ch] [rbp-7Ch]</span><br><span class="line"> <span class="built_in"> int </span>v39; // [rsp+120h] [rbp+8h]</span><br><span class="line"> <span class="built_in"> int </span>v40; // [rsp+128h] [rbp+10h]</span><br><span class="line"> <span class="built_in"> int </span>v41; // [rsp+130h] [rbp+18h]</span><br><span class="line"> <span class="built_in"> int </span>v42; // [rsp+138h] [rbp+20h]</span><br><span class="line"></span><br><span class="line">  v1 = a1[25];</span><br><span class="line">  v2 = a1[21];</span><br><span class="line">  v3 = a1[31];</span><br><span class="line">  v4 = a1[29];</span><br><span class="line">  v5 = *a1;</span><br><span class="line">  v6 = a1[23];</span><br><span class="line">  v7 = a1[8];</span><br><span class="line">  v8 = a1[28];</span><br><span class="line">  v9 = a1[12];</span><br><span class="line">  v10 = a1[3];</span><br><span class="line">  v11 = a1[2];</span><br><span class="line">  v19 = a1[30];</span><br><span class="line">  v15 = a1[18];</span><br><span class="line">  v16 = a1[24];</span><br><span class="line">  v27 = a1[11];</span><br><span class="line">  v17 = a1[26];</span><br><span class="line">  v30 = a1[14];</span><br><span class="line">  v40 = a1[7];</span><br><span class="line">  v26 = a1[20];</span><br><span class="line">  v37 = 2 * v26;</span><br><span class="line">  v42 = a1[22];</span><br><span class="line">  v28 = a1[1];</span><br><span class="line">  v25 = a1[27];</span><br><span class="line">  v21 = a1[19];</span><br><span class="line">  v23 = a1[16];</span><br><span class="line">  v31 = a1[13];</span><br><span class="line">  v29 = a1[10];</span><br><span class="line">  v41 = a1[5];</span><br><span class="line">  v24 = a1[4];</span><br><span class="line">  v20 = a1[15];</span><br><span class="line">  v39 = a1[17];</span><br><span class="line">  v22 = a1[6];</span><br><span class="line">  v18 = a1[9];</span><br><span class="line"> <span class="built_in"> if </span>( v18</span><br><span class="line">     + 201 * v24</span><br><span class="line">     + 194 * v10</span><br><span class="line">     + 142 * v20</span><br><span class="line">     + 114 * v39</span><br><span class="line">     + 103 * v11</span><br><span class="line">     + 52 * (v17 + v31)</span><br><span class="line">     + ((v9 + v23) &lt;&lt; 6)</span><br><span class="line">     + 14 * (v21 + 4 * v25 + v25)</span><br><span class="line">     + 9 * (v40 + 23 * v27 + v2 + 3 * v1 + 4 * v2 + 4 * v6)</span><br><span class="line">     + 5 * (v16 + 23 * v30 + 2 * (v3 + 2 * v19) + 5 * v5 + 39 * v15 + 51 * v4)</span><br><span class="line">     + 24 * (v8 + 10 * v28 + 4 * (v42 + v7 + 2 * v26))</span><br><span class="line">     + 62 * v22</span><br><span class="line">     + 211 * v41</span><br><span class="line">     + 212 * v29 != 296473 )</span><br><span class="line">   <span class="built_in"> return </span>0i64;</span><br><span class="line">  v38 = 2 * v16;</span><br><span class="line"> <span class="built_in"> if </span>( 207 * v41</span><br><span class="line">     + 195 * v22</span><br><span class="line">     + 151 * v40</span><br><span class="line">     + 57 * v5</span><br><span class="line">     + 118 * v6</span><br><span class="line">     + 222 * v42</span><br><span class="line">     + 103 * v7</span><br><span class="line">     + 181 * v8</span><br><span class="line">     + 229 * v9</span><br><span class="line">     + 142 * v31</span><br><span class="line">     + 51 * v29</span><br><span class="line">     + 122 * (v26 + v20)</span><br><span class="line">     + 91 * (v2 + 2 * v16)</span><br><span class="line">     + 107 * (v27 + v25)</span><br><span class="line">     + 81 * (v17 + 2 * v18 + v18)</span><br><span class="line">     + 45 * (v19 + 2 * (v11 + v24) + v11 + v24)</span><br><span class="line">     + 4 * (3 * (v23 + a1[19] + 2 * v23 + 5 * v4) + v39 + 29 * (v10 + v1) + 25 * v15)</span><br><span class="line">     + 26 * v28</span><br><span class="line">     + 101 * v30</span><br><span class="line">     + 154 * v3 != 354358 )</span><br><span class="line">   <span class="built_in"> return </span>0i64;</span><br><span class="line"> <span class="built_in"> if </span>( 177 * v40</span><br><span class="line">     + 129 * v26</span><br><span class="line">     + 117 * v42</span><br><span class="line">     + 143 * v28</span><br><span class="line">     + 65 * v8</span><br><span class="line">     + 137 * v25</span><br><span class="line">     + 215 * v21</span><br><span class="line">     + 93 * v31</span><br><span class="line">     + 235 * v39</span><br><span class="line">     + 203 * v11</span><br><span class="line">     + 15 * (v7 + 17 * v30)</span><br><span class="line">     + 2</span><br><span class="line">     * (v24</span><br><span class="line">      + 91 * v9</span><br><span class="line">      + 95 * v29</span><br><span class="line">      + 51 * v41</span><br><span class="line">      + 81 * v20</span><br><span class="line">      + 92 * v18</span><br><span class="line">      + 112 * (v10 + v6)</span><br><span class="line">      + 32 * (v22 + 2 * (v1 + v23))</span><br><span class="line">      + 6 * (v2 + 14 * v16 + 19 * v15)</span><br><span class="line">      + 83 * v5</span><br><span class="line">      + 53 * v4</span><br><span class="line">      + 123 * v19)</span><br><span class="line">     + v17</span><br><span class="line">     + 175 * v27</span><br><span class="line">     + 183 * v3 == 448573</span><br><span class="line">    &amp;&amp; 113 * v19</span><br><span class="line">     + 74 * v3</span><br><span class="line">     + 238 * v6</span><br><span class="line">     + 140 * v2</span><br><span class="line">     + 214 * v26</span><br><span class="line">     + 242 * v8</span><br><span class="line">     + 160 * v21</span><br><span class="line">     + 136 * v23</span><br><span class="line">     + 209 * v9</span><br><span class="line">     + 220 * v31</span><br><span class="line">     + 50 * v24</span><br><span class="line">     + 125 * v10</span><br><span class="line">     + 175 * v20</span><br><span class="line">     + 23 * v39</span><br><span class="line">     + 137 * v22</span><br><span class="line">     + 149 * v18</span><br><span class="line">     + 83 * (v4 + 2 * v30)</span><br><span class="line">     + 21 * (9 * v29 + v16)</span><br><span class="line">     + 59 * (4 * v27 + v17)</span><br><span class="line">     + 41 * (v1 + v41)</span><br><span class="line">     + 13 * (v7 + 11 * (v40 + v15) + 6 * v42 + 4 * (v28 + 2 * v11) + v28 + 2 * v11 + 17 * v5)</span><br><span class="line">     + 36 * v25 == 384306</span><br><span class="line">    &amp;&amp; 229 * v21</span><br><span class="line">     + 78 * v1</span><br><span class="line">     + v2</span><br><span class="line">     + v9</span><br><span class="line">     + 133 * v27</span><br><span class="line">     + 74 * v6</span><br><span class="line">     + 69 * v26</span><br><span class="line">     + 243 * v7</span><br><span class="line">     + 98 * v28</span><br><span class="line">     + 253 * v8</span><br><span class="line">     + 142 * v25</span><br><span class="line">     + 175 * v31</span><br><span class="line">     + 105 * v41</span><br><span class="line">     + 221 * v10</span><br><span class="line">     + 121 * v39</span><br><span class="line">     + 218 * (v19 + v29)</span><br><span class="line">     + 199 * (v24 + v30)</span><br><span class="line">     + 33 * (v40 + 7 * v17)</span><br><span class="line">     + 4 * (27 * v20 + 50 * v11 + 45 * v18 + 19 * (v3 + v42) + v16 + 16 * v23 + 52 * v4)</span><br><span class="line">     + 195 * v22</span><br><span class="line">     + 211 * v5</span><br><span class="line">     + 153 * v15 == 424240</span><br><span class="line">    &amp;&amp; 181 * v25</span><br><span class="line">     + 61 * v2</span><br><span class="line">     + 65 * v21</span><br><span class="line">     + 58 * v31</span><br><span class="line">     + 170 * v29</span><br><span class="line">     + 143 * v24</span><br><span class="line">     + 185 * v10</span><br><span class="line">     + 86 * v11</span><br><span class="line">     + 97 * v22</span><br><span class="line">     + 235 * (v23 + v27)</span><br><span class="line">     + 3</span><br><span class="line">     * (53 * v41</span><br><span class="line">      + 74 * (v8 + v3)</span><br><span class="line">      + 13 * (v42 + 6 * v9)</span><br><span class="line">      + 11 * (v39 + 7 * v20)</span><br><span class="line">      + 15 * (v18 + 4 * v17)</span><br><span class="line">      + v7</span><br><span class="line">      + 35 * v1</span><br><span class="line">      + 29 * v15)</span><br><span class="line">     + 4 * (57 * v6 + 18 * (v5 + v37) + v28 + 17 * v16 + 55 * v30)</span><br><span class="line">     + 151 * v40</span><br><span class="line">     + 230 * v4</span><br><span class="line">     + 197 * v19 == 421974</span><br><span class="line">    &amp;&amp; (v33 = 2 * v41,</span><br><span class="line">        209 * v21</span><br><span class="line">      + 249 * v30</span><br><span class="line">      + 195 * v2</span><br><span class="line">      + 219 * v25</span><br><span class="line">      + 201 * v39</span><br><span class="line">      + 85 * v18</span><br><span class="line">      + 213 * (v17 + v31)</span><br><span class="line">      + 119 * (v11 + 2 * v41)</span><br><span class="line">      + 29 * (8 * v24 + v40 + 4 * v27 + v27)</span><br><span class="line">      + 2</span><br><span class="line">      * (v8</span><br><span class="line">       + 55 * (2 * v29 + v19)</span><br><span class="line">       + 3 * (v10 + 39 * v9 + 2 * (v6 + 20 * v20) + 35 * v7)</span><br><span class="line">       + 4 * (v5 + 31 * v42 + 28 * v3)</span><br><span class="line">       + 26 * v28</span><br><span class="line">       + 46 * (v37 + v16)</span><br><span class="line">       + 98 * v1)</span><br><span class="line">      + 53 * v23</span><br><span class="line">      + 171 * v15</span><br><span class="line">      + 123 * v4 == 442074)</span><br><span class="line">    &amp;&amp; (v32 = 2 * v18,</span><br><span class="line">        162 * v19</span><br><span class="line">      + 74 * v5</span><br><span class="line">      + 28 * v27</span><br><span class="line">      + 243 * v42</span><br><span class="line">      + 123 * v28</span><br><span class="line">      + 73 * v8</span><br><span class="line">      + 166 * v23</span><br><span class="line">      + 94 * v24</span><br><span class="line">      + 113 * v11</span><br><span class="line">      + 193 * v22</span><br><span class="line">      + 122 * (v6 + 2 * v7)</span><br><span class="line">      + 211 * (v10 + v25)</span><br><span class="line">      + 21 * (v17 + 7 * v41)</span><br><span class="line">      + 11 * (v4 + 23 * (v16 + v39) + 2 * (v40 + 5 * v30 + 2 * (2 * v18 + v29) + 2 * v18 + v29))</span><br><span class="line">      + 5 * (46 * v9 + 26 * v20 + 4 * (v31 + 2 * v21) + v15 + 27 * v2 + 10 * v1)</span><br><span class="line">      + 36 * (v3 + 5 * v26) == 376007)</span><br><span class="line">    &amp;&amp; (v35 = v25 + v30,</span><br><span class="line">        63 * v19</span><br><span class="line">      + 143 * v5</span><br><span class="line">      + 250 * v6</span><br><span class="line">      + 136 * v2</span><br><span class="line">      + 214 * v40</span><br><span class="line">      + 62 * v26</span><br><span class="line">      + 221 * v42</span><br><span class="line">      + 226 * v7</span><br><span class="line">      + 171 * v28</span><br><span class="line">      + 178 * v8</span><br><span class="line">      + 244 * v23</span><br><span class="line">      + (v9 &lt;&lt; 7)</span><br><span class="line">      + 150 * v31</span><br><span class="line">      + 109 * v29</span><br><span class="line">      + 70 * v41</span><br><span class="line">      + 127 * v20</span><br><span class="line">      + 204 * v39</span><br><span class="line">      + 121 * v22</span><br><span class="line">      + 173 * v18</span><br><span class="line">      + 69 * (v25 + v30 + v27)</span><br><span class="line">      + 74 * (v16 + 2 * v15 + v15)</span><br><span class="line">      + 22 * (7 * v24 + v17 + 10 * v11)</span><br><span class="line">      + 40 * (v1 + 4 * v21 + v21)</span><br><span class="line">      + 81 * v10</span><br><span class="line">      + 94 * v4</span><br><span class="line">      + 84 * v3 == 411252)</span><br><span class="line">    &amp;&amp; 229 * v15</span><br><span class="line">     + 121 * v4</span><br><span class="line">     + 28 * v30</span><br><span class="line">     + 206 * v16</span><br><span class="line">     + 145 * v27</span><br><span class="line">     + 41 * v1</span><br><span class="line">     + 247 * v6</span><br><span class="line">     + 118 * v26</span><br><span class="line">     + 241 * v28</span><br><span class="line">     + 79 * v8</span><br><span class="line">     + 102 * v25</span><br><span class="line">     + 124 * v23</span><br><span class="line">     + 65 * v9</span><br><span class="line">     + 68 * v31</span><br><span class="line">     + 239 * v17</span><br><span class="line">     + 148 * v24</span><br><span class="line">     + 245 * v39</span><br><span class="line">     + 115 * v11</span><br><span class="line">     + 163 * v22</span><br><span class="line">     + 137 * v18</span><br><span class="line">     + 53 * (v5 + 2 * v29)</span><br><span class="line">     + 126 * (v40 + 2 * v10)</span><br><span class="line">     + 38 * (v7 + v21 + 4 * v7 + 6 * v41)</span><br><span class="line">     + 12 * (v2 + 16 * v42)</span><br><span class="line">     + 109 * v20</span><br><span class="line">     + 232 * v3</span><br><span class="line">     + 47 * v19 == 435012</span><br><span class="line">    &amp;&amp; 209 * v21</span><br><span class="line">     + 233 * v40</span><br><span class="line">     + 93 * v1</span><br><span class="line">     + 241 * v2</span><br><span class="line">     + 137 * v8</span><br><span class="line">     + 249 * v17</span><br><span class="line">     + 188 * v29</span><br><span class="line">     + 86 * v24</span><br><span class="line">     + 246 * v10</span><br><span class="line">     + 149 * v20</span><br><span class="line">     + 99 * v11</span><br><span class="line">     + 37 * v22</span><br><span class="line">     + 219 * v18</span><br><span class="line">     + 17 * (v6 + 10 * v25)</span><br><span class="line">     + 49 * (v5 + 3 * v3 + 4 * v28 + v28)</span><br><span class="line">     + 5 * (16 * v39 + 11 * (v41 + 2 * v27 + v27) + 12 * v7 + v31 + 30 * v16 + 27 * v19)</span><br><span class="line">     + 18 * (v23 + 2 * (v4 + v26 + 2 * v4) + v4 + v26 + 2 * v4)</span><br><span class="line">     + 24 * v9</span><br><span class="line">     + 109 * v42</span><br><span class="line">     + 183 * v30</span><br><span class="line">     + 154 * v15 == 392484</span><br><span class="line">    &amp;&amp; (v34 = 2 * v31,</span><br><span class="line">        155 * v15</span><br><span class="line">      + 247 * v40</span><br><span class="line">      + 157 * v28</span><br><span class="line">      + 119 * v23</span><br><span class="line">      + 161 * v17</span><br><span class="line">      + 133 * v20</span><br><span class="line">      + 85 * v22</span><br><span class="line">      + 229 * (v7 + v24)</span><br><span class="line">      + 123 * (2 * v31 + v42)</span><br><span class="line">      + 21 * (v41 + 12 * v30)</span><br><span class="line">      + 55 * (v9 + v5 + v18 + 2 * v5)</span><br><span class="line">      + 15 * (v3 + 16 * v10 + 9 * v21)</span><br><span class="line">      + 2</span><br><span class="line">      * (v2</span><br><span class="line">       + 115 * v29</span><br><span class="line">       + 111 * v16</span><br><span class="line">       + 26 * v6</span><br><span class="line">       + 88 * v8</span><br><span class="line">       + 73 * v39</span><br><span class="line">       + 71 * v11</span><br><span class="line">       + 28 * (v26 + 2 * (v25 + 2 * v1))</span><br><span class="line">       + 51 * v27</span><br><span class="line">       + 99 * v4</span><br><span class="line">       + 125 * v19) == 437910)</span><br><span class="line">    &amp;&amp; 220 * v3</span><br><span class="line">     + 200 * v4</span><br><span class="line">     + 139 * v15</span><br><span class="line">     + 33 * v5</span><br><span class="line">     + 212 * v30</span><br><span class="line">     + 191 * v16</span><br><span class="line">     + 30 * v27</span><br><span class="line">     + 233 * v1</span><br><span class="line">     + 246 * v6</span><br><span class="line">     + 89 * v2</span><br><span class="line">     + 252 * v40</span><br><span class="line">     + 223 * v42</span><br><span class="line">     + 19 * v25</span><br><span class="line">     + 141 * v21</span><br><span class="line">     + 163 * v9</span><br><span class="line">     + 185 * v17</span><br><span class="line">     + 136 * v31</span><br><span class="line">     + 46 * v24</span><br><span class="line">     + 109 * v10</span><br><span class="line">     + 217 * v39</span><br><span class="line">     + 75 * v22</span><br><span class="line">     + 157 * v18</span><br><span class="line">     + 125 * (v11 + v19)</span><br><span class="line">     + 104 * (v33 + v20)</span><br><span class="line">     + 43 * (v28 + 2 * v29 + v29)</span><br><span class="line">     + 32 * (v8 + v7 + 2 * v8 + 2 * (v23 + v26)) == 421905</span><br><span class="line">    &amp;&amp; 211 * v24</span><br><span class="line">     + 63 * v15</span><br><span class="line">     + 176 * v5</span><br><span class="line">     + 169 * v16</span><br><span class="line">     + 129 * v27</span><br><span class="line">     + 146 * v40</span><br><span class="line">     + 111 * v26</span><br><span class="line">     + 68 * v42</span><br><span class="line">     + 39 * v25</span><br><span class="line">     + 188 * v23</span><br><span class="line">     + 130 * v9</span><br><span class="line">     + (v31 &lt;&lt; 6)</span><br><span class="line">     + 91 * v41</span><br><span class="line">     + 208 * v20</span><br><span class="line">     + 145 * v39</span><br><span class="line">     + 247 * v18</span><br><span class="line">     + 93 * (v22 + v17)</span><br><span class="line">     + 71 * (v6 + 2 * v11)</span><br><span class="line">     + 103 * (v8 + 2 * v30)</span><br><span class="line">     + 6 * (v21 + 10 * v28 + 28 * v7 + 9 * v29 + 19 * v2 + 24 * v1 + 22 * v3)</span><br><span class="line">     + 81 * v10</span><br><span class="line">     + 70 * v4</span><br><span class="line">     + 23 * v19 == 356282</span><br><span class="line">    &amp;&amp; (v12 = v10 + 2 * (v31 + 4 * (v29 + v17)) + v31 + 4 * (v29 + v17),</span><br><span class="line">        94 * v42</span><br><span class="line">      + 101 * v2</span><br><span class="line">      + 152 * v40</span><br><span class="line">      + 200 * v7</span><br><span class="line">      + 226 * v8</span><br><span class="line">      + 211 * v23</span><br><span class="line">      + 121 * v24</span><br><span class="line">      + 74 * v11</span><br><span class="line">      + 166 * v18</span><br><span class="line">      + ((v6 + 3 * v28) &lt;&lt; 6)</span><br><span class="line">      + 41 * (4 * v9 + v21)</span><br><span class="line">      + 23 * (v39 + 11 * v41)</span><br><span class="line">      + 7 * (v20 + 10 * v25 + 2 * v12 + v12)</span><br><span class="line">      + 3 * (78 * v30 + 81 * v16 + 55 * v27 + 73 * v1 + 4 * v26 + v15 + 85 * v3 + 65 * v19)</span><br><span class="line">      + 62 * v22</span><br><span class="line">      + 88 * v5</span><br><span class="line">      + 110 * v4 == 423091)</span><br><span class="line">    &amp;&amp; 133 * v22</span><br><span class="line">     + 175 * v15</span><br><span class="line">     + 181 * v30</span><br><span class="line">     + 199 * v16</span><br><span class="line">     + 123 * v27</span><br><span class="line">     + 242 * v1</span><br><span class="line">     + 75 * v6</span><br><span class="line">     + 69 * v2</span><br><span class="line">     + 153 * v40</span><br><span class="line">     + 33 * v26</span><br><span class="line">     + 100 * v42</span><br><span class="line">     + 229 * v7</span><br><span class="line">     + 177 * v8</span><br><span class="line">     + 134 * v31</span><br><span class="line">     + 179 * v29</span><br><span class="line">     + 129 * v41</span><br><span class="line">     + 14 * v10</span><br><span class="line">     + 247 * v24</span><br><span class="line">     + 228 * v20</span><br><span class="line">     + 92 * v11</span><br><span class="line">     + 86 * (v9 + v32)</span><br><span class="line">     + 94 * (v23 + v21)</span><br><span class="line">     + 37 * (v17 + 4 * v3)</span><br><span class="line">     + 79 * (v25 + 2 * v28)</span><br><span class="line">     + 72 * v5</span><br><span class="line">     + 93 * v39</span><br><span class="line">     + 152 * v4</span><br><span class="line">     + 214 * v19 == 391869</span><br><span class="line">    &amp;&amp; 211 * v24</span><br><span class="line">     + 213 * v18</span><br><span class="line">     + 197 * v40</span><br><span class="line">     + 159 * v25</span><br><span class="line">     + 117 * v21</span><br><span class="line">     + 119 * v9</span><br><span class="line">     + 98 * v17</span><br><span class="line">     + 218 * v41</span><br><span class="line">     + 106 * v39</span><br><span class="line">     + 69 * v11</span><br><span class="line">     + 43 * (v2 + v29 + 2 * v2)</span><br><span class="line">     + 116 * (v4 + v10 + v37)</span><br><span class="line">     + 5 * (v42 + 9 * v23 + 35 * v20 + 37 * v31)</span><br><span class="line">     + 11 * (v16 + 13 * v27 + 5 * v5 + 8 * v30)</span><br><span class="line">     + 6 * (29 * v28 + 25 * v8 + 38 * v22 + v15 + 13 * v1 + 10 * v3)</span><br><span class="line">     + 136 * v7</span><br><span class="line">     + 142 * v6</span><br><span class="line">     + 141 * v19 == 376566</span><br><span class="line">    &amp;&amp; 173 * v3</span><br><span class="line">     + 109 * v15</span><br><span class="line">     + 61 * v30</span><br><span class="line">     + 187 * v1</span><br><span class="line">     + 79 * v6</span><br><span class="line">     + 53 * v40</span><br><span class="line">     + 184 * v21</span><br><span class="line">     + 43 * v23</span><br><span class="line">     + 41 * v9</span><br><span class="line">     + 166 * v31</span><br><span class="line">     + 193 * v41</span><br><span class="line">     + 58 * v24</span><br><span class="line">     + 146 * v10</span><br><span class="line">     + (v20 &lt;&lt; 6)</span><br><span class="line">     + 89 * v39</span><br><span class="line">     + 121 * v11</span><br><span class="line">     + 5 * (v17 + 23 * v8)</span><br><span class="line">     + 7 * (29 * v18 + v29 + 4 * v7)</span><br><span class="line">     + 13 * (3 * v42 + v16 + 7 * v26 + 13 * v2)</span><br><span class="line">     + 3 * (v4 + 83 * v5 + 51 * v27 + 33 * v22 + 8 * (v19 + 4 * v28) + 18 * v25) == 300934</span><br><span class="line">    &amp;&amp; (v36 = 3 * v21,</span><br><span class="line">        78 * v1</span><br><span class="line">      + 131 * v5</span><br><span class="line">      + 185 * v16</span><br><span class="line">      + 250 * v40</span><br><span class="line">      + 90 * v26</span><br><span class="line">      + 129 * v42</span><br><span class="line">      + 255 * v28</span><br><span class="line">      + 206 * v8</span><br><span class="line">      + 239 * v25</span><br><span class="line">      + 150 * v10</span><br><span class="line">      + 253 * v39</span><br><span class="line">      + 104 * v22</span><br><span class="line">      + 58 * (v2 + 2 * v7)</span><br><span class="line">      + 96 * (v15 + v31)</span><br><span class="line">      + 117 * (v9 + 2 * v4)</span><br><span class="line">      + 27 * (v17 + 8 * v18 + v18)</span><br><span class="line">      + 19 * (v23 + 3 * v21 + 4 * v29 + v29)</span><br><span class="line">      + 7 * (22 * v41 + 3 * (v11 + 11 * v24) + v3 + 29 * v6 + 14 * v27)</span><br><span class="line">      + 109 * v20</span><br><span class="line">      + 102 * v30</span><br><span class="line">      + 100 * v19 == 401351)</span><br><span class="line">    &amp;&amp; 233 * v19</span><br><span class="line">     + 71 * v5</span><br><span class="line">     + 209 * v27</span><br><span class="line">     + 82 * v6</span><br><span class="line">     + 58 * v26</span><br><span class="line">     + 53 * v25</span><br><span class="line">     + 113 * v23</span><br><span class="line">     + 206 * v31</span><br><span class="line">     + 39 * v41</span><br><span class="line">     + 163 * v20</span><br><span class="line">     + 222 * v11</span><br><span class="line">     + 191 * v18</span><br><span class="line">     + 123 * (v7 + v40)</span><br><span class="line">     + 69 * (v9 + 2 * v22 + v22)</span><br><span class="line">     + 9 * (v3 + 8 * v24 + 7 * (3 * v1 + v28) + 5 * v16 + 19 * v30)</span><br><span class="line">     + 4 * (v15 + 26 * v17 + 61 * v29 + 43 * v42 + 49 * v2 + 32 * v4)</span><br><span class="line">     + 10 * (7 * (v8 + v36) + v39 + 12 * v10) == 368427</span><br><span class="line">    &amp;&amp; 139 * v30</span><br><span class="line">     + 53 * v5</span><br><span class="line">     + 158 * v16</span><br><span class="line">     + 225 * v1</span><br><span class="line">     + 119 * v6</span><br><span class="line">     + 67 * v2</span><br><span class="line">     + 213 * v40</span><br><span class="line">     + 188 * v28</span><br><span class="line">     + 152 * v8</span><br><span class="line">     + 187 * v21</span><br><span class="line">     + 129 * v23</span><br><span class="line">     + 54 * v9</span><br><span class="line">     + 125 * v17</span><br><span class="line">     + 170 * v24</span><br><span class="line">     + 184 * v11</span><br><span class="line">     + 226 * v22</span><br><span class="line">     + 253 * v18</span><br><span class="line">     + 26 * (v29 + v41)</span><br><span class="line">     + 97 * (v4 + 2 * v25)</span><br><span class="line">     + 39 * (5 * v26 + v27)</span><br><span class="line">     + 21 * (v39 + 8 * v42)</span><br><span class="line">     + 12 * (17 * v10 + v31 + 15 * v7 + 12 * v19)</span><br><span class="line">     + 165 * v20</span><br><span class="line">     + 88 * v15</span><br><span class="line">     + 157 * v3 == 403881</span><br><span class="line">    &amp;&amp; 114 * v3</span><br><span class="line">     + 61 * v27</span><br><span class="line">     + 134 * v40</span><br><span class="line">     + 62 * v42</span><br><span class="line">     + 89 * v9</span><br><span class="line">     + 211 * v17</span><br><span class="line">     + 163 * v41</span><br><span class="line">     + 66 * v24</span><br><span class="line">     + 201 * (v7 + v18)</span><br><span class="line">     + 47 * (5 * v16 + v22)</span><br><span class="line">     + 74 * (v4 + v31)</span><br><span class="line">     + 142 * (v2 + v28)</span><br><span class="line">     + 35 * (v20 + 6 * v26)</span><br><span class="line">     + 39 * (v15 + 6 * v30)</span><br><span class="line">     + 27 * (v25 + 9 * v23 + 8 * v6)</span><br><span class="line">     + 4 * (v21 + 63 * v19 + 2 * (v1 + 12 * (v10 + v5) + 8 * v11 + 26 * v29))</span><br><span class="line">     + 10 * (v8 + 4 * v39 + v39) == 382979</span><br><span class="line">    &amp;&amp; 122 * v25</span><br><span class="line">     + 225 * v21</span><br><span class="line">     + 52 * v23</span><br><span class="line">     + 253 * v9</span><br><span class="line">     + 197 * v17</span><br><span class="line">     + 187 * v31</span><br><span class="line">     + 181 * v29</span><br><span class="line">     + 183 * v41</span><br><span class="line">     + 47 * v20</span><br><span class="line">     + 229 * v39</span><br><span class="line">     + 88 * v22</span><br><span class="line">     + 127 * (v10 + v32)</span><br><span class="line">     + 37 * (v7 + 3 * v3)</span><br><span class="line">     + ((v11 + 2 * v30 + v30) &lt;&lt; 6)</span><br><span class="line">     + 7 * (21 * v8 + v27 + 18 * (v4 + v1 + v38))</span><br><span class="line">     + 6 * (23 * v24 + v26 + 17 * v2 + 39 * v6)</span><br><span class="line">     + 10 * (v5 + 11 * v28 + 21 * v42)</span><br><span class="line">     + 149 * v19</span><br><span class="line">     + 165 * v40</span><br><span class="line">     + 121 * v15 == 435695</span><br><span class="line">    &amp;&amp; 165 * v20</span><br><span class="line">     + 223 * v4</span><br><span class="line">     + 249 * v5</span><br><span class="line">     + 199 * v1</span><br><span class="line">     + 135 * v2</span><br><span class="line">     + 133 * v26</span><br><span class="line">     + 254 * v42</span><br><span class="line">     + 111 * v7</span><br><span class="line">     + 189 * v28</span><br><span class="line">     + 221 * v25</span><br><span class="line">     + 115 * v21</span><br><span class="line">     + 186 * v9</span><br><span class="line">     + 79 * v41</span><br><span class="line">     + 217 * v24</span><br><span class="line">     + 122 * v11</span><br><span class="line">     + 38 * v18</span><br><span class="line">     + 109 * (v34 + v29)</span><br><span class="line">     + 14 * (v8 + 17 * v40 + 8 * (v6 + v38))</span><br><span class="line">     + 4 * (11 * (5 * v30 + v39) + 6 * (v10 + 2 * v22) + v27 + 52 * v17 + 50 * v23)</span><br><span class="line">     + 229 * v15</span><br><span class="line">     + 86 * v3</span><br><span class="line">     + 234 * v19 == 453748</span><br><span class="line">    &amp;&amp; 181 * v25</span><br><span class="line">     + 94 * v42</span><br><span class="line">     + 125 * v1</span><br><span class="line">     + 226 * v26</span><br><span class="line">     + 155 * v7</span><br><span class="line">     + 95 * v21</span><br><span class="line">     + 212 * v17</span><br><span class="line">     + 91 * v31</span><br><span class="line">     + 194 * v29</span><br><span class="line">     + 98 * v24</span><br><span class="line">     + 166 * v11</span><br><span class="line">     + 120 * v22</span><br><span class="line">     + 59 * v18</span><br><span class="line">     + 32 * (v9 + v8)</span><br><span class="line">     + 158 * (v6 + v5)</span><br><span class="line">     + 101 * (v41 + v19)</span><br><span class="line">     + 63 * (v4 + 2 * v23)</span><br><span class="line">     + 67 * (v28 + 2 * v20)</span><br><span class="line">     + 11 * (v39 + 10 * v16 + 11 * v10)</span><br><span class="line">     + 39 * (v30 + 4 * (v2 + v15))</span><br><span class="line">     + 233 * v40</span><br><span class="line">     + 56 * v27</span><br><span class="line">     + 225 * v3 == 358321</span><br><span class="line">    &amp;&amp; 229 * v21</span><br><span class="line">     + 135 * v4</span><br><span class="line">     + 197 * v15</span><br><span class="line">     + 118 * v5</span><br><span class="line">     + 143 * v16</span><br><span class="line">     + 134 * v6</span><br><span class="line">     + 204 * v40</span><br><span class="line">     + 173 * v26</span><br><span class="line">     + 81 * v7</span><br><span class="line">     + 60 * v28</span><br><span class="line">     + 58 * v8</span><br><span class="line">     + 179 * v23</span><br><span class="line">     + 142 * v9</span><br><span class="line">     + 178 * v17</span><br><span class="line">     + 230 * v31</span><br><span class="line">     + 148 * v29</span><br><span class="line">     + 224 * v41</span><br><span class="line">     + 194 * v24</span><br><span class="line">     + 223 * v10</span><br><span class="line">     + 87 * v20</span><br><span class="line">     + 200 * v39</span><br><span class="line">     + 233 * v11</span><br><span class="line">     + 49 * v22</span><br><span class="line">     + 127 * v35</span><br><span class="line">     + 31 * (4 * v27 + v18)</span><br><span class="line">     + 42 * (v1 + 6 * v2)</span><br><span class="line">     + 109 * v42</span><br><span class="line">     + 75 * v3</span><br><span class="line">     + 165 * v19 == 456073</span><br><span class="line">    &amp;&amp; 41 * v4</span><br><span class="line">     + 253 * v3</span><br><span class="line">     + 163 * v15</span><br><span class="line">     + 193 * v30</span><br><span class="line">     + 155 * v16</span><br><span class="line">     + 113 * v27</span><br><span class="line">     + 131 * v6</span><br><span class="line">     + 55 * v2</span><br><span class="line">     + 21 * v40</span><br><span class="line">     + 53 * v26</span><br><span class="line">     + 13 * v8</span><br><span class="line">     + 201 * v25</span><br><span class="line">     + 237 * v9</span><br><span class="line">     + 223 * v31</span><br><span class="line">     + 95 * v24</span><br><span class="line">     + 194 * v20</span><br><span class="line">     + 62 * v39</span><br><span class="line">     + 119 * v11</span><br><span class="line">     + 171 * v22</span><br><span class="line">     + 135 * v18</span><br><span class="line">     + 69 * (v10 + 3 * v28)</span><br><span class="line">     + 211 * (v1 + v29)</span><br><span class="line">     + 4 * (43 * v7 + v42 + 40 * v17)</span><br><span class="line">     + 6 * (v5 + 33 * v41 + 20 * (2 * v19 + v21) + 24 * v23) == 407135</span><br><span class="line">    &amp;&amp; (v13 = v6 + v1 + 8 * v6 + 4 * (v8 + 2 * v27),</span><br><span class="line">        111 * v19</span><br><span class="line">      + 190 * v3</span><br><span class="line">      + 149 * v4</span><br><span class="line">      + 173 * v28</span><br><span class="line">      + 118 * v23</span><br><span class="line">      + 146 * v29</span><br><span class="line">      + 179 * v10</span><br><span class="line">      + 51 * v20</span><br><span class="line">      + 49 * v39</span><br><span class="line">      + 61 * v11</span><br><span class="line">      + 125 * v22</span><br><span class="line">      + 162 * v18</span><br><span class="line">      + 214 * v35</span><br><span class="line">      + 14 * (v34 + v24)</span><br><span class="line">      + 178 * (v41 + v16)</span><br><span class="line">      + 11 * (4 * v9 + v21 + 17 * v42)</span><br><span class="line">      + 65 * (v26 + v17 + 2 * v26 + 2 * v5)</span><br><span class="line">      + 4 * (v7 + 38 * v15 + 4 * v13 + v13 + 8 * v40 + 43 * v2) == 369835)</span><br><span class="line">    &amp;&amp; 27 * v27</span><br><span class="line">     + 223 * v6</span><br><span class="line">     + 147 * v26</span><br><span class="line">     + 13 * v21</span><br><span class="line">     + 35 * (v17 + 7 * v4)</span><br><span class="line">     + 57 * (v19 + v32 + 3 * v11)</span><br><span class="line">     + 11 * (v1 + 17 * (v9 + v5) + 10 * v16 + 3 * v31)</span><br><span class="line">     + 2</span><br><span class="line">     * (53 * v23</span><br><span class="line">      + v25</span><br><span class="line">      + 38 * v15</span><br><span class="line">      + 43 * v42</span><br><span class="line">      + 115 * v29</span><br><span class="line">      + 61 * v22</span><br><span class="line">      + 111 * (v10 + v40)</span><br><span class="line">      + 14 * (v20 + v7 + 2 * v7 + 8 * v28)</span><br><span class="line">      + 109 * v2</span><br><span class="line">      + 100 * v41</span><br><span class="line">      + 63 * v8)</span><br><span class="line">     + 93 * v39</span><br><span class="line">     + 251 * v30</span><br><span class="line">     + 131 * v3 == 393303</span><br><span class="line">    &amp;&amp; 116 * v9</span><br><span class="line">     + 152 * v29</span><br><span class="line">     + 235 * v20</span><br><span class="line">     + 202 * v18</span><br><span class="line">     + 85 * (v8 + 3 * v11)</span><br><span class="line">     + 221 * (v16 + v40)</span><br><span class="line">     + 125 * (v33 + v24)</span><br><span class="line">     + 7 * (19 * v4 + 9 * (v10 + 2 * v25) + v2 + 33 * v3 + 32 * v19)</span><br><span class="line">     + 3 * (71 * v39 + 43 * v22 + 32 * (v17 + v26) + 15 * (v5 + v6 + 2 * v23) + v28 + 74 * v31 + 48 * v42)</span><br><span class="line">     + 10 * (v21 + 11 * v30 + 16 * v15)</span><br><span class="line">     + 136 * v7</span><br><span class="line">     + 106 * v1</span><br><span class="line">     + 41 * v27 == 403661</span><br><span class="line">    &amp;&amp; 127 * v4</span><br><span class="line">     + 106 * v15</span><br><span class="line">     + 182 * v30</span><br><span class="line">     + 142 * v5</span><br><span class="line">     + 159 * v16</span><br><span class="line">     + 17 * v1</span><br><span class="line">     + 211 * v6</span><br><span class="line">     + 134 * v2</span><br><span class="line">     + 199 * v7</span><br><span class="line">     + 103 * v28</span><br><span class="line">     + 247 * v23</span><br><span class="line">     + 122 * v9</span><br><span class="line">     + 95 * v41</span><br><span class="line">     + 62 * v10</span><br><span class="line">     + 203 * v39</span><br><span class="line">     + 16 * v11</span><br><span class="line">     + 41 * (6 * v42 + v25)</span><br><span class="line">     + 9 * (22 * v24 + v20 + 27 * v31 + 28 * v40)</span><br><span class="line">     + 10 * (v8 + v22 + v36 + 8 * v17 + 2 * (v22 + v36 + 8 * v17) + 13 * v29)</span><br><span class="line">     + 6 * (23 * v27 + v26)</span><br><span class="line">     + 213 * v18</span><br><span class="line">     + 179 * v3</span><br><span class="line">     + 43 * v19 == 418596 )</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="built_in"> return </span>149 * v19</span><br><span class="line">         + v1</span><br><span class="line">         + 133 * v22</span><br><span class="line">         + 207 * v41</span><br><span class="line">         + 182 * v26</span><br><span class="line">         + 234 * v7</span><br><span class="line">         + 199 * v8</span><br><span class="line">         + 168 * v21</span><br><span class="line">         + 58 * v10</span><br><span class="line">         + 108 * v20</span><br><span class="line">         + 142 * v18</span><br><span class="line">         + 156 * (v9 + v25)</span><br><span class="line">         + 16 * (v29 + 6 * v31)</span><br><span class="line">         + 126 * (v17 + 2 * v39)</span><br><span class="line">         + 127 * (v4 + 2 * v27 + v40)</span><br><span class="line">         + 49 * (v30 + 4 * v16)</span><br><span class="line">         + 11 * (v5 + 22 * v11)</span><br><span class="line">         + 5 * (v15 + v42 + 45 * v24 + 50 * v28)</span><br><span class="line">         + 109 * v2</span><br><span class="line">         + 124 * v6</span><br><span class="line">         + 123 * v3 == 418697;</span><br><span class="line">  &#125;</span><br><span class="line">  else</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="built_in"> return </span>0i64;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个巨长的函数，但是是一个多项式方程，直接Z3：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line">from z3 import *</span><br><span class="line"></span><br><span class="line">a1 = [BitVec(&#x27;a[%d]&#x27; % i, 8) for i in range(32)]</span><br><span class="line">v1 = a1[25] </span><br><span class="line">v2 = a1[21] </span><br><span class="line">v3 = a1[31] </span><br><span class="line">v4 = a1[29] </span><br><span class="line">v5 = a1[0] </span><br><span class="line">v6 = a1[23] </span><br><span class="line">v7 = a1[8] </span><br><span class="line">v8 = a1[28] </span><br><span class="line">v9 = a1[12] </span><br><span class="line">v10 = a1[3] </span><br><span class="line">v11 = a1[2] </span><br><span class="line">v19 = a1[30] </span><br><span class="line">v15 = a1[18] </span><br><span class="line">v16 = a1[24] </span><br><span class="line">v27 = a1[11] </span><br><span class="line">v17 = a1[26] </span><br><span class="line">v30 = a1[14] </span><br><span class="line">v40 = a1[7] </span><br><span class="line">v26 = a1[20] </span><br><span class="line">v37 = 2 * a1[20] </span><br><span class="line">v42 = a1[22] </span><br><span class="line">v28 = a1[1] </span><br><span class="line">v25 = a1[27] </span><br><span class="line">v21 = a1[19] </span><br><span class="line">v23 = a1[16] </span><br><span class="line">v31 = a1[13] </span><br><span class="line">v29 = a1[10] </span><br><span class="line">v41 = a1[5] </span><br><span class="line">v24 = a1[4] </span><br><span class="line">v20 = a1[15] </span><br><span class="line">v39 = a1[17] </span><br><span class="line">v22 = a1[6] </span><br><span class="line">v18 = a1[9] </span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line"></span><br><span class="line">for a in a1:</span><br><span class="line">    s.add(a &gt;= 32, a &lt;= 126)</span><br><span class="line">s.add(a1[0]==ord(&#x27;h&#x27;))</span><br><span class="line">s.add(a1[1]==ord(&#x27;g&#x27;))</span><br><span class="line">s.add(a1[2]==ord(&#x27;a&#x27;))</span><br><span class="line">s.add(a1[3]==ord(&#x27;m&#x27;))</span><br><span class="line">s.add(a1[4]==ord(&#x27;e&#x27;))</span><br><span class="line">s.add(a1[5]==ord(&#x27;&#123;&#x27;))</span><br><span class="line">s.add(a1[31]==ord(&#x27;&#125;&#x27;))</span><br><span class="line"></span><br><span class="line">s.add( v18 + 201 * v24 + 194 * v10 + 142 * v20 + 114 * v39 + 103 * v11 + 52 * (v17 + v31) + ((v9 + v23) &lt;&lt; 6) + 14 * (v21 + 4 * v25 + v25) + 9 * (v40 + 23 * v27 + v2 + 3 * v1 + 4 * v2 + 4 * v6) + 5 * (v16 + 23 * v30 + 2 * (v3 + 2 * v19) + 5 * v5 + 39 * v15 + 51 * v4) + 24 * (v8 + 10 * v28 + 4 * (v42 + v7 + 2 * v26)) + 62 * v22 + 211 * v41 + 212 * v29 == 296473)</span><br><span class="line"></span><br><span class="line">v38 = 2 * v16</span><br><span class="line"></span><br><span class="line">s.add( 207 * v41 + 195 * v22 + 151 * v40 + 57 * v5 + 118 * v6 + 222 * v42 + 103 * v7 + 181 * v8 + 229 * v9 + 142 * v31 + 51 * v29 + 122 * (v26 + v20) + 91 * (v2 + 2 * v16) + 107 * (v27 + v25) + 81 * (v17 + 2 * v18 + v18) + 45 * (v19 + 2 * (v11 + v24) + v11 + v24) + 4 * (3 * (v23 + a1[19] + 2 * v23 + 5 * v4) + v39 + 29 * (v10 + v1) + 25 * v15) + 26 * v28 + 101 * v30 + 154 * v3 == 354358 )</span><br><span class="line"></span><br><span class="line">s.add( 207 * v41 + 195 * v22 + 151 * v40 + 57 * v5 + 118 * v6 + 222 * v42 + 103 * v7 + 181 * v8 + 229 * v9 + 142 * v31 + 51 * v29 + 122 * (v26 + v20) + 91 * (v2 + 2 * v16) + 107 * (v27 + v25) + 81 * (v17 + 2 * v18 + v18) + 45 * (v19 + 2 * (v11 + v24) + v11 + v24) + 4 * (3 * (v23 + a1[19] + 2 * v23 + 5 * v4) + v39 + 29 * (v10 + v1) + 25 * v15) + 26 * v28 + 101 * v30 + 154 * v3 == 354358 )</span><br><span class="line"></span><br><span class="line">s.add( 177 * v40 + 129 * v26 + 117 * v42 + 143 * v28 + 65 * v8 + 137 * v25 + 215 * v21 + 93 * v31 + 235 * v39 + 203 * v11 + 15 * (v7 + 17 * v30) + 2 * (v24  + 91 * v9  + 95 * v29  + 51 * v41  + 81 * v20  + 92 * v18  + 112 * (v10 + v6)  + 32 * (v22 + 2 * (v1 + v23))  + 6 * (v2 + 14 * v16 + 19 * v15)  + 83 * v5  + 53 * v4  + 123 * v19) + v17 + 175 * v27 + 183 * v3 == 448573)</span><br><span class="line">s.add(113 * v19 + 74 * v3 + 238 * v6 + 140 * v2 + 214 * v26 + 242 * v8 + 160 * v21 + 136 * v23 + 209 * v9 + 220 * v31 + 50 * v24 + 125 * v10 + 175 * v20 + 23 * v39 + 137 * v22 + 149 * v18 + 83 * (v4 + 2 * v30) + 21 * (9 * v29 + v16) + 59 * (4 * v27 + v17) + 41 * (v1 + v41) + 13 * (v7 + 11 * (v40 + v15) + 6 * v42 + 4 * (v28 + 2 * v11) + v28 + 2 * v11 + 17 * v5) + 36 * v25 == 384306)</span><br><span class="line">s.add( 229 * v21 + 78 * v1 + v2 + v9 + 133 * v27 + 74 * v6 + 69 * v26 + 243 * v7 + 98 * v28 + 253 * v8 + 142 * v25 + 175 * v31 + 105 * v41 + 221 * v10 + 121 * v39 + 218 * (v19 + v29) + 199 * (v24 + v30) + 33 * (v40 + 7 * v17) + 4 * (27 * v20 + 50 * v11 + 45 * v18 + 19 * (v3 + v42) + v16 + 16 * v23 + 52 * v4) + 195 * v22 + 211 * v5 + 153 * v15 == 424240)</span><br><span class="line">s.add( 181 * v25 + 61 * v2 + 65 * v21 + 58 * v31 + 170 * v29 + 143 * v24 + 185 * v10 + 86 * v11 + 97 * v22 + 235 * (v23 + v27) + 3 * (53 * v41  + 74 * (v8 + v3)  + 13 * (v42 + 6 * v9)  + 11 * (v39 + 7 * v20)  + 15 * (v18 + 4 * v17)  + v7  + 35 * v1  + 29 * v15) + 4 * (57 * v6 + 18 * (v5 + v37) + v28 + 17 * v16 + 55 * v30) + 151 * v40 + 230 * v4 + 197 * v19 == 421974)</span><br><span class="line">v33 = 2 * v41</span><br><span class="line">s.add(    209 * v21  + 249 * v30  + 195 * v2  + 219 * v25  + 201 * v39  + 85 * v18  + 213 * (v17 + v31)  + 119 * (v11 + 2 * v41)  + 29 * (8 * v24 + v40 + 4 * v27 + v27)  + 2  * (v8   + 55 * (2 * v29 + v19)   + 3 * (v10 + 39 * v9 + 2 * (v6 + 20 * v20) + 35 * v7)   + 4 * (v5 + 31 * v42 + 28 * v3)   + 26 * v28   + 46 * (v37 + v16)   + 98 * v1)  + 53 * v23  + 171 * v15  + 123 * v4 == 442074)</span><br><span class="line">v32 = 2 * v18</span><br><span class="line">s.add(162 * v19  + 74 * v5  + 28 * v27  + 243 * v42  + 123 * v28  + 73 * v8  + 166 * v23  + 94 * v24  + 113 * v11  + 193 * v22  + 122 * (v6 + 2 * v7)  + 211 * (v10 + v25)  + 21 * (v17 + 7 * v41)  + 11 * (v4 + 23 * (v16 + v39) + 2 * (v40 + 5 * v30 + 2 * (2 * v18 + v29) + 2 * v18 + v29))  + 5 * (46 * v9 + 26 * v20 + 4 * (v31 + 2 * v21) + v15 + 27 * v2 + 10 * v1)  + 36 * (v3 + 5 * v26) == 376007)</span><br><span class="line">v35 = v25 + v30</span><br><span class="line">s.add(63 * v19  + 143 * v5  + 250 * v6  + 136 * v2  + 214 * v40  + 62 * v26  + 221 * v42  + 226 * v7  + 171 * v28  + 178 * v8  + 244 * v23  + (v9 &lt;&lt; 7)  + 150 * v31  + 109 * v29  + 70 * v41  + 127 * v20  + 204 * v39  + 121 * v22  + 173 * v18  + 69 * (v25 + v30 + v27)  + 74 * (v16 + 2 * v15 + v15)  + 22 * (7 * v24 + v17 + 10 * v11)  + 40 * (v1 + 4 * v21 + v21)  + 81 * v10  + 94 * v4  + 84 * v3 == 411252)</span><br><span class="line">s.add(229 * v15 + 121 * v4 + 28 * v30 + 206 * v16 + 145 * v27 + 41 * v1 + 247 * v6 + 118 * v26 + 241 * v28 + 79 * v8 + 102 * v25 + 124 * v23 + 65 * v9 + 68 * v31 + 239 * v17 + 148 * v24 + 245 * v39 + 115 * v11 + 163 * v22 + 137 * v18 + 53 * (v5 + 2 * v29) + 126 * (v40 + 2 * v10) + 38 * (v7 + v21 + 4 * v7 + 6 * v41) + 12 * (v2 + 16 * v42) + 109 * v20 + 232 * v3 + 47 * v19 == 435012)</span><br><span class="line">s.add(209 * v21 + 233 * v40 + 93 * v1 + 241 * v2 + 137 * v8 + 249 * v17 + 188 * v29 + 86 * v24 + 246 * v10 + 149 * v20 + 99 * v11 + 37 * v22 + 219 * v18 + 17 * (v6 + 10 * v25) + 49 * (v5 + 3 * v3 + 4 * v28 + v28) + 5 * (16 * v39 + 11 * (v41 + 2 * v27 + v27) + 12 * v7 + v31 + 30 * v16 + 27 * v19) + 18 * (v23 + 2 * (v4 + v26 + 2 * v4) + v4 + v26 + 2 * v4) + 24 * v9 + 109 * v42 + 183 * v30 + 154 * v15 == 392484)</span><br><span class="line">v34 = 2 * v31</span><br><span class="line">s.add(155 * v15  + 247 * v40  + 157 * v28  + 119 * v23  + 161 * v17  + 133 * v20  + 85 * v22  + 229 * (v7 + v24)  + 123 * (2 * v31 + v42)  + 21 * (v41 + 12 * v30)  + 55 * (v9 + v5 + v18 + 2 * v5)  + 15 * (v3 + 16 * v10 + 9 * v21)  + 2  * (v2   + 115 * v29   + 111 * v16   + 26 * v6   + 88 * v8   + 73 * v39   + 71 * v11   + 28 * (v26 + 2 * (v25 + 2 * v1))   + 51 * v27   + 99 * v4   + 125 * v19) == 437910)</span><br><span class="line">s.add(220 * v3 + 200 * v4 + 139 * v15 + 33 * v5 + 212 * v30 + 191 * v16 + 30 * v27 + 233 * v1 + 246 * v6 + 89 * v2 + 252 * v40 + 223 * v42 + 19 * v25 + 141 * v21 + 163 * v9 + 185 * v17 + 136 * v31 + 46 * v24 + 109 * v10 + 217 * v39 + 75 * v22 + 157 * v18 + 125 * (v11 + v19) + 104 * (v33 + v20) + 43 * (v28 + 2 * v29 + v29) + 32 * (v8 + v7 + 2 * v8 + 2 * (v23 + v26)) == 421905)</span><br><span class="line">s.add(211 * v24 + 63 * v15 + 176 * v5 + 169 * v16 + 129 * v27 + 146 * v40 + 111 * v26 + 68 * v42 + 39 * v25 + 188 * v23 + 130 * v9 + (v31 &lt;&lt; 6) + 91 * v41 + 208 * v20 + 145 * v39 + 247 * v18 + 93 * (v22 + v17) + 71 * (v6 + 2 * v11) + 103 * (v8 + 2 * v30) + 6 * (v21 + 10 * v28 + 28 * v7 + 9 * v29 + 19 * v2 + 24 * v1 + 22 * v3) + 81 * v10 + 70 * v4 + 23 * v19 == 356282)</span><br><span class="line">v12 = v10 + 2 * (v31 + 4 * (v29 + v17)) + v31 + 4 * (v29 + v17)</span><br><span class="line">s.add(94 * v42  + 101 * v2  + 152 * v40  + 200 * v7  + 226 * v8  + 211 * v23  + 121 * v24  + 74 * v11  + 166 * v18  + ((v6 + 3 * v28) &lt;&lt; 6)  + 41 * (4 * v9 + v21)  + 23 * (v39 + 11 * v41)  + 7 * (v20 + 10 * v25 + 2 * v12 + v12)  + 3 * (78 * v30 + 81 * v16 + 55 * v27 + 73 * v1 + 4 * v26 + v15 + 85 * v3 + 65 * v19)  + 62 * v22  + 88 * v5  + 110 * v4 == 423091)</span><br><span class="line">s.add(133 * v22 + 175 * v15 + 181 * v30 + 199 * v16 + 123 * v27 + 242 * v1 + 75 * v6 + 69 * v2 + 153 * v40 + 33 * v26 + 100 * v42 + 229 * v7 + 177 * v8 + 134 * v31 + 179 * v29 + 129 * v41 + 14 * v10 + 247 * v24 + 228 * v20 + 92 * v11 + 86 * (v9 + v32) + 94 * (v23 + v21) + 37 * (v17 + 4 * v3) + 79 * (v25 + 2 * v28) + 72 * v5 + 93 * v39 + 152 * v4 + 214 * v19 == 391869)</span><br><span class="line">s.add(211 * v24 + 213 * v18 + 197 * v40 + 159 * v25 + 117 * v21 + 119 * v9 + 98 * v17 + 218 * v41 + 106 * v39 + 69 * v11 + 43 * (v2 + v29 + 2 * v2) + 116 * (v4 + v10 + v37) + 5 * (v42 + 9 * v23 + 35 * v20 + 37 * v31) + 11 * (v16 + 13 * v27 + 5 * v5 + 8 * v30) + 6 * (29 * v28 + 25 * v8 + 38 * v22 + v15 + 13 * v1 + 10 * v3) + 136 * v7 + 142 * v6 + 141 * v19 == 376566)</span><br><span class="line">s.add(173 * v3 + 109 * v15 + 61 * v30 + 187 * v1 + 79 * v6 + 53 * v40 + 184 * v21 + 43 * v23 + 41 * v9 + 166 * v31 + 193 * v41 + 58 * v24 + 146 * v10 + (v20 &lt;&lt; 6) + 89 * v39 + 121 * v11 + 5 * (v17 + 23 * v8) + 7 * (29 * v18 + v29 + 4 * v7) + 13 * (3 * v42 + v16 + 7 * v26 + 13 * v2) + 3 * (v4 + 83 * v5 + 51 * v27 + 33 * v22 + 8 * (v19 + 4 * v28) + 18 * v25) == 300934)</span><br><span class="line">v36 = 3 * v21</span><br><span class="line">s.add(78 * v1  + 131 * v5  + 185 * v16  + 250 * v40  + 90 * v26  + 129 * v42  + 255 * v28  + 206 * v8  + 239 * v25  + 150 * v10  + 253 * v39  + 104 * v22  + 58 * (v2 + 2 * v7)  + 96 * (v15 + v31)  + 117 * (v9 + 2 * v4)  + 27 * (v17 + 8 * v18 + v18)  + 19 * (v23 + 3 * v21 + 4 * v29 + v29)  + 7 * (22 * v41 + 3 * (v11 + 11 * v24) + v3 + 29 * v6 + 14 * v27)  + 109 * v20  + 102 * v30  + 100 * v19 == 401351)</span><br><span class="line">s.add(233 * v19 + 71 * v5 + 209 * v27 + 82 * v6 + 58 * v26 + 53 * v25 + 113 * v23 + 206 * v31 + 39 * v41 + 163 * v20 + 222 * v11 + 191 * v18 + 123 * (v7 + v40) + 69 * (v9 + 2 * v22 + v22) + 9 * (v3 + 8 * v24 + 7 * (3 * v1 + v28) + 5 * v16 + 19 * v30) + 4 * (v15 + 26 * v17 + 61 * v29 + 43 * v42 + 49 * v2 + 32 * v4) + 10 * (7 * (v8 + v36) + v39 + 12 * v10) == 368427)</span><br><span class="line">s.add(139 * v30 + 53 * v5 + 158 * v16 + 225 * v1 + 119 * v6 + 67 * v2 + 213 * v40 + 188 * v28 + 152 * v8 + 187 * v21 + 129 * v23 + 54 * v9 + 125 * v17 + 170 * v24 + 184 * v11 + 226 * v22 + 253 * v18 + 26 * (v29 + v41) + 97 * (v4 + 2 * v25) + 39 * (5 * v26 + v27) + 21 * (v39 + 8 * v42) + 12 * (17 * v10 + v31 + 15 * v7 + 12 * v19) + 165 * v20 + 88 * v15 + 157 * v3 == 403881)</span><br><span class="line">s.add(114 * v3 + 61 * v27 + 134 * v40 + 62 * v42 + 89 * v9 + 211 * v17 + 163 * v41 + 66 * v24 + 201 * (v7 + v18) + 47 * (5 * v16 + v22) + 74 * (v4 + v31) + 142 * (v2 + v28) + 35 * (v20 + 6 * v26) + 39 * (v15 + 6 * v30) + 27 * (v25 + 9 * v23 + 8 * v6) + 4 * (v21 + 63 * v19 + 2 * (v1 + 12 * (v10 + v5) + 8 * v11 + 26 * v29)) + 10 * (v8 + 4 * v39 + v39) == 382979)</span><br><span class="line">s.add(122 * v25 + 225 * v21 + 52 * v23 + 253 * v9 + 197 * v17 + 187 * v31 + 181 * v29 + 183 * v41 + 47 * v20 + 229 * v39 + 88 * v22 + 127 * (v10 + v32) + 37 * (v7 + 3 * v3) + ((v11 + 2 * v30 + v30) &lt;&lt; 6) + 7 * (21 * v8 + v27 + 18 * (v4 + v1 + v38)) + 6 * (23 * v24 + v26 + 17 * v2 + 39 * v6) + 10 * (v5 + 11 * v28 + 21 * v42) + 149 * v19 + 165 * v40 + 121 * v15 == 435695)</span><br><span class="line">s.add(165 * v20 + 223 * v4 + 249 * v5 + 199 * v1 + 135 * v2 + 133 * v26 + 254 * v42 + 111 * v7 + 189 * v28 + 221 * v25 + 115 * v21 + 186 * v9 + 79 * v41 + 217 * v24 + 122 * v11 + 38 * v18 + 109 * (v34 + v29) + 14 * (v8 + 17 * v40 + 8 * (v6 + v38)) + 4 * (11 * (5 * v30 + v39) + 6 * (v10 + 2 * v22) + v27 + 52 * v17 + 50 * v23) + 229 * v15 + 86 * v3 + 234 * v19 == 453748)</span><br><span class="line">s.add(181 * v25 + 94 * v42 + 125 * v1 + 226 * v26 + 155 * v7 + 95 * v21 + 212 * v17 + 91 * v31 + 194 * v29 + 98 * v24 + 166 * v11 + 120 * v22 + 59 * v18 + 32 * (v9 + v8) + 158 * (v6 + v5) + 101 * (v41 + v19) + 63 * (v4 + 2 * v23) + 67 * (v28 + 2 * v20) + 11 * (v39 + 10 * v16 + 11 * v10) + 39 * (v30 + 4 * (v2 + v15)) + 233 * v40 + 56 * v27 + 225 * v3 == 358321)</span><br><span class="line">s.add(229 * v21 + 135 * v4 + 197 * v15 + 118 * v5 + 143 * v16 + 134 * v6 + 204 * v40 + 173 * v26 + 81 * v7 + 60 * v28 + 58 * v8 + 179 * v23 + 142 * v9 + 178 * v17 + 230 * v31 + 148 * v29 + 224 * v41 + 194 * v24 + 223 * v10 + 87 * v20 + 200 * v39 + 233 * v11 + 49 * v22 + 127 * v35 + 31 * (4 * v27 + v18) + 42 * (v1 + 6 * v2) + 109 * v42 + 75 * v3 + 165 * v19 == 456073)</span><br><span class="line">s.add(41 * v4 + 253 * v3 + 163 * v15 + 193 * v30 + 155 * v16 + 113 * v27 + 131 * v6 + 55 * v2 + 21 * v40 + 53 * v26 + 13 * v8 + 201 * v25 + 237 * v9 + 223 * v31 + 95 * v24 + 194 * v20 + 62 * v39 + 119 * v11 + 171 * v22 + 135 * v18 + 69 * (v10 + 3 * v28) + 211 * (v1 + v29) + 4 * (43 * v7 + v42 + 40 * v17) + 6 * (v5 + 33 * v41 + 20 * (2 * v19 + v21) + 24 * v23) == 407135)</span><br><span class="line">v13 = v6 + v1 + 8 * v6 + 4 * (v8 + 2 * v27)</span><br><span class="line">s.add(111 * v19  + 190 * v3  + 149 * v4  + 173 * v28  + 118 * v23  + 146 * v29  + 179 * v10  + 51 * v20  + 49 * v39  + 61 * v11  + 125 * v22  + 162 * v18  + 214 * v35  + 14 * (v34 + v24)  + 178 * (v41 + v16)  + 11 * (4 * v9 + v21 + 17 * v42)  + 65 * (v26 + v17 + 2 * v26 + 2 * v5)  + 4 * (v7 + 38 * v15 + 4 * v13 + v13 + 8 * v40 + 43 * v2) == 369835)</span><br><span class="line">s.add(27 * v27 + 223 * v6 + 147 * v26 + 13 * v21 + 35 * (v17 + 7 * v4) + 57 * (v19 + v32 + 3 * v11) + 11 * (v1 + 17 * (v9 + v5) + 10 * v16 + 3 * v31) + 2 * (53 * v23  + v25  + 38 * v15  + 43 * v42  + 115 * v29  + 61 * v22  + 111 * (v10 + v40)  + 14 * (v20 + v7 + 2 * v7 + 8 * v28)  + 109 * v2  + 100 * v41  + 63 * v8) + 93 * v39 + 251 * v30 + 131 * v3 == 393303)</span><br><span class="line">s.add(116 * v9 + 152 * v29 + 235 * v20 + 202 * v18 + 85 * (v8 + 3 * v11) + 221 * (v16 + v40) + 125 * (v33 + v24) + 7 * (19 * v4 + 9 * (v10 + 2 * v25) + v2 + 33 * v3 + 32 * v19) + 3 * (71 * v39 + 43 * v22 + 32 * (v17 + v26) + 15 * (v5 + v6 + 2 * v23) + v28 + 74 * v31 + 48 * v42) + 10 * (v21 + 11 * v30 + 16 * v15) + 136 * v7 + 106 * v1 + 41 * v27 == 403661)</span><br><span class="line">s.add(127 * v4 + 106 * v15 + 182 * v30 + 142 * v5 + 159 * v16 + 17 * v1 + 211 * v6 + 134 * v2 + 199 * v7 + 103 * v28 + 247 * v23 + 122 * v9 + 95 * v41 + 62 * v10 + 203 * v39 + 16 * v11 + 41 * (6 * v42 + v25) + 9 * (22 * v24 + v20 + 27 * v31 + 28 * v40) + 10 * (v8 + v22 + v36 + 8 * v17 + 2 * (v22 + v36 + 8 * v17) + 13 * v29) + 6 * (23 * v27 + v26) + 213 * v18 + 179 * v3 + 43 * v19 == 418596 )</span><br><span class="line">s.add(149 * v19 + v1 + 133 * v22 + 207 * v41 + 182 * v26 + 234 * v7 + 199 * v8 + 168 * v21 + 58 * v10 + 108 * v20 + 142 * v18 + 156 * (v9 + v25) + 16 * (v29 + 6 * v31) + 126 * (v17 + 2 * v39) + 127 * (v4 + 2 * v27 + v40) + 49 * (v30 + 4 * v16) + 11 * (v5 + 22 * v11) + 5 * (v15 + v42 + 45 * v24 + 50 * v28) + 109 * v2 + 124 * v6   + 123 * v3 == 418697)</span><br><span class="line"></span><br><span class="line">while(s.check() == sat):</span><br><span class="line">    condition = []</span><br><span class="line">    m = s.model()</span><br><span class="line">    p = &#x27;&#x27;</span><br><span class="line">    for i in range(32):   </span><br><span class="line">     p += chr(int(<span class="string">&quot;%s&quot;</span> % (m[a1[i]])))</span><br><span class="line">     condition.append(a1[i] != int(<span class="string">&quot;%s&quot;</span> % (m[a1[i]])))</span><br><span class="line">    print(p)</span><br><span class="line">    s.add(Or(condition)) </span><br><span class="line">else:</span><br><span class="line">    print(<span class="string">&quot;No solution found.&quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#hgame&#123;SMC_4nd_s0lv1ng_equ4t1Ons&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">打一下HgameCTF</summary>
    
    
    
    
    <category term="wp" scheme="https://www.zafkiel3.com/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>Hgame 2023 week4 (NSSCTF上下载)   VM</title>
    <link href="https://www.zafkiel3.com/posts/d8a78cc4.html"/>
    <id>https://www.zafkiel3.com/posts/d8a78cc4.html</id>
    <published>2024-05-31T09:41:09.597Z</published>
    <updated>2024-05-31T11:52:27.209Z</updated>
    
    <content type="html"><![CDATA[<p>本人第一次尝试VM类型的逆向CTF题，若有错误，欢迎指出交流QAQ</p><h2 id="Hgame-2023-week4-NSSCTF上下载-VM">Hgame 2023 week4 (NSSCTF上下载)   VM</h2><h3 id="第一部分">第一部分</h3><p>IDA打开，主程序如图：</p><p><img src="https://www.zafkielpic.cc/img/p17.png" alt=""></p><p>我们点击第一个qmemcpy里的sub_140001000函数，跟进sub_140001060（第一个）函数：</p><p><img src="https://www.zafkielpic.cc/img/p18.png" alt=""></p><p>这里应该是对虚拟机初始化，初始化几个关键值（指向字符串的索引位置，临时存放变量位置，输入的每个值位置等），但是我们并不知道这几个值对应的是什么，所以先放一边。回到主函数，我们看到有一个for循环，应该是最后比较flag的地方</p><p>我们将这个数组记为data[i]，然后看下面if语句，很明显是最后的告诉我们是否正确的输出，大致分析了一下，接着我们上主菜：分析这个VM的模拟器（sub_1400010B0）：</p><p><img src="https://www.zafkielpic.cc/img/p19.png" alt=""></p><h3 id="第二部分">第二部分</h3><p>进入这个函数，我们可以看到一个数组，点进去发现有很多的数据，最关键的是它有一个 != 255,</p><p><img src="https://www.zafkielpic.cc/img/p20.png" alt=""></p><p>那么我们可以大胆的猜测这个数组是opcode，那么这个a1 + 24大概就是ip了，我们接着点击下面的函数进行分析：</p><p><img src="https://www.zafkielpic.cc/img/p21.png" alt=""></p><p>这里很明显是一个cpu的模拟器，也是这个vm题最重要的部分，我们挨个分析：</p><h4 id="第一个函数：">第一个函数：</h4><p><img src="https://www.zafkielpic.cc/img/p22.png" alt=""></p><p>发现它是一个将data赋值给a1，还有a1赋值给data的一个操作所以，我们猜测这里是一个mov命令的模拟，但是要注意这里出现了a1[6] + 2/3这个东西，所以猜测这里一个有几个不同的模拟寄存器（模拟rax，rbx等）</p><h4 id="第二个函数：">第二个函数：</h4><p><img src="https://www.zafkielpic.cc/img/p23.png" alt=""></p><p>出现++a1的形式，还有将a1数组里的值赋值，可以猜测这里是一个push命令的模拟</p><h4 id="第三个函数：">第三个函数：</h4><p><img src="https://www.zafkielpic.cc/img/p24.png" alt=""></p><p>出现a1–与上一个函数相反的操作，那应该是pop命令的模拟：</p><p>这里我们看了三个函数，大致确认有一个reg[6]的数组，还有一个ip，一个esp指针，所以我们可以开始构造一个结构题辅助我们解题：</p><p>点击IDA上方的WIndow，再点击Local Types（如果没有这个选项尝试shift + F1快捷打开试试），再按下INS按键(键盘上)，创造一个结构体（删除是DEL键，如果要重新编辑这个结构体可以右键这个结构体有一个Edit选项）</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">struct vm</span><br><span class="line">&#123;</span><br><span class="line">  _<span class="built_in">DWORD</span> reg[<span class="number">6</span>]<span class="comment">;</span></span><br><span class="line">  _<span class="built_in">DWORD</span> <span class="built_in">ip</span><span class="comment">;</span></span><br><span class="line">  _<span class="built_in">DWORD</span> <span class="built_in">esp</span><span class="comment">;</span></span><br><span class="line">&#125;<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>先大概创造成这样，然后我们将之前几个函数类型改一下（选择输入参数前的_DWORD类型按下Y键，再输入我们定义的结构体名称）</p><p><img src="https://www.zafkielpic.cc/img/p25.png" alt=""></p><p>一下子我们可以看见这个函数清晰了很多，说明我们大概是改对了，后面每一个函数都先这么改后再分析</p><h4 id="第四个函数：">第四个函数：</h4><p><img src="https://www.zafkielpic.cc/img/p26.png" alt=""></p><p>看到很多运算符号，所以我们将这个函数命名为calc</p><h4 id="第五个函数：">第五个函数：</h4><p>发现如果直接修改类型为结构体，那么就会出现LOBYTE：</p><p><img src="https://www.zafkielpic.cc/img/p27.png" alt=""></p><p>这个时候我们定义的结构体就可能不全或出现问题，我们重新分析一下这里有一个*(_BYTE *)(a1 + 32)，那么这里的(a1 + 32)类型就不是我们定义的 _DWORD类型，应该为int类型，修改一下我们的结构体:</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">struct vm</span><br><span class="line">&#123;</span><br><span class="line">  _<span class="built_in">DWORD</span> reg[<span class="number">6</span>]<span class="comment">;</span></span><br><span class="line">  _<span class="built_in">DWORD</span> <span class="built_in">ip</span><span class="comment">;</span></span><br><span class="line">  _<span class="built_in">DWORD</span> <span class="built_in">esp</span><span class="comment">;</span></span><br><span class="line">  _<span class="built_in">BYTE</span> zf<span class="comment">; </span></span><br><span class="line">&#125;<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>这里的函数很明显是一个cmp命令的模拟，所以我们直接把(a1 + 32)认为是zf寄存器</p><p>修改后的函数：</p><p><img src="https://www.zafkielpic.cc/img/p28.png" alt=""></p><p>很清晰明了。</p><h4 id="第六，七，八个函数：">第六，七，八个函数：</h4><p>后面这几个函数都是jmp命令的模拟，只不过第七第八个函数用到了zf，所以可能是jne命令和je命令（可以再后面得到汇编代码时再改哪一个是jne哪一个是je）</p><h3 id="第三部分">第三部分</h3><p>然后这里我们就已经将这个vm的逻辑基本理清了，现在就是写脚本还原这个汇编指令，然后读汇编解flag：</p><p>注意每一个模拟汇编指令后ip+的数都不一样，所以我们要一一对应。</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line">opcode = [<span class="number">0</span>x00, <span class="number">0</span>x03, <span class="number">0</span>x02, <span class="number">0</span>x00, <span class="number">0</span>x03, <span class="number">0</span>x00, <span class="number">0</span>x02, <span class="number">0</span>x03, <span class="number">0</span>x00, <span class="number">0</span>x00, <span class="number">0</span>x00, <span class="number">0</span>x00, <span class="number">0</span>x00, <span class="number">0</span>x02, <span class="number">0</span>x01, <span class="number">0</span>x00, <span class="number">0</span>x00, <span class="number">0</span>x03, <span class="number">0</span>x02, <span class="number">0</span>x32, <span class="number">0</span>x03, <span class="number">0</span>x00, <span class="number">0</span>x02, <span class="number">0</span>x03, <span class="number">0</span>x00, <span class="number">0</span>x00, <span class="number">0</span>x00, <span class="number">0</span>x00, <span class="number">0</span>x03, <span class="number">0</span>x00, <span class="number">0</span>x01, <span class="number">0</span>x00, <span class="number">0</span>x00, <span class="number">0</span>x03, <span class="number">0</span>x02, <span class="number">0</span>x64, <span class="number">0</span>x03, <span class="number">0</span>x00, <span class="number">0</span>x02, <span class="number">0</span>x03, <span class="number">0</span>x00, <span class="number">0</span>x00, <span class="number">0</span>x00, <span class="number">0</span>x00, <span class="number">0</span>x03, <span class="number">0</span>x03, <span class="number">0</span>x01, <span class="number">0</span>x00, <span class="number">0</span>x00, <span class="number">0</span>x03, <span class="number">0</span>x00, <span class="number">0</span>x08, <span class="number">0</span>x00, <span class="number">0</span>x02, <span class="number">0</span>x02, <span class="number">0</span>x01, <span class="number">0</span>x03, <span class="number">0</span>x04, <span class="number">0</span>x01, <span class="number">0</span>x00, <span class="number">0</span>x03, <span class="number">0</span>x05, <span class="number">0</span>x02, <span class="number">0</span>x00, <span class="number">0</span>x03, <span class="number">0</span>x00, <span class="number">0</span>x01, <span class="number">0</span>x02, <span class="number">0</span>x00, <span class="number">0</span>x02, <span class="number">0</span>x00, <span class="number">0</span>x01, <span class="number">0</span>x01, <span class="number">0</span>x00, <span class="number">0</span>x00, <span class="number">0</span>x03, <span class="number">0</span>x00, <span class="number">0</span>x01, <span class="number">0</span>x03, <span class="number">0</span>x00, <span class="number">0</span>x03, <span class="number">0</span>x00, <span class="number">0</span>x00, <span class="number">0</span>x02, <span class="number">0</span>x00, <span class="number">0</span>x03, <span class="number">0</span>x00, <span class="number">0</span>x03, <span class="number">0</span>x01, <span class="number">0</span>x28, <span class="number">0</span>x04, <span class="number">0</span>x06, <span class="number">0</span>x5F, <span class="number">0</span>x05, <span class="number">0</span>x00, <span class="number">0</span>x00, <span class="number">0</span>x03, <span class="number">0</span>x03, <span class="number">0</span>x00, <span class="number">0</span>x02, <span class="number">0</span>x01, <span class="number">0</span>x00, <span class="number">0</span>x03, <span class="number">0</span>x02, <span class="number">0</span>x96, <span class="number">0</span>x03, <span class="number">0</span>x00, <span class="number">0</span>x02, <span class="number">0</span>x03, <span class="number">0</span>x00, <span class="number">0</span>x00, <span class="number">0</span>x00, <span class="number">0</span>x00, <span class="number">0</span>x04, <span class="number">0</span>x07, <span class="number">0</span>x88, <span class="number">0</span>x00, <span class="number">0</span>x03, <span class="number">0</span>x00, <span class="number">0</span>x01, <span class="number">0</span>x03, <span class="number">0</span>x00, <span class="number">0</span>x03, <span class="number">0</span>x00, <span class="number">0</span>x00, <span class="number">0</span>x02, <span class="number">0</span>x00, <span class="number">0</span>x03, <span class="number">0</span>x00, <span class="number">0</span>x03, <span class="number">0</span>x01, <span class="number">0</span>x28, <span class="number">0</span>x04, <span class="number">0</span>x07, <span class="number">0</span>x63, <span class="number">0</span>xFF, <span class="number">0</span>xFF]</span><br><span class="line">data= [<span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0</span>x0000009B, <span class="number">0</span>x<span class="number">000000A8</span>, <span class="number">0x00000002</span>, <span class="number">0</span>x000000BC, <span class="number">0</span>x000000AC, <span class="number">0</span>x0000009C, <span class="number">0</span>x000000CE, <span class="number">0</span>x000000FA, <span class="number">0x00000002</span>, <span class="number">0</span>x<span class="number">000000B9</span>, <span class="number">0</span>x000000FF, <span class="number">0</span>x0000003A, <span class="number">0x00000074</span>, <span class="number">0x00000048</span>, <span class="number">0x00000019</span>, <span class="number">0x00000069</span>, <span class="number">0</span>x<span class="number">000000E8</span>, <span class="number">0x00000003</span>, <span class="number">0</span>x000000CB, <span class="number">0</span>x<span class="number">000000C9</span>, <span class="number">0</span>x000000FF, <span class="number">0</span>x000000FC, <span class="number">0x00000080</span>, <span class="number">0</span>x<span class="number">000000D6</span>, <span class="number">0</span>x0000008D, <span class="number">0</span>x<span class="number">000000D7</span>, <span class="number">0x00000072</span>, <span class="number">0x00000000</span>, <span class="number">0</span>x<span class="number">000000A7</span>, <span class="number">0</span>x0000001D, <span class="number">0</span>x0000003D, <span class="number">0x00000099</span>, <span class="number">0x00000088</span>, <span class="number">0x00000099</span>, <span class="number">0</span>x000000BF, <span class="number">0</span>x<span class="number">000000E8</span>, <span class="number">0x00000096</span>, <span class="number">0</span>x0000002E, <span class="number">0</span>x0000005D, <span class="number">0x00000057</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0</span>x<span class="number">000000C9</span>, <span class="number">0</span>x<span class="number">000000A9</span>, <span class="number">0</span>x000000BD, <span class="number">0</span>x0000008B, <span class="number">0x00000017</span>, <span class="number">0</span>x<span class="number">000000C2</span>, <span class="number">0</span>x0000006E, <span class="number">0</span>x<span class="number">000000F8</span>, <span class="number">0</span>x<span class="number">000000F5</span>, <span class="number">0</span>x0000006E, <span class="number">0x00000063</span>, <span class="number">0x00000063</span>, <span class="number">0</span>x<span class="number">000000D5</span>, <span class="number">0x00000046</span>, <span class="number">0</span>x0000005D, <span class="number">0x00000016</span>, <span class="number">0x00000098</span>, <span class="number">0x00000038</span>, <span class="number">0x00000030</span>, <span class="number">0x00000073</span>, <span class="number">0x00000038</span>, <span class="number">0</span>x<span class="number">000000C1</span>, <span class="number">0</span>x0000005E, <span class="number">0</span>x000000ED, <span class="number">0</span>x<span class="number">000000B0</span>, <span class="number">0x00000029</span>, <span class="number">0</span>x0000005A, <span class="number">0x00000018</span>, <span class="number">0x00000040</span>, <span class="number">0</span>x<span class="number">000000A7</span>, <span class="number">0</span>x000000FD, <span class="number">0</span>x0000000A, <span class="number">0</span>x0000001E, <span class="number">0x00000078</span>, <span class="number">0</span>x0000008B, <span class="number">0x00000062</span>, <span class="number">0</span>x000000DB, <span class="number">0</span>x0000000F, <span class="number">0</span>x0000008F, <span class="number">0</span>x0000009C, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00004800</span>, <span class="number">0x0000F100</span>, <span class="number">0x00004000</span>, <span class="number">0x00002100</span>, <span class="number">0x00003501</span>, <span class="number">0x00006400</span>, <span class="number">0x00007801</span>, <span class="number">0</span>x<span class="number">0000F900</span>, <span class="number">0x00001801</span>, <span class="number">0x00005200</span>, <span class="number">0x00002500</span>, <span class="number">0x00005D01</span>, <span class="number">0x00004700</span>, <span class="number">0</span>x0000FD00, <span class="number">0x00006901</span>, <span class="number">0x00005C00</span>, <span class="number">0</span>x0000AF01, <span class="number">0x0000B200</span>, <span class="number">0</span>x0000EC01, <span class="number">0x00005201</span>, <span class="number">0x00004F01</span>, <span class="number">0x00001A01</span>, <span class="number">0x00005000</span>, <span class="number">0x00008501</span>, <span class="number">0</span>x0000CD00, <span class="number">0x00002300</span>, <span class="number">0</span>x<span class="number">0000F800</span>, <span class="number">0x00000C00</span>, <span class="number">0</span>x0000CF00, <span class="number">0x00003D01</span>, <span class="number">0x00004501</span>, <span class="number">0x00008200</span>, <span class="number">0x0000D201</span>, <span class="number">0x00002901</span>, <span class="number">0</span>x<span class="number">0000D501</span>, <span class="number">0x00000601</span>, <span class="number">0x0000A201</span>, <span class="number">0</span>x0000DE00, <span class="number">0</span>x<span class="number">0000A601</span>, <span class="number">0</span>x0000CA01, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>]</span><br><span class="line">ip = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def mov():</span><br><span class="line">    global ip,opcode</span><br><span class="line">    if(opcode[ip + <span class="number">1</span>] == <span class="number">0</span>):</span><br><span class="line">        print(&quot;mov reg[<span class="number">0</span>],data[reg[<span class="number">2</span>]]&quot;)</span><br><span class="line">        ip += <span class="number">4</span></span><br><span class="line">    elif(opcode[ip + <span class="number">1</span>] == <span class="number">1</span>):</span><br><span class="line">        print(&quot;mov data[reg[<span class="number">2</span>]],reg[<span class="number">0</span>]&quot;)</span><br><span class="line">        ip += <span class="number">4</span></span><br><span class="line">    elif(opcode[ip + <span class="number">1</span>] == <span class="number">2</span>):</span><br><span class="line">        print(f&quot;mov reg[&#123;opcode[ip + <span class="number">2</span>]&#125;],reg[&#123;opcode[ip + <span class="number">3</span>]&#125;]&quot;)</span><br><span class="line">        ip += <span class="number">4</span></span><br><span class="line">    elif(opcode[ip + <span class="number">1</span>] == <span class="number">3</span>):</span><br><span class="line">        print(f&quot;mov reg[&#123;opcode[ip + <span class="number">2</span>]&#125;],&#123;opcode[ip + <span class="number">3</span>]&#125;&quot;)</span><br><span class="line">        ip += <span class="number">4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def push():</span><br><span class="line">    global ip,opcode</span><br><span class="line">    if(opcode[ip + <span class="number">1</span>] == <span class="number">0</span>):</span><br><span class="line">        print(&quot;push reg[<span class="number">0</span>]&quot;)</span><br><span class="line">        ip += <span class="number">2</span></span><br><span class="line">    elif(opcode[ip + <span class="number">1</span>] == <span class="number">1</span>):</span><br><span class="line">        print(&quot;push reg[<span class="number">0</span>]&quot;)</span><br><span class="line">        ip += <span class="number">2</span></span><br><span class="line">    elif(opcode[ip + <span class="number">1</span>] == <span class="number">2</span>):</span><br><span class="line">        print(&quot;push reg[<span class="number">2</span>]&quot;)</span><br><span class="line">        ip += <span class="number">2</span></span><br><span class="line">    elif(opcode[ip + <span class="number">1</span>] == <span class="number">3</span>):</span><br><span class="line">        print(&quot;push reg[<span class="number">3</span>]&quot;)</span><br><span class="line">        ip += <span class="number">2</span></span><br><span class="line"></span><br><span class="line">def pop():</span><br><span class="line">    global ip,opcode</span><br><span class="line">    if(opcode[ip + <span class="number">1</span>] == <span class="number">0</span>):</span><br><span class="line">        print(&quot;pop reg[<span class="number">0</span>]&quot;)</span><br><span class="line">        ip += <span class="number">2</span></span><br><span class="line">    elif(opcode[ip + <span class="number">1</span>] == <span class="number">1</span>):</span><br><span class="line">        print(&quot;pop reg[<span class="number">0</span>]&quot;)</span><br><span class="line">        ip += <span class="number">2</span></span><br><span class="line">    elif(opcode[ip + <span class="number">1</span>] == <span class="number">2</span>):</span><br><span class="line">        print(&quot;pop reg[<span class="number">2</span>]&quot;)</span><br><span class="line">        ip += <span class="number">2</span></span><br><span class="line">    elif(opcode[ip + <span class="number">1</span>] == <span class="number">3</span>):</span><br><span class="line">        print(&quot;pop reg[<span class="number">3</span>]&quot;)</span><br><span class="line">        ip += <span class="number">2</span></span><br><span class="line"></span><br><span class="line">def calc():</span><br><span class="line">    global ip,opcode</span><br><span class="line">    if(opcode[ip + <span class="number">1</span>] == <span class="number">0</span>):</span><br><span class="line">        print(f&quot;add reg[&#123;opcode[ip + <span class="number">2</span>]&#125;], reg[&#123;opcode[ip + <span class="number">3</span>]&#125;]&quot;)</span><br><span class="line">        ip += <span class="number">4</span></span><br><span class="line">    elif(opcode[ip + <span class="number">1</span>] == <span class="number">1</span>):</span><br><span class="line">        print(f&quot;sub reg[&#123;opcode[ip + <span class="number">2</span>]&#125;], reg[&#123;opcode[ip + <span class="number">3</span>]&#125;]&quot;)</span><br><span class="line">        ip += <span class="number">4</span></span><br><span class="line">    elif(opcode[ip + <span class="number">1</span>] == <span class="number">2</span>):</span><br><span class="line">        print(f&quot;mul reg[&#123;opcode[ip + <span class="number">2</span>]&#125;], reg[&#123;opcode[ip + <span class="number">3</span>]&#125;]&quot;)</span><br><span class="line">        ip += <span class="number">4</span></span><br><span class="line">    elif(opcode[ip + <span class="number">1</span>] == <span class="number">3</span>):</span><br><span class="line">        print(f&quot;xor reg[&#123;opcode[ip + <span class="number">2</span>]&#125;], reg[&#123;opcode[ip + <span class="number">3</span>]&#125;]&quot;)</span><br><span class="line">        ip += <span class="number">4</span></span><br><span class="line">    elif(opcode[ip + <span class="number">1</span>] == <span class="number">4</span>):</span><br><span class="line">        print(f&quot;shl reg[&#123;opcode[ip + <span class="number">2</span>]&#125;], reg[&#123;opcode[ip + <span class="number">3</span>]&#125;]&quot;)</span><br><span class="line">        print(f&quot;reg[&#123;opcode[ip + <span class="number">2</span>]&#125;] &amp; <span class="number">0</span>xFF00&quot;)</span><br><span class="line">        ip += <span class="number">4</span></span><br><span class="line">    elif(opcode[ip + <span class="number">1</span>] == <span class="number">5</span>):</span><br><span class="line">        print(f&quot;shr reg[&#123;opcode[ip + <span class="number">2</span>]&#125;], reg[&#123;opcode[ip + <span class="number">3</span>]&#125;]&quot;)</span><br><span class="line">        ip += <span class="number">4</span></span><br><span class="line"></span><br><span class="line">def cmp():</span><br><span class="line">    global ip,opcode</span><br><span class="line">    print(&quot;cmp reg[<span class="number">0</span>],reg[<span class="number">1</span>]&quot;)</span><br><span class="line">    ip += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">def jmp():</span><br><span class="line">    global ip,opcode</span><br><span class="line">    print(f&quot;jmp &#123;opcode[ip + <span class="number">1</span>]&#125;&quot;)</span><br><span class="line">    ip += <span class="number">2</span></span><br><span class="line"></span><br><span class="line">def jne():</span><br><span class="line">    global ip,opcode</span><br><span class="line">    print(f&quot;jne &#123;opcode[ip + <span class="number">1</span>]&#125;&quot;)</span><br><span class="line">    ip += <span class="number">2</span></span><br><span class="line"></span><br><span class="line">def je():</span><br><span class="line">    global ip,opcode</span><br><span class="line">    print(f&quot;je &#123;opcode[ip + <span class="number">1</span>]&#125;&quot;)</span><br><span class="line">    ip += <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">while opcode[ip] != <span class="number">255</span>:</span><br><span class="line">    if(opcode[ip] == <span class="number">0</span>):</span><br><span class="line">        print(&quot;%d &quot; % (ip), end = &#x27;&#x27;)</span><br><span class="line">        mov()</span><br><span class="line">    elif(opcode[ip] == <span class="number">1</span>):</span><br><span class="line">        print(&quot;%d &quot; % (ip), end = &#x27;&#x27;)</span><br><span class="line">        push()</span><br><span class="line">    elif(opcode[ip] == <span class="number">2</span>):</span><br><span class="line">        print(&quot;%d &quot; % (ip), end = &#x27;&#x27;)</span><br><span class="line">        pop()</span><br><span class="line">    elif(opcode[ip] == <span class="number">3</span>):</span><br><span class="line">        print(&quot;%d &quot; % (ip), end = &#x27;&#x27;)</span><br><span class="line">        calc()</span><br><span class="line">    elif(opcode[ip] == <span class="number">4</span>):</span><br><span class="line">        print(&quot;%d &quot; % (ip), end = &#x27;&#x27;)</span><br><span class="line">        cmp()</span><br><span class="line">    elif(opcode[ip] == <span class="number">5</span>):</span><br><span class="line">        print(&quot;%d &quot; % (ip), end = &#x27;&#x27;)</span><br><span class="line">        jmp()</span><br><span class="line">    elif(opcode[ip] == <span class="number">6</span>):</span><br><span class="line">        print(&quot;%d &quot; % (ip), end = &#x27;&#x27;)</span><br><span class="line">        jne()</span><br><span class="line">    elif(opcode[ip] == <span class="number">7</span>):</span><br><span class="line">        print(&quot;%d &quot; % (ip), end = &#x27;&#x27;)</span><br><span class="line">        je()</span><br></pre></td></tr></table></figure><p>小技巧：可以在最后print时，在前面print出此时的ip数，这样我们在看汇编时才知道jmp到了哪里，当然也可以让他print横线找到jmp的落点，下面为汇编代码：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">0</span> mov reg[<span class="number">2</span>],<span class="number">0</span></span><br><span class="line"><span class="attribute">4</span> add reg[<span class="number">2</span>], reg[<span class="number">3</span>]</span><br><span class="line"><span class="attribute">8</span> mov reg[<span class="number">0</span>],data[reg[<span class="number">2</span>]]</span><br><span class="line"><span class="attribute">12</span> mov reg[<span class="number">1</span>],reg[<span class="number">0</span>]</span><br><span class="line"><span class="attribute">16</span> mov reg[<span class="number">2</span>],<span class="number">50</span></span><br><span class="line"><span class="attribute">20</span> add reg[<span class="number">2</span>], reg[<span class="number">3</span>]</span><br><span class="line"><span class="attribute">24</span> mov reg[<span class="number">0</span>],data[reg[<span class="number">2</span>]]</span><br><span class="line"><span class="attribute">28</span> add reg[<span class="number">1</span>], reg[<span class="number">0</span>]</span><br><span class="line"><span class="attribute">32</span> mov reg[<span class="number">2</span>],<span class="number">100</span></span><br><span class="line"><span class="attribute">36</span> add reg[<span class="number">2</span>], reg[<span class="number">3</span>]</span><br><span class="line"><span class="attribute">40</span> mov reg[<span class="number">0</span>],data[reg[<span class="number">2</span>]]</span><br><span class="line"><span class="attribute">44</span> xor reg[<span class="number">1</span>], reg[<span class="number">0</span>]</span><br><span class="line"><span class="attribute">48</span> mov reg[<span class="number">0</span>],<span class="number">8</span></span><br><span class="line"><span class="attribute">52</span> mov reg[<span class="number">2</span>],reg[<span class="number">1</span>]</span><br><span class="line"><span class="attribute">56</span> shl reg[<span class="number">1</span>], reg[<span class="number">0</span>]</span><br><span class="line"><span class="attribute">reg</span>[<span class="number">1</span>] &amp; <span class="number">0</span>xFF00</span><br><span class="line"><span class="attribute">60</span> shr reg[<span class="number">2</span>], reg[<span class="number">0</span>]</span><br><span class="line"><span class="attribute">64</span> add reg[<span class="number">1</span>], reg[<span class="number">2</span>]</span><br><span class="line"><span class="attribute">68</span> mov reg[<span class="number">0</span>],reg[<span class="number">1</span>]</span><br><span class="line"><span class="attribute">72</span> push reg[<span class="number">0</span>]</span><br><span class="line"><span class="attribute">74</span> mov reg[<span class="number">0</span>],<span class="number">1</span></span><br><span class="line"><span class="attribute">78</span> add reg[<span class="number">3</span>], reg[<span class="number">0</span>]</span><br><span class="line"><span class="attribute">82</span> mov reg[<span class="number">0</span>],reg[<span class="number">3</span>]</span><br><span class="line"><span class="attribute">86</span> mov reg[<span class="number">1</span>],<span class="number">40</span></span><br><span class="line"><span class="attribute">90</span> cmp reg[<span class="number">0</span>],reg[<span class="number">1</span>]</span><br><span class="line"><span class="attribute">91</span> jne <span class="number">95</span></span><br><span class="line"><span class="attribute">93</span> jmp <span class="number">0</span></span><br><span class="line"><span class="attribute">95</span> mov reg[<span class="number">3</span>],<span class="number">0</span></span><br><span class="line"><span class="attribute">99</span> pop reg[<span class="number">0</span>]</span><br><span class="line"><span class="attribute">101</span> mov reg[<span class="number">2</span>],<span class="number">150</span></span><br><span class="line"><span class="attribute">105</span> add reg[<span class="number">2</span>], reg[<span class="number">3</span>]</span><br><span class="line"><span class="attribute">109</span> mov reg[<span class="number">0</span>],data[reg[<span class="number">2</span>]]</span><br><span class="line"><span class="attribute">113</span> cmp reg[<span class="number">0</span>],reg[<span class="number">1</span>]</span><br><span class="line"><span class="attribute">114</span> je <span class="number">136</span></span><br><span class="line"><span class="attribute">116</span> mov reg[<span class="number">0</span>],<span class="number">1</span></span><br><span class="line"><span class="attribute">120</span> add reg[<span class="number">3</span>], reg[<span class="number">0</span>]</span><br><span class="line"><span class="attribute">124</span> mov reg[<span class="number">0</span>],reg[<span class="number">3</span>]</span><br><span class="line"><span class="attribute">128</span> mov reg[<span class="number">1</span>],<span class="number">40</span></span><br><span class="line"><span class="attribute">132</span> cmp reg[<span class="number">0</span>],reg[<span class="number">1</span>]</span><br><span class="line"><span class="attribute">133</span> je <span class="number">99</span></span><br></pre></td></tr></table></figure><p>读代码大概是进行如下的运算：</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">((((<span class="name">data</span>[<span class="number">0</span> + i] + data[<span class="number">50</span> + i] )^ data[<span class="number">100</span> + i]) &lt;&lt; <span class="number">8</span>) &amp; <span class="number">0</span>xff00 ) + (((<span class="name">data</span>[<span class="number">0</span> + i] + data[<span class="number">50</span> + i] )^ data[<span class="number">100</span> + i]) &gt;&gt; <span class="number">8</span>) </span><br></pre></td></tr></table></figure><p>这个相当于是将异或后的二进制数据的前八位和后八位调换顺序</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 95 mov reg<span class="comment">[3]</span>,0</span><br><span class="line"># 99 pop reg<span class="comment">[0]</span>    </span><br><span class="line"># 101 mov reg<span class="comment">[2]</span>,150  </span><br><span class="line"># 105 add reg<span class="comment">[2]</span>, reg<span class="comment">[3]</span></span><br><span class="line"># 109 mov reg<span class="comment">[0]</span>,data<span class="comment">[reg<span class="comment">[2]</span>]</span> </span><br><span class="line"># 113 cmp reg<span class="comment">[0]</span>,reg<span class="comment">[1]</span>    先进后出的出栈顺序注意  相当于倒序比较</span><br></pre></td></tr></table></figure><p>这里相当于是将改变了顺序的数据与data[150 + i]进行比较，不过要注意的是出栈的顺序，先进后出，所以这里是一个倒序比较，exp如下：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">data = [<span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0</span>x0000009B, <span class="number">0</span>x<span class="number">000000A8</span>, <span class="number">0x00000002</span>, <span class="number">0</span>x000000BC, <span class="number">0</span>x000000AC, <span class="number">0</span>x0000009C, <span class="number">0</span>x000000CE, <span class="number">0</span>x000000FA, <span class="number">0x00000002</span>, <span class="number">0</span>x<span class="number">000000B9</span>, <span class="number">0</span>x000000FF, <span class="number">0</span>x0000003A, <span class="number">0x00000074</span>, <span class="number">0x00000048</span>, <span class="number">0x00000019</span>, <span class="number">0x00000069</span>, <span class="number">0</span>x<span class="number">000000E8</span>, <span class="number">0x00000003</span>, <span class="number">0</span>x000000CB, <span class="number">0</span>x<span class="number">000000C9</span>, <span class="number">0</span>x000000FF, <span class="number">0</span>x000000FC, <span class="number">0x00000080</span>, <span class="number">0</span>x<span class="number">000000D6</span>, <span class="number">0</span>x0000008D, <span class="number">0</span>x<span class="number">000000D7</span>, <span class="number">0x00000072</span>, <span class="number">0x00000000</span>, <span class="number">0</span>x<span class="number">000000A7</span>, <span class="number">0</span>x0000001D, <span class="number">0</span>x0000003D, <span class="number">0x00000099</span>, <span class="number">0x00000088</span>, <span class="number">0x00000099</span>, <span class="number">0</span>x000000BF, <span class="number">0</span>x<span class="number">000000E8</span>, <span class="number">0x00000096</span>, <span class="number">0</span>x0000002E, <span class="number">0</span>x0000005D, <span class="number">0x00000057</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0</span>x<span class="number">000000C9</span>, <span class="number">0</span>x<span class="number">000000A9</span>, <span class="number">0</span>x000000BD, <span class="number">0</span>x0000008B, <span class="number">0x00000017</span>, <span class="number">0</span>x<span class="number">000000C2</span>, <span class="number">0</span>x0000006E, <span class="number">0</span>x<span class="number">000000F8</span>, <span class="number">0</span>x<span class="number">000000F5</span>, <span class="number">0</span>x0000006E, <span class="number">0x00000063</span>, <span class="number">0x00000063</span>, <span class="number">0</span>x<span class="number">000000D5</span>, <span class="number">0x00000046</span>, <span class="number">0</span>x0000005D, <span class="number">0x00000016</span>, <span class="number">0x00000098</span>, <span class="number">0x00000038</span>, <span class="number">0x00000030</span>, <span class="number">0x00000073</span>, <span class="number">0x00000038</span>, <span class="number">0</span>x<span class="number">000000C1</span>, <span class="number">0</span>x0000005E, <span class="number">0</span>x000000ED, <span class="number">0</span>x<span class="number">000000B0</span>, <span class="number">0x00000029</span>, <span class="number">0</span>x0000005A, <span class="number">0x00000018</span>, <span class="number">0x00000040</span>, <span class="number">0</span>x<span class="number">000000A7</span>, <span class="number">0</span>x000000FD, <span class="number">0</span>x0000000A, <span class="number">0</span>x0000001E, <span class="number">0x00000078</span>, <span class="number">0</span>x0000008B, <span class="number">0x00000062</span>, <span class="number">0</span>x000000DB, <span class="number">0</span>x0000000F, <span class="number">0</span>x0000008F, <span class="number">0</span>x0000009C, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00004800</span>, <span class="number">0x0000F100</span>, <span class="number">0x00004000</span>, <span class="number">0x00002100</span>, <span class="number">0x00003501</span>, <span class="number">0x00006400</span>, <span class="number">0x00007801</span>, <span class="number">0</span>x<span class="number">0000F900</span>, <span class="number">0x00001801</span>, <span class="number">0x00005200</span>, <span class="number">0x00002500</span>, <span class="number">0x00005D01</span>, <span class="number">0x00004700</span>, <span class="number">0</span>x0000FD00, <span class="number">0x00006901</span>, <span class="number">0x00005C00</span>, <span class="number">0</span>x0000AF01, <span class="number">0x0000B200</span>, <span class="number">0</span>x0000EC01, <span class="number">0x00005201</span>, <span class="number">0x00004F01</span>, <span class="number">0x00001A01</span>, <span class="number">0x00005000</span>, <span class="number">0x00008501</span>, <span class="number">0</span>x0000CD00, <span class="number">0x00002300</span>, <span class="number">0</span>x<span class="number">0000F800</span>, <span class="number">0x00000C00</span>, <span class="number">0</span>x0000CF00, <span class="number">0x00003D01</span>, <span class="number">0x00004501</span>, <span class="number">0x00008200</span>, <span class="number">0x0000D201</span>, <span class="number">0x00002901</span>, <span class="number">0</span>x<span class="number">0000D501</span>, <span class="number">0x00000601</span>, <span class="number">0x0000A201</span>, <span class="number">0</span>x0000DE00, <span class="number">0</span>x<span class="number">0000A601</span>, <span class="number">0</span>x0000CA01, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>]</span><br><span class="line"></span><br><span class="line">for i in range(<span class="number">40</span>):</span><br><span class="line">    num = data[<span class="number">150</span> + <span class="number">39</span> - i]</span><br><span class="line">    num = (((num &lt;&lt; <span class="number">8</span>) &amp; <span class="number">0</span>xff00) + ((num &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0</span>xff)) &amp; <span class="number">0</span>xffff</span><br><span class="line">    num ^=  data[<span class="number">100</span> + i]</span><br><span class="line">    num -= data[<span class="number">50</span> + i]</span><br><span class="line">    print(chr(num),end= &#x27;&#x27;)</span><br></pre></td></tr></table></figure><p>flag：</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hgame&#123;y0ur_rever5e_sk1ll_i5_very_g0od!!&#125;</span><br></pre></td></tr></table></figure><h3 id="总结">总结</h3><p>第一次做vm的题还是有很多的不足，菜就多练.jpg QWQ</p>]]></content>
    
    
    <summary type="html">复现一下QAQ</summary>
    
    
    
    
    <category term="wp" scheme="https://www.zafkiel3.com/tags/wp/"/>
    
  </entry>
  
</feed>
